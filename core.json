{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is simple admin api doc",
    "title": "Simple Admin",
    "contact": {
      "email": "yuansu.china.work@gmail.com"
    },
    "version": "1.6.8"
  },
  "host": "localhost:9100",
  "basePath": "/",
  "paths": {
    "/api": {
      "post": {
        "description": "Get API by ID | 通过ID获取API",
        "tags": [
          "api"
        ],
        "summary": "Get API by ID | 通过ID获取API",
        "operationId": "GetApiById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiInfoResp",
            "schema": {
              "$ref": "#/definitions/ApiInfoResp"
            }
          }
        }
      }
    },
    "/api/create": {
      "post": {
        "description": "Create API information | 创建API",
        "tags": [
          "api"
        ],
        "summary": "Create API information | 创建API",
        "operationId": "CreateApi",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ApiInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/api/delete": {
      "post": {
        "description": "Delete API information | 删除API信息",
        "tags": [
          "api"
        ],
        "summary": "Delete API information | 删除API信息",
        "operationId": "DeleteApi",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/api/list": {
      "post": {
        "description": "Get API list | 获取API列表",
        "tags": [
          "api"
        ],
        "summary": "Get API list | 获取API列表",
        "operationId": "GetApiList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ApiListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiListResp",
            "schema": {
              "$ref": "#/definitions/ApiListResp"
            }
          }
        }
      }
    },
    "/api/update": {
      "post": {
        "description": "Update API information | 创建API",
        "tags": [
          "api"
        ],
        "summary": "Update API information | 创建API",
        "operationId": "UpdateApi",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ApiInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/audit-log": {
      "post": {
        "description": "Get audit log by ID | 通过ID获取审计日志",
        "tags": [
          "auditlog"
        ],
        "summary": "Get audit log by ID | 通过ID获取审计日志",
        "operationId": "GetAuditLogById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuditLogReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AuditLogResp",
            "schema": {
              "$ref": "#/definitions/AuditLogResp"
            }
          }
        }
      }
    },
    "/audit-log/delete": {
      "post": {
        "description": "Delete audit logs | 删除审计日志",
        "tags": [
          "auditlog"
        ],
        "summary": "Delete audit logs | 删除审计日志",
        "operationId": "DeleteAuditLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/audit-log/list": {
      "post": {
        "description": "Get audit log list | 获取审计日志列表",
        "tags": [
          "auditlog"
        ],
        "summary": "Get audit log list | 获取审计日志列表",
        "operationId": "GetAuditLogList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuditLogListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AuditLogListResp",
            "schema": {
              "$ref": "#/definitions/AuditLogListResp"
            }
          }
        }
      }
    },
    "/audit-log/stats": {
      "post": {
        "description": "Get audit log statistics | 获取审计日志统计",
        "tags": [
          "auditlog"
        ],
        "summary": "Get audit log statistics | 获取审计日志统计",
        "operationId": "GetAuditLogStats",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuditLogStatsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AuditLogStatsResp",
            "schema": {
              "$ref": "#/definitions/AuditLogStatsResp"
            }
          }
        }
      }
    },
    "/auth/tenant/list": {
      "get": {
        "description": "Get public tenant list | 获取公开租户列表（无需认证）",
        "tags": [
          "auth"
        ],
        "summary": "Get public tenant list | 获取公开租户列表（无需认证）",
        "operationId": "GetPublicTenantList",
        "responses": {
          "200": {
            "description": "PublicTenantListResp",
            "schema": {
              "$ref": "#/definitions/PublicTenantListResp"
            }
          }
        }
      }
    },
    "/authority/api/create_or_update": {
      "post": {
        "description": "Create or update API authorization information | 创建或更新API权限",
        "tags": [
          "authority"
        ],
        "summary": "Create or update API authorization information | 创建或更新API权限",
        "operationId": "CreateOrUpdateApiAuthority",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateOrUpdateApiAuthorityReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/authority/api/role": {
      "post": {
        "description": "Get role's API authorization list | 获取角色api权限列表",
        "tags": [
          "authority"
        ],
        "summary": "Get role's API authorization list | 获取角色api权限列表",
        "operationId": "GetApiAuthority",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiAuthorityListResp",
            "schema": {
              "$ref": "#/definitions/ApiAuthorityListResp"
            }
          }
        }
      }
    },
    "/authority/menu/create_or_update": {
      "post": {
        "description": "Create or update menu authorization information | 创建或更新菜单权限",
        "tags": [
          "authority"
        ],
        "summary": "Create or update menu authorization information | 创建或更新菜单权限",
        "operationId": "CreateOrUpdateMenuAuthority",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MenuAuthorityInfoReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/authority/menu/role": {
      "post": {
        "description": "Get role's menu authorization list | 获取角色菜单权限列表",
        "tags": [
          "authority"
        ],
        "summary": "Get role's menu authorization list | 获取角色菜单权限列表",
        "operationId": "GetMenuAuthority",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MenuAuthorityInfoResp",
            "schema": {
              "$ref": "#/definitions/MenuAuthorityInfoResp"
            }
          }
        }
      }
    },
    "/captcha": {
      "get": {
        "description": "Get captcha | 获取验证码",
        "tags": [
          "captcha"
        ],
        "summary": "Get captcha | 获取验证码",
        "operationId": "GetCaptcha",
        "responses": {
          "200": {
            "description": "CaptchaResp",
            "schema": {
              "$ref": "#/definitions/CaptchaResp"
            }
          }
        }
      }
    },
    "/captcha/email": {
      "post": {
        "description": "Get Email Captcha | 获取邮箱验证码",
        "tags": [
          "captcha"
        ],
        "summary": "Get Email Captcha | 获取邮箱验证码",
        "operationId": "GetEmailCaptcha",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailCaptchaReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/captcha/sms": {
      "post": {
        "description": "Get SMS Captcha | 获取短信验证码",
        "tags": [
          "captcha"
        ],
        "summary": "Get SMS Captcha | 获取短信验证码",
        "operationId": "GetSmsCaptcha",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmsCaptchaReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/configuration": {
      "post": {
        "description": "Get configuration by ID | 通过ID获取Configuration",
        "tags": [
          "configuration"
        ],
        "summary": "Get configuration by ID | 通过ID获取Configuration",
        "operationId": "GetConfigurationById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ConfigurationInfoResp",
            "schema": {
              "$ref": "#/definitions/ConfigurationInfoResp"
            }
          }
        }
      }
    },
    "/configuration/create": {
      "post": {
        "description": "Create configuration information | 创建Configuration",
        "tags": [
          "configuration"
        ],
        "summary": "Create configuration information | 创建Configuration",
        "operationId": "CreateConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/configuration/delete": {
      "post": {
        "description": "Delete configuration information | 删除Configuration信息",
        "tags": [
          "configuration"
        ],
        "summary": "Delete configuration information | 删除Configuration信息",
        "operationId": "DeleteConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/configuration/list": {
      "post": {
        "description": "Get configuration list | 获取Configuration列表",
        "tags": [
          "configuration"
        ],
        "summary": "Get configuration list | 获取Configuration列表",
        "operationId": "GetConfigurationList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ConfigurationListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ConfigurationListResp",
            "schema": {
              "$ref": "#/definitions/ConfigurationListResp"
            }
          }
        }
      }
    },
    "/configuration/refreshCache": {
      "delete": {
        "description": "Refresh configuration cache | 刷新参数配置缓存",
        "tags": [
          "configuration"
        ],
        "summary": "Refresh configuration cache | 刷新参数配置缓存",
        "operationId": "RefreshConfigurationCache",
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/configuration/system/list": {
      "get": {
        "description": "Get public system configuration list | 获取公开系统参数列表",
        "tags": [
          "publicapi"
        ],
        "summary": "Get public system configuration list | 获取公开系统参数列表",
        "operationId": "GetPublicSystemConfigurationList",
        "responses": {
          "200": {
            "description": "ConfigurationListResp",
            "schema": {
              "$ref": "#/definitions/ConfigurationListResp"
            }
          }
        }
      }
    },
    "/configuration/update": {
      "post": {
        "description": "Update configuration information | 更新Configuration",
        "tags": [
          "configuration"
        ],
        "summary": "Update configuration information | 更新Configuration",
        "operationId": "UpdateConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ConfigurationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/core/init/database": {
      "get": {
        "description": "Initialize database | 初始化数据库",
        "tags": [
          "base"
        ],
        "summary": "Initialize database | 初始化数据库",
        "operationId": "InitDatabase",
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/core/init/job_database": {
      "get": {
        "description": "Initialize job database | 初始化定时任务数据库",
        "tags": [
          "base"
        ],
        "summary": "Initialize job database | 初始化定时任务数据库",
        "operationId": "InitJobDatabase",
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/core/init/mcms_database": {
      "get": {
        "description": "Initialize Message Center database | 初始化消息中心数据库",
        "tags": [
          "base"
        ],
        "summary": "Initialize Message Center database | 初始化消息中心数据库",
        "operationId": "InitMcmsDatabase",
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/department": {
      "post": {
        "description": "Get Department by ID | 通过ID获取部门",
        "tags": [
          "department"
        ],
        "summary": "Get Department by ID | 通过ID获取部门",
        "operationId": "GetDepartmentById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DepartmentInfoResp",
            "schema": {
              "$ref": "#/definitions/DepartmentInfoResp"
            }
          }
        }
      }
    },
    "/department/create": {
      "post": {
        "description": "Create department information | 创建部门",
        "tags": [
          "department"
        ],
        "summary": "Create department information | 创建部门",
        "operationId": "CreateDepartment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DepartmentInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/department/delete": {
      "post": {
        "description": "Delete department information | 删除部门信息",
        "tags": [
          "department"
        ],
        "summary": "Delete department information | 删除部门信息",
        "operationId": "DeleteDepartment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/department/list": {
      "post": {
        "description": "Get department list | 获取部门列表",
        "tags": [
          "department"
        ],
        "summary": "Get department list | 获取部门列表",
        "operationId": "GetDepartmentList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DepartmentListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DepartmentListResp",
            "schema": {
              "$ref": "#/definitions/DepartmentListResp"
            }
          }
        }
      }
    },
    "/department/update": {
      "post": {
        "description": "Update department information | 更新部门",
        "tags": [
          "department"
        ],
        "summary": "Update department information | 更新部门",
        "operationId": "UpdateDepartment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DepartmentInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/dict/{name}": {
      "get": {
        "description": "Get dictionary detail by dictionary name | 通过字典名称获取字典内容",
        "tags": [
          "dictionarydetail"
        ],
        "summary": "Get dictionary detail by dictionary name | 通过字典名称获取字典内容",
        "operationId": "GetDictionaryDetailByDictionaryName",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DictionaryDetailListResp",
            "schema": {
              "$ref": "#/definitions/DictionaryDetailListResp"
            }
          }
        }
      }
    },
    "/dictionary": {
      "post": {
        "description": "Get Dictionary by ID | 通过ID获取字典",
        "tags": [
          "dictionary"
        ],
        "summary": "Get Dictionary by ID | 通过ID获取字典",
        "operationId": "GetDictionaryById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DictionaryInfoResp",
            "schema": {
              "$ref": "#/definitions/DictionaryInfoResp"
            }
          }
        }
      }
    },
    "/dictionary/create": {
      "post": {
        "description": "Create dictionary information | 创建字典",
        "tags": [
          "dictionary"
        ],
        "summary": "Create dictionary information | 创建字典",
        "operationId": "CreateDictionary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DictionaryInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/dictionary/delete": {
      "post": {
        "description": "Delete dictionary information | 删除字典信息",
        "tags": [
          "dictionary"
        ],
        "summary": "Delete dictionary information | 删除字典信息",
        "operationId": "DeleteDictionary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/dictionary/list": {
      "post": {
        "description": "Get dictionary list | 获取字典列表",
        "tags": [
          "dictionary"
        ],
        "summary": "Get dictionary list | 获取字典列表",
        "operationId": "GetDictionaryList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DictionaryListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DictionaryListResp",
            "schema": {
              "$ref": "#/definitions/DictionaryListResp"
            }
          }
        }
      }
    },
    "/dictionary/update": {
      "post": {
        "description": "Update dictionary information | 更新字典",
        "tags": [
          "dictionary"
        ],
        "summary": "Update dictionary information | 更新字典",
        "operationId": "UpdateDictionary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DictionaryInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/dictionary_detail": {
      "post": {
        "description": "Get DictionaryDetail by ID | 通过ID获取字典键值",
        "tags": [
          "dictionarydetail"
        ],
        "summary": "Get DictionaryDetail by ID | 通过ID获取字典键值",
        "operationId": "GetDictionaryDetailById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DictionaryDetailInfoResp",
            "schema": {
              "$ref": "#/definitions/DictionaryDetailInfoResp"
            }
          }
        }
      }
    },
    "/dictionary_detail/create": {
      "post": {
        "description": "Create dictionary detail information | 创建字典键值",
        "tags": [
          "dictionarydetail"
        ],
        "summary": "Create dictionary detail information | 创建字典键值",
        "operationId": "CreateDictionaryDetail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DictionaryDetailInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/dictionary_detail/delete": {
      "post": {
        "description": "Delete dictionary detail information | 删除字典键值信息",
        "tags": [
          "dictionarydetail"
        ],
        "summary": "Delete dictionary detail information | 删除字典键值信息",
        "operationId": "DeleteDictionaryDetail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/dictionary_detail/list": {
      "post": {
        "description": "Get dictionary detail list | 获取字典键值列表",
        "tags": [
          "dictionarydetail"
        ],
        "summary": "Get dictionary detail list | 获取字典键值列表",
        "operationId": "GetDictionaryDetailList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DictionaryDetailListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DictionaryDetailListResp",
            "schema": {
              "$ref": "#/definitions/DictionaryDetailListResp"
            }
          }
        }
      }
    },
    "/dictionary_detail/update": {
      "post": {
        "description": "Update dictionary detail information | 更新字典键值",
        "tags": [
          "dictionarydetail"
        ],
        "summary": "Update dictionary detail information | 更新字典键值",
        "operationId": "UpdateDictionaryDetail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/DictionaryDetailInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/email/send": {
      "post": {
        "description": "Send email message | 发送电子邮件",
        "tags": [
          "messagesender"
        ],
        "summary": "Send email message | 发送电子邮件",
        "operationId": "SendEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SendEmailReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/email_log": {
      "post": {
        "description": "Get email log by ID | 通过ID获取电子邮件日志",
        "tags": [
          "emaillog"
        ],
        "summary": "Get email log by ID | 通过ID获取电子邮件日志",
        "operationId": "GetEmailLogById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EmailLogInfoResp",
            "schema": {
              "$ref": "#/definitions/EmailLogInfoResp"
            }
          }
        }
      }
    },
    "/email_log/create": {
      "post": {
        "description": "Create email log information | 创建电子邮件日志",
        "tags": [
          "emaillog"
        ],
        "summary": "Create email log information | 创建电子邮件日志",
        "operationId": "CreateEmailLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailLogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/email_log/delete": {
      "post": {
        "description": "Delete email log information | 删除电子邮件日志信息",
        "tags": [
          "emaillog"
        ],
        "summary": "Delete email log information | 删除电子邮件日志信息",
        "operationId": "DeleteEmailLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/email_log/list": {
      "post": {
        "description": "Get email log list | 获取电子邮件日志列表",
        "tags": [
          "emaillog"
        ],
        "summary": "Get email log list | 获取电子邮件日志列表",
        "operationId": "GetEmailLogList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailLogListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EmailLogListResp",
            "schema": {
              "$ref": "#/definitions/EmailLogListResp"
            }
          }
        }
      }
    },
    "/email_log/update": {
      "post": {
        "description": "Update email log information | 更新电子邮件日志",
        "tags": [
          "emaillog"
        ],
        "summary": "Update email log information | 更新电子邮件日志",
        "operationId": "UpdateEmailLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailLogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/email_provider": {
      "post": {
        "description": "Get email provider by ID | 通过ID获取邮箱服务配置",
        "tags": [
          "emailprovider"
        ],
        "summary": "Get email provider by ID | 通过ID获取邮箱服务配置",
        "operationId": "GetEmailProviderById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EmailProviderInfoResp",
            "schema": {
              "$ref": "#/definitions/EmailProviderInfoResp"
            }
          }
        }
      }
    },
    "/email_provider/create": {
      "post": {
        "description": "Create email provider information | 创建邮箱服务配置",
        "tags": [
          "emailprovider"
        ],
        "summary": "Create email provider information | 创建邮箱服务配置",
        "operationId": "CreateEmailProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailProviderInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/email_provider/delete": {
      "post": {
        "description": "Delete email provider information | 删除邮箱服务配置信息",
        "tags": [
          "emailprovider"
        ],
        "summary": "Delete email provider information | 删除邮箱服务配置信息",
        "operationId": "DeleteEmailProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/email_provider/list": {
      "post": {
        "description": "Get email provider list | 获取邮箱服务配置列表",
        "tags": [
          "emailprovider"
        ],
        "summary": "Get email provider list | 获取邮箱服务配置列表",
        "operationId": "GetEmailProviderList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailProviderListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EmailProviderListResp",
            "schema": {
              "$ref": "#/definitions/EmailProviderListResp"
            }
          }
        }
      }
    },
    "/email_provider/update": {
      "post": {
        "description": "Update email provider information | 更新邮箱服务配置",
        "tags": [
          "emailprovider"
        ],
        "summary": "Update email provider information | 更新邮箱服务配置",
        "operationId": "UpdateEmailProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailProviderInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/menu/create": {
      "post": {
        "description": "Create menu information | 创建菜单",
        "tags": [
          "menu"
        ],
        "summary": "Create menu information | 创建菜单",
        "operationId": "CreateMenu",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MenuPlainInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/menu/delete": {
      "post": {
        "description": "Delete menu information | 删除菜单信息",
        "tags": [
          "menu"
        ],
        "summary": "Delete menu information | 删除菜单信息",
        "operationId": "DeleteMenu",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/menu/detail": {
      "post": {
        "description": "Get menu detail | 获取菜单信息",
        "tags": [
          "menu"
        ],
        "summary": "Get menu detail | 获取菜单信息",
        "operationId": "GetMenuDetail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MenuPlainInfoResp",
            "schema": {
              "$ref": "#/definitions/MenuPlainInfoResp"
            }
          }
        }
      }
    },
    "/menu/list": {
      "get": {
        "description": "Get menu list | 获取菜单列表",
        "tags": [
          "menu"
        ],
        "summary": "Get menu list | 获取菜单列表",
        "operationId": "GetMenuList",
        "responses": {
          "200": {
            "description": "MenuPlainInfoListResp",
            "schema": {
              "$ref": "#/definitions/MenuPlainInfoListResp"
            }
          }
        }
      }
    },
    "/menu/role/list": {
      "get": {
        "description": "Get menu list by role | 获取菜单列表",
        "tags": [
          "menu"
        ],
        "summary": "Get menu list by role | 获取菜单列表",
        "operationId": "GetMenuListByRole",
        "responses": {
          "200": {
            "description": "MenuListResp",
            "schema": {
              "$ref": "#/definitions/MenuListResp"
            }
          }
        }
      }
    },
    "/menu/update": {
      "post": {
        "description": "Update menu information | 更新菜单",
        "tags": [
          "menu"
        ],
        "summary": "Update menu information | 更新菜单",
        "operationId": "UpdateMenu",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MenuPlainInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth/accounts": {
      "post": {
        "description": "Get user OAuth accounts | 获取用户OAuth账户",
        "tags": [
          "oauthaccount"
        ],
        "summary": "Get user OAuth accounts | 获取用户OAuth账户",
        "operationId": "GetUserOauthAccounts",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/GetUserOauthAccountsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GetUserOauthAccountsResp",
            "schema": {
              "$ref": "#/definitions/GetUserOauthAccountsResp"
            }
          }
        }
      }
    },
    "/oauth/bind": {
      "post": {
        "description": "User OAuth Account Management APIs | 用户OAuth账户管理API // Bind OAuth account | 绑定OAuth账户",
        "tags": [
          "oauthaccount"
        ],
        "summary": "User OAuth Account Management APIs | 用户OAuth账户管理API // Bind OAuth account | 绑定OAuth账户",
        "operationId": "BindOauthAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BindOauthAccountReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth/callback": {
      "post": {
        "description": "Enhanced OAuth callback with parameters | 增强的OAuth回调处理",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Enhanced OAuth callback with parameters | 增强的OAuth回调处理",
        "operationId": "EnhancedOauthCallback",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthCallbackReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CallbackResp",
            "schema": {
              "$ref": "#/definitions/CallbackResp"
            }
          }
        }
      }
    },
    "/oauth/login": {
      "post": {
        "description": "Oauth log in | Oauth 登录",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Oauth log in | Oauth 登录",
        "operationId": "OauthLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthLoginReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RedirectResp",
            "schema": {
              "$ref": "#/definitions/RedirectResp"
            }
          }
        }
      }
    },
    "/oauth/login/callback": {
      "get": {
        "description": "Oauth log in callback route | Oauth 登录返回调接口",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Oauth log in callback route | Oauth 登录返回调接口",
        "operationId": "OauthCallback",
        "responses": {
          "200": {
            "description": "CallbackResp",
            "schema": {
              "$ref": "#/definitions/CallbackResp"
            }
          }
        }
      }
    },
    "/oauth/providers": {
      "post": {
        "description": "Get available OAuth providers for users | 获取用户可用的OAuth提供商",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Get available OAuth providers for users | 获取用户可用的OAuth提供商",
        "operationId": "GetUserOauthProviders",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserOauthProviderListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserOauthProviderListResp",
            "schema": {
              "$ref": "#/definitions/UserOauthProviderListResp"
            }
          }
        }
      }
    },
    "/oauth/statistics": {
      "post": {
        "description": "Get OAuth statistics | 获取OAuth统计数据",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Get OAuth statistics | 获取OAuth统计数据",
        "operationId": "GetOauthStatistics",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthStatisticsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthStatisticsResp",
            "schema": {
              "$ref": "#/definitions/OauthStatisticsResp"
            }
          }
        }
      }
    },
    "/oauth/unbind": {
      "post": {
        "description": "Unbind OAuth account | 解绑OAuth账户",
        "tags": [
          "oauthaccount"
        ],
        "summary": "Unbind OAuth account | 解绑OAuth账户",
        "operationId": "UnbindOauthAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UnbindOauthAccountReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth_account": {
      "post": {
        "description": "Get oauth account by ID | 通过ID获取OAuth账户",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Get oauth account by ID | 通过ID获取OAuth账户",
        "operationId": "GetOauthAccountById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthAccountInfoResp",
            "schema": {
              "$ref": "#/definitions/OauthAccountInfoResp"
            }
          }
        }
      }
    },
    "/oauth_account/create": {
      "post": {
        "description": "OAuth Account Management APIs | OAuth账户管理API // Create oauth account | 创建OAuth账户",
        "tags": [
          "oauthprovider"
        ],
        "summary": "OAuth Account Management APIs | OAuth账户管理API // Create oauth account | 创建OAuth账户",
        "operationId": "CreateOauthAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthAccountInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth_account/delete": {
      "post": {
        "description": "Delete oauth account | 删除OAuth账户",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Delete oauth account | 删除OAuth账户",
        "operationId": "DeleteOauthAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth_account/list": {
      "post": {
        "description": "Get oauth account list | 获取OAuth账户列表",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Get oauth account list | 获取OAuth账户列表",
        "operationId": "GetOauthAccountList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthAccountListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthAccountListResp",
            "schema": {
              "$ref": "#/definitions/OauthAccountListResp"
            }
          }
        }
      }
    },
    "/oauth_account/update": {
      "post": {
        "description": "Update oauth account | 更新OAuth账户",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Update oauth account | 更新OAuth账户",
        "operationId": "UpdateOauthAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthAccountInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth_provider": {
      "post": {
        "description": "Get oauth provider by ID | 通过ID获取第三方",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Get oauth provider by ID | 通过ID获取第三方",
        "operationId": "GetOauthProviderById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthProviderInfoResp",
            "schema": {
              "$ref": "#/definitions/OauthProviderInfoResp"
            }
          }
        }
      }
    },
    "/oauth_provider/create": {
      "post": {
        "description": "Create oauth provider information | 创建第三方",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Create oauth provider information | 创建第三方",
        "operationId": "CreateOauthProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthProviderInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth_provider/delete": {
      "post": {
        "description": "Delete oauth provider information | 删除第三方信息",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Delete oauth provider information | 删除第三方信息",
        "operationId": "DeleteOauthProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/oauth_provider/list": {
      "post": {
        "description": "Get oauth provider list | 获取第三方列表",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Get oauth provider list | 获取第三方列表",
        "operationId": "GetOauthProviderList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthProviderListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthProviderListResp",
            "schema": {
              "$ref": "#/definitions/OauthProviderListResp"
            }
          }
        }
      }
    },
    "/oauth_provider/test": {
      "post": {
        "description": "Test oauth provider connection | 测试第三方提供商连接",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Test oauth provider connection | 测试第三方提供商连接",
        "operationId": "TestOauthProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthProviderTestReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthProviderTestResp",
            "schema": {
              "$ref": "#/definitions/OauthProviderTestResp"
            }
          }
        }
      }
    },
    "/oauth_provider/update": {
      "post": {
        "description": "Update oauth provider information | 更新第三方",
        "tags": [
          "oauthprovider"
        ],
        "summary": "Update oauth provider information | 更新第三方",
        "operationId": "UpdateOauthProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OauthProviderInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/position": {
      "post": {
        "description": "Get position by ID | 通过ID获取职位",
        "tags": [
          "position"
        ],
        "summary": "Get position by ID | 通过ID获取职位",
        "operationId": "GetPositionById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PositionInfoResp",
            "schema": {
              "$ref": "#/definitions/PositionInfoResp"
            }
          }
        }
      }
    },
    "/position/create": {
      "post": {
        "description": "Create position information | 创建职位",
        "tags": [
          "position"
        ],
        "summary": "Create position information | 创建职位",
        "operationId": "CreatePosition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PositionInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/position/delete": {
      "post": {
        "description": "Delete position information | 删除职位信息",
        "tags": [
          "position"
        ],
        "summary": "Delete position information | 删除职位信息",
        "operationId": "DeletePosition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/position/list": {
      "post": {
        "description": "Get position list | 获取职位列表",
        "tags": [
          "position"
        ],
        "summary": "Get position list | 获取职位列表",
        "operationId": "GetPositionList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PositionListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PositionListResp",
            "schema": {
              "$ref": "#/definitions/PositionListResp"
            }
          }
        }
      }
    },
    "/position/update": {
      "post": {
        "description": "Update position information | 更新职位",
        "tags": [
          "position"
        ],
        "summary": "Update position information | 更新职位",
        "operationId": "UpdatePosition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PositionInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/public/tenant/list": {
      "get": {
        "description": "Get public tenant list | 获取公开租户列表",
        "tags": [
          "public"
        ],
        "summary": "Get public tenant list | 获取公开租户列表",
        "operationId": "GetPublicTenantList",
        "responses": {
          "200": {
            "description": "PublicTenantListResp",
            "schema": {
              "$ref": "#/definitions/PublicTenantListResp"
            }
          }
        }
      }
    },
    "/role": {
      "post": {
        "description": "Get Role by ID | 通过ID获取角色",
        "tags": [
          "role"
        ],
        "summary": "Get Role by ID | 通过ID获取角色",
        "operationId": "GetRoleById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RoleInfoResp",
            "schema": {
              "$ref": "#/definitions/RoleInfoResp"
            }
          }
        }
      }
    },
    "/role/cancelAuthUser": {
      "post": {
        "description": "Cancel User Role Auth | 取消用户角色授权",
        "tags": [
          "role"
        ],
        "summary": "Cancel User Role Auth | 取消用户角色授权",
        "operationId": "CancelRoleAuth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleAuthReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/role/changeRoleStatus": {
      "post": {
        "description": "Change role Status | 更新角色状态",
        "tags": [
          "role"
        ],
        "summary": "Change role Status | 更新角色状态",
        "operationId": "ChangeRoleStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleChangeStatusReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/role/create": {
      "post": {
        "description": "Create role information | 创建角色",
        "tags": [
          "role"
        ],
        "summary": "Create role information | 创建角色",
        "operationId": "CreateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/role/dataScope": {
      "post": {
        "description": "Assign Role DataScope | 授权数据权限",
        "tags": [
          "role"
        ],
        "summary": "Assign Role DataScope | 授权数据权限",
        "operationId": "AssignRoleDataScope",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleDataScopeReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RoleInfoResp",
            "schema": {
              "$ref": "#/definitions/RoleInfoResp"
            }
          }
        }
      }
    },
    "/role/delete": {
      "post": {
        "description": "Delete role information | 删除角色信息",
        "tags": [
          "role"
        ],
        "summary": "Delete role information | 删除角色信息",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/role/list": {
      "post": {
        "description": "Get role list | 获取角色列表",
        "tags": [
          "role"
        ],
        "summary": "Get role list | 获取角色列表",
        "operationId": "GetRoleList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RoleListResp",
            "schema": {
              "$ref": "#/definitions/RoleListResp"
            }
          }
        }
      }
    },
    "/role/multiAuthUser": {
      "post": {
        "description": "Auth User Role | 用户角色授权",
        "tags": [
          "role"
        ],
        "summary": "Auth User Role | 用户角色授权",
        "operationId": "MultiAuthUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleAuthReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/role/unallocatedList": {
      "post": {
        "description": "UnallocatedUserList | 获取未授权给当前角色的用户列表",
        "tags": [
          "user"
        ],
        "summary": "UnallocatedUserList | 获取未授权给当前角色的用户列表",
        "operationId": "UnallocatedList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleUnallocatedUserListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserListResp",
            "schema": {
              "$ref": "#/definitions/UserListResp"
            }
          }
        }
      }
    },
    "/role/update": {
      "post": {
        "description": "Update role information | 更新角色",
        "tags": [
          "role"
        ],
        "summary": "Update role information | 更新角色",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RoleInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/sms/send": {
      "post": {
        "description": "Send sms message | 发送短信",
        "tags": [
          "messagesender"
        ],
        "summary": "Send sms message | 发送短信",
        "operationId": "SendSms",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SendSmsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/sms_log": {
      "post": {
        "description": "Get sms log by ID | 通过ID获取短信日志",
        "tags": [
          "smslog"
        ],
        "summary": "Get sms log by ID | 通过ID获取短信日志",
        "operationId": "GetSmsLogById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SmsLogInfoResp",
            "schema": {
              "$ref": "#/definitions/SmsLogInfoResp"
            }
          }
        }
      }
    },
    "/sms_log/create": {
      "post": {
        "description": "Create sms log information | 创建短信日志",
        "tags": [
          "smslog"
        ],
        "summary": "Create sms log information | 创建短信日志",
        "operationId": "CreateSmsLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmsLogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/sms_log/delete": {
      "post": {
        "description": "Delete sms log information | 删除短信日志信息",
        "tags": [
          "smslog"
        ],
        "summary": "Delete sms log information | 删除短信日志信息",
        "operationId": "DeleteSmsLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/sms_log/list": {
      "post": {
        "description": "Get sms log list | 获取短信日志列表",
        "tags": [
          "smslog"
        ],
        "summary": "Get sms log list | 获取短信日志列表",
        "operationId": "GetSmsLogList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmsLogListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SmsLogListResp",
            "schema": {
              "$ref": "#/definitions/SmsLogListResp"
            }
          }
        }
      }
    },
    "/sms_log/update": {
      "post": {
        "description": "Update sms log information | 更新短信日志",
        "tags": [
          "smslog"
        ],
        "summary": "Update sms log information | 更新短信日志",
        "operationId": "UpdateSmsLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmsLogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/sms_provider": {
      "post": {
        "description": "Get sms provider by ID | 通过ID获取短信配置",
        "tags": [
          "smsprovider"
        ],
        "summary": "Get sms provider by ID | 通过ID获取短信配置",
        "operationId": "GetSmsProviderById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SmsProviderInfoResp",
            "schema": {
              "$ref": "#/definitions/SmsProviderInfoResp"
            }
          }
        }
      }
    },
    "/sms_provider/create": {
      "post": {
        "description": "Create sms provider information | 创建短信配置",
        "tags": [
          "smsprovider"
        ],
        "summary": "Create sms provider information | 创建短信配置",
        "operationId": "CreateSmsProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmsProviderInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/sms_provider/delete": {
      "post": {
        "description": "Delete sms provider information | 删除短信配置信息",
        "tags": [
          "smsprovider"
        ],
        "summary": "Delete sms provider information | 删除短信配置信息",
        "operationId": "DeleteSmsProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/sms_provider/list": {
      "post": {
        "description": "Get sms provider list | 获取短信配置列表",
        "tags": [
          "smsprovider"
        ],
        "summary": "Get sms provider list | 获取短信配置列表",
        "operationId": "GetSmsProviderList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmsProviderListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SmsProviderListResp",
            "schema": {
              "$ref": "#/definitions/SmsProviderListResp"
            }
          }
        }
      }
    },
    "/sms_provider/update": {
      "post": {
        "description": "Update sms provider information | 更新短信配置",
        "tags": [
          "smsprovider"
        ],
        "summary": "Update sms provider information | 更新短信配置",
        "operationId": "UpdateSmsProvider",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SmsProviderInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/task": {
      "post": {
        "description": "Get task by ID | 通过ID获取Task",
        "tags": [
          "task"
        ],
        "summary": "Get task by ID | 通过ID获取Task",
        "operationId": "GetTaskById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TaskInfoResp",
            "schema": {
              "$ref": "#/definitions/TaskInfoResp"
            }
          }
        }
      }
    },
    "/task/create": {
      "post": {
        "description": "Create task information | 创建Task",
        "tags": [
          "task"
        ],
        "summary": "Create task information | 创建Task",
        "operationId": "CreateTask",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/task/delete": {
      "post": {
        "description": "Delete task information | 删除Task信息",
        "tags": [
          "task"
        ],
        "summary": "Delete task information | 删除Task信息",
        "operationId": "DeleteTask",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/task/list": {
      "post": {
        "description": "Get task list | 获取Task列表",
        "tags": [
          "task"
        ],
        "summary": "Get task list | 获取Task列表",
        "operationId": "GetTaskList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TaskListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TaskListResp",
            "schema": {
              "$ref": "#/definitions/TaskListResp"
            }
          }
        }
      }
    },
    "/task/update": {
      "post": {
        "description": "Update task information | 更新Task",
        "tags": [
          "task"
        ],
        "summary": "Update task information | 更新Task",
        "operationId": "UpdateTask",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/task_log": {
      "post": {
        "description": "Get task log by ID | 通过ID获取任务日志",
        "tags": [
          "tasklog"
        ],
        "summary": "Get task log by ID | 通过ID获取任务日志",
        "operationId": "GetTaskLogById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TaskLogInfoResp",
            "schema": {
              "$ref": "#/definitions/TaskLogInfoResp"
            }
          }
        }
      }
    },
    "/task_log/create": {
      "post": {
        "description": "Create task log information | 创建任务日志",
        "tags": [
          "tasklog"
        ],
        "summary": "Create task log information | 创建任务日志",
        "operationId": "CreateTaskLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TaskLogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/task_log/delete": {
      "post": {
        "description": "Delete task log information | 删除任务日志信息",
        "tags": [
          "tasklog"
        ],
        "summary": "Delete task log information | 删除任务日志信息",
        "operationId": "DeleteTaskLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/task_log/list": {
      "post": {
        "description": "Get task log list | 获取任务日志列表",
        "tags": [
          "tasklog"
        ],
        "summary": "Get task log list | 获取任务日志列表",
        "operationId": "GetTaskLogList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TaskLogListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TaskLogListResp",
            "schema": {
              "$ref": "#/definitions/TaskLogListResp"
            }
          }
        }
      }
    },
    "/task_log/update": {
      "post": {
        "description": "Update task log information | 更新任务日志",
        "tags": [
          "tasklog"
        ],
        "summary": "Update task log information | 更新任务日志",
        "operationId": "UpdateTaskLog",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TaskLogInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/tenant": {
      "post": {
        "description": "Get Tenant by ID | 通过ID获取租户",
        "tags": [
          "tenant"
        ],
        "summary": "Get Tenant by ID | 通过ID获取租户",
        "operationId": "GetTenantById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TenantInfoResp",
            "schema": {
              "$ref": "#/definitions/TenantInfoResp"
            }
          }
        }
      }
    },
    "/tenant/code": {
      "post": {
        "description": "Get Tenant by Code | 通过租户码获取租户",
        "tags": [
          "tenant"
        ],
        "summary": "Get Tenant by Code | 通过租户码获取租户",
        "operationId": "GetTenantByCode",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TenantCodeReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TenantInfoResp",
            "schema": {
              "$ref": "#/definitions/TenantInfoResp"
            }
          }
        }
      }
    },
    "/tenant/create": {
      "post": {
        "description": "Create tenant | 创建租户",
        "tags": [
          "tenant"
        ],
        "summary": "Create tenant | 创建租户",
        "operationId": "CreateTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TenantInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/tenant/delete": {
      "post": {
        "description": "Delete tenant | 删除租户",
        "tags": [
          "tenant"
        ],
        "summary": "Delete tenant | 删除租户",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/tenant/init": {
      "post": {
        "description": "Initialize tenant | 初始化租户",
        "tags": [
          "tenant"
        ],
        "summary": "Initialize tenant | 初始化租户",
        "operationId": "InitTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TenantInitReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/tenant/list": {
      "post": {
        "description": "Get tenant list | 获取租户列表",
        "tags": [
          "tenant"
        ],
        "summary": "Get tenant list | 获取租户列表",
        "operationId": "GetTenantList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TenantListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TenantListResp",
            "schema": {
              "$ref": "#/definitions/TenantListResp"
            }
          }
        }
      }
    },
    "/tenant/status": {
      "post": {
        "description": "Update tenant status | 更新租户状态",
        "tags": [
          "tenant"
        ],
        "summary": "Update tenant status | 更新租户状态",
        "operationId": "UpdateTenantStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TenantStatusReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/tenant/update": {
      "post": {
        "description": "Update tenant | 更新租户",
        "tags": [
          "tenant"
        ],
        "summary": "Update tenant | 更新租户",
        "operationId": "UpdateTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TenantInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "description": "Get Token by ID | 通过ID获取Token",
        "tags": [
          "token"
        ],
        "summary": "Get Token by ID | 通过ID获取Token",
        "operationId": "GetTokenById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TokenInfoResp",
            "schema": {
              "$ref": "#/definitions/TokenInfoResp"
            }
          }
        }
      }
    },
    "/token/create": {
      "post": {
        "description": "Create token information | 创建Token",
        "tags": [
          "token"
        ],
        "summary": "Create token information | 创建Token",
        "operationId": "CreateToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TokenInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/token/delete": {
      "post": {
        "description": "Delete token information | 删除Token信息",
        "tags": [
          "token"
        ],
        "summary": "Delete token information | 删除Token信息",
        "operationId": "DeleteToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/token/list": {
      "post": {
        "description": "Get token list | 获取Token列表",
        "tags": [
          "token"
        ],
        "summary": "Get token list | 获取Token列表",
        "operationId": "GetTokenList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TokenListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TokenListResp",
            "schema": {
              "$ref": "#/definitions/TokenListResp"
            }
          }
        }
      }
    },
    "/token/logout": {
      "post": {
        "description": "Force logging out by user UUID | 根据UUID强制用户退出",
        "tags": [
          "token"
        ],
        "summary": "Force logging out by user UUID | 根据UUID强制用户退出",
        "operationId": "Logout",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/token/update": {
      "post": {
        "description": "Update token information | 更新 Token",
        "tags": [
          "token"
        ],
        "summary": "Update token information | 更新 Token",
        "operationId": "UpdateToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TokenInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "Get User by ID | 通过ID获取用户",
        "tags": [
          "user"
        ],
        "summary": "Get User by ID | 通过ID获取用户",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserInfoResp",
            "schema": {
              "$ref": "#/definitions/UserInfoResp"
            }
          }
        }
      }
    },
    "/user/access_token": {
      "get": {
        "description": "Access token | 获取短期 token",
        "tags": [
          "user"
        ],
        "summary": "Access token | 获取短期 token",
        "operationId": "AccessToken",
        "responses": {
          "200": {
            "description": "RefreshTokenResp",
            "schema": {
              "$ref": "#/definitions/RefreshTokenResp"
            }
          }
        }
      }
    },
    "/user/change_password": {
      "post": {
        "description": "Change Password | 修改密码",
        "tags": [
          "user"
        ],
        "summary": "Change Password | 修改密码",
        "operationId": "ChangePassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ChangePasswordReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "description": "Create user information | 创建用户",
        "tags": [
          "user"
        ],
        "summary": "Create user information | 创建用户",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/delete": {
      "post": {
        "description": "Delete user information | 删除用户信息",
        "tags": [
          "user"
        ],
        "summary": "Delete user information | 删除用户信息",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UUIDsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/info": {
      "get": {
        "description": "Get user basic information | 获取用户基本信息",
        "tags": [
          "user"
        ],
        "summary": "Get user basic information | 获取用户基本信息",
        "operationId": "GetUserInfo",
        "responses": {
          "200": {
            "description": "UserBaseIDInfoResp",
            "schema": {
              "$ref": "#/definitions/UserBaseIDInfoResp"
            }
          }
        }
      }
    },
    "/user/list": {
      "post": {
        "description": "Get user list | 获取用户列表",
        "tags": [
          "user"
        ],
        "summary": "Get user list | 获取用户列表",
        "operationId": "GetUserList",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserListResp",
            "schema": {
              "$ref": "#/definitions/UserListResp"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "description": "Log in | 登录",
        "tags": [
          "publicuser"
        ],
        "summary": "Log in | 登录",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LoginReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LoginResp",
            "schema": {
              "$ref": "#/definitions/LoginResp"
            }
          }
        }
      }
    },
    "/user/login_by_email": {
      "post": {
        "description": "Log in by email | 邮箱登录",
        "tags": [
          "publicuser"
        ],
        "summary": "Log in by email | 邮箱登录",
        "operationId": "LoginByEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LoginByEmailReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LoginResp",
            "schema": {
              "$ref": "#/definitions/LoginResp"
            }
          }
        }
      }
    },
    "/user/login_by_sms": {
      "post": {
        "description": "Log in by SMS | 短信登录",
        "tags": [
          "publicuser"
        ],
        "summary": "Log in by SMS | 短信登录",
        "operationId": "LoginBySms",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LoginBySmsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LoginResp",
            "schema": {
              "$ref": "#/definitions/LoginResp"
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "description": "Log out | 退出登陆",
        "tags": [
          "user"
        ],
        "summary": "Log out | 退出登陆",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/perm": {
      "get": {
        "description": "Get user's permission code | 获取用户权限码",
        "tags": [
          "user"
        ],
        "summary": "Get user's permission code | 获取用户权限码",
        "operationId": "GetUserPermCode",
        "responses": {
          "200": {
            "description": "PermCodeResp",
            "schema": {
              "$ref": "#/definitions/PermCodeResp"
            }
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "description": "Get user's profile | 获取用户个人信息",
        "tags": [
          "user"
        ],
        "summary": "Get user's profile | 获取用户个人信息",
        "operationId": "GetUserProfile",
        "responses": {
          "200": {
            "description": "ProfileResp",
            "schema": {
              "$ref": "#/definitions/ProfileResp"
            }
          }
        }
      },
      "post": {
        "description": "Update user's profile | 更新用户个人信息",
        "tags": [
          "user"
        ],
        "summary": "Update user's profile | 更新用户个人信息",
        "operationId": "UpdateUserProfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProfileInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/refresh_token": {
      "get": {
        "description": "Refresh token | 获取刷新 token",
        "tags": [
          "user"
        ],
        "summary": "Refresh token | 获取刷新 token",
        "operationId": "RefreshToken",
        "responses": {
          "200": {
            "description": "RefreshTokenResp",
            "schema": {
              "$ref": "#/definitions/RefreshTokenResp"
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "description": "Register | 注册",
        "tags": [
          "publicuser"
        ],
        "summary": "Register | 注册",
        "operationId": "Register",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RegisterReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/register_by_email": {
      "post": {
        "description": "Register by Email | 邮箱注册",
        "tags": [
          "publicuser"
        ],
        "summary": "Register by Email | 邮箱注册",
        "operationId": "RegisterByEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RegisterByEmailReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/register_by_sms": {
      "post": {
        "description": "Register by SMS | 短信注册",
        "tags": [
          "publicuser"
        ],
        "summary": "Register by SMS | 短信注册",
        "operationId": "RegisterBySms",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RegisterBySmsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/resetPwd": {
      "post": {
        "description": "Reset password | 管理员后台重置密码",
        "tags": [
          "user"
        ],
        "summary": "Reset password | 管理员后台重置密码",
        "operationId": "ResetPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ResetPasswordReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/reset_password_by_email": {
      "post": {
        "description": "Reset password by Email | 通过邮箱重置密码",
        "tags": [
          "publicuser"
        ],
        "summary": "Reset password by Email | 通过邮箱重置密码",
        "operationId": "ResetPasswordByEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ResetPasswordByEmailReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/reset_password_by_sms": {
      "post": {
        "description": "Reset password by Sms | 通过短信重置密码",
        "tags": [
          "publicuser"
        ],
        "summary": "Reset password by Sms | 通过短信重置密码",
        "operationId": "ResetPasswordBySms",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ResetPasswordBySmsReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    },
    "/user/update": {
      "post": {
        "description": "Update user information | 更新用户",
        "tags": [
          "user"
        ],
        "summary": "Update user information | 更新用户",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BaseMsgResp",
            "schema": {
              "$ref": "#/definitions/BaseMsgResp"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiAuthorityInfo": {
      "description": "The response data of api authorization | API授权数据",
      "type": "object",
      "required": [
        "path",
        "method"
      ],
      "properties": {
        "method": {
          "description": "API method | API请求方法",
          "type": "string",
          "maxLength": 4,
          "minLength": 3,
          "x-go-name": "Method"
        },
        "path": {
          "description": "API path | API 路径",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "Path"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ApiAuthorityListInfo": {
      "description": "The  data of api authorization list | API授权列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The api authorization list data | API授权列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiAuthorityInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ApiAuthorityListResp": {
      "description": "The response data of api authorization list | API授权列表返回数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/ApiAuthorityListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ApiInfo": {
      "description": "The API information | API信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "description": "API Description | API 描述",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Description"
        },
        "group": {
          "description": "API group | API分组",
          "type": "string",
          "maxLength": 80,
          "minLength": 1,
          "x-go-name": "Group"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "isRequired": {
          "description": "Whether is required | 是否是必须的 api",
          "type": "boolean",
          "x-go-name": "IsRequired"
        },
        "method": {
          "description": "API request method e.g. POST | API请求类型 如POST",
          "type": "string",
          "maxLength": 7,
          "minLength": 3,
          "x-go-name": "Method"
        },
        "path": {
          "description": "API path | API路径",
          "type": "string",
          "maxLength": 80,
          "minLength": 1,
          "x-go-name": "Path"
        },
        "serviceName": {
          "description": "Service name | 服务名称",
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "trans": {
          "description": "Translated Name | 多语言名称",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ApiInfoResp": {
      "description": "API information response | API信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/ApiInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ApiListInfo": {
      "description": "API list data | API 列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | API列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ApiListReq": {
      "description": "Get API list request params | API列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "description": {
          "description": "API Description | API 描述",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Description"
        },
        "group": {
          "description": "API group | API分组",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "Group"
        },
        "isRequired": {
          "description": "Whether is required | 是否是必须的 api",
          "type": "boolean",
          "x-go-name": "IsRequired"
        },
        "method": {
          "description": "API request method e.g. POST | API请求类型 如POST",
          "type": "string",
          "maxLength": 7,
          "minLength": 3,
          "x-go-name": "Method"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "path": {
          "description": "API path | API路径",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Path"
        },
        "serviceName": {
          "description": "Service name | 服务名称",
          "type": "string",
          "x-go-name": "ServiceName"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ApiListResp": {
      "description": "The response data of API list | API列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/ApiListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogInfo": {
      "description": "The response data of audit log information | 审计日志信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "durationMs": {
          "description": "Duration in milliseconds | 耗时(毫秒)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DurationMs"
        },
        "errorMessage": {
          "description": "Error message | 错误信息",
          "type": "string",
          "x-go-name": "ErrorMessage"
        },
        "id": {
          "description": "ID",
          "type": "string",
          "x-go-name": "Id"
        },
        "ipAddress": {
          "description": "IP address | IP地址",
          "type": "string",
          "maxLength": 45,
          "x-go-name": "IpAddress"
        },
        "metadata": {
          "description": "Metadata | 元数据",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Metadata"
        },
        "operationType": {
          "description": "Operation type | 操作类型",
          "type": "string",
          "x-go-name": "OperationType"
        },
        "requestData": {
          "description": "Request data | 请求数据",
          "type": "string",
          "x-go-name": "RequestData"
        },
        "requestMethod": {
          "description": "Request method | 请求方法",
          "type": "string",
          "maxLength": 10,
          "x-go-name": "RequestMethod"
        },
        "requestPath": {
          "description": "Request path | 请求路径",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "RequestPath"
        },
        "resourceId": {
          "description": "Resource ID | 资源ID",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "ResourceId"
        },
        "resourceType": {
          "description": "Resource type | 资源类型",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "ResourceType"
        },
        "responseData": {
          "description": "Response data | 响应数据",
          "type": "string",
          "x-go-name": "ResponseData"
        },
        "responseStatus": {
          "description": "Response status | 响应状态",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ResponseStatus"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "tenantId": {
          "description": "Tenant ID | 租户ID",
          "type": "string",
          "maxLength": 36,
          "x-go-name": "TenantId"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        },
        "userAgent": {
          "description": "User agent | 用户代理",
          "type": "string",
          "maxLength": 512,
          "x-go-name": "UserAgent"
        },
        "userId": {
          "description": "User ID | 用户ID",
          "type": "string",
          "maxLength": 36,
          "x-go-name": "UserId"
        },
        "userName": {
          "description": "User name | 用户名",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogListInfo": {
      "description": "The data of audit log list | 审计日志列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 审计日志列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogListReq": {
      "description": "Get audit log list request params | 审计日志列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "endTime": {
          "description": "End time | 结束时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EndTime"
        },
        "ipAddress": {
          "description": "IP address | IP地址",
          "type": "string",
          "maxLength": 45,
          "x-go-name": "IpAddress"
        },
        "maxDuration": {
          "description": "Max duration (ms) | 最大耗时(毫秒)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxDuration"
        },
        "minDuration": {
          "description": "Min duration (ms) | 最小耗时(毫秒)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinDuration"
        },
        "operationType": {
          "description": "Operation type | 操作类型",
          "type": "string",
          "x-go-name": "OperationType"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "requestMethod": {
          "description": "Request method | 请求方法",
          "type": "string",
          "maxLength": 10,
          "x-go-name": "RequestMethod"
        },
        "requestPath": {
          "description": "Request path | 请求路径",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "RequestPath"
        },
        "resourceId": {
          "description": "Resource ID | 资源ID",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "ResourceId"
        },
        "resourceType": {
          "description": "Resource type | 资源类型",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "ResourceType"
        },
        "responseStatus": {
          "description": "Response status | 响应状态",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ResponseStatus"
        },
        "startTime": {
          "description": "Start time | 开始时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StartTime"
        },
        "userId": {
          "description": "User ID | 用户ID",
          "type": "string",
          "maxLength": 36,
          "x-go-name": "UserId"
        },
        "userName": {
          "description": "User name | 用户名",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogListResp": {
      "description": "The response data of audit log list | 审计日志列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/AuditLogListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogReq": {
      "description": "Get audit log by ID request params | 通过ID获取审计日志请求参数",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID",
          "type": "string",
          "maxLength": 36,
          "x-go-name": "Id"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogResp": {
      "description": "The response data when create or update audit log | 创建或更新审计日志时返回的数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/AuditLogInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogStatsItem": {
      "description": "Audit log statistics item | 审计日志统计项",
      "type": "object",
      "properties": {
        "count": {
          "description": "Count | 数量",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "label": {
          "description": "Label | 标签",
          "type": "string",
          "x-go-name": "Label"
        },
        "percentage": {
          "description": "Percentage | 百分比",
          "type": "number",
          "format": "double",
          "x-go-name": "Percentage"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogStatsReq": {
      "description": "Audit log statistics request params | 审计日志统计请求参数",
      "type": "object",
      "properties": {
        "endTime": {
          "description": "End time | 结束时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EndTime"
        },
        "groupBy": {
          "description": "Group by field | 分组字段",
          "type": "string",
          "x-go-name": "GroupBy"
        },
        "startTime": {
          "description": "Start time | 开始时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StartTime"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "AuditLogStatsResp": {
      "description": "Audit log statistics response | 审计日志统计响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Statistics data | 统计数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogStatsItem"
          },
          "x-go-name": "Data"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "BaseDataInfo": {
      "description": "The basic response with data | 基础带数据信息",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "BaseIDInfo": {
      "description": "The base ID response data | 基础ID信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "BaseListInfo": {
      "description": "The basic response with data | 基础带数据信息",
      "type": "object",
      "properties": {
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "BaseMsgResp": {
      "description": "The basic response without data | 基础不带数据信息",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "BaseUUIDInfo": {
      "description": "The base UUID response data | 基础UUID信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID",
          "type": "string",
          "x-go-name": "Id"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "BindOauthAccountReq": {
      "description": "Bind OAuth account request | 绑定OAuth账户请求",
      "type": "object",
      "required": [
        "userId",
        "providerType",
        "providerId",
        "authorizationCode",
        "state"
      ],
      "properties": {
        "authorizationCode": {
          "description": "Authorization code | 授权码",
          "type": "string",
          "x-go-name": "AuthorizationCode"
        },
        "providerId": {
          "description": "Provider ID | 提供商ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ProviderId"
        },
        "providerType": {
          "description": "Provider type | 提供商类型",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "ProviderType"
        },
        "state": {
          "description": "State parameter | 状态参数",
          "type": "string",
          "x-go-name": "State"
        },
        "userId": {
          "description": "User ID | 用户ID",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "CallbackResp": {
      "description": "The oauth callback response data | Oauth回调数据",
      "type": "object",
      "properties": {
        "expire": {
          "description": "Expire timestamp | 过期时间戳",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Expire"
        },
        "role": {
          "$ref": "#/definitions/RoleInfoSimple"
        },
        "token": {
          "description": "Token for authorization | 验证身份的token",
          "type": "string",
          "x-go-name": "Token"
        },
        "userId": {
          "description": "User's UUID | 用户的UUID",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "CaptchaInfo": {
      "description": "The information of captcha | 验证码数据",
      "type": "object",
      "properties": {
        "captchaId": {
          "type": "string",
          "x-go-name": "CaptchaId"
        },
        "imgPath": {
          "type": "string",
          "x-go-name": "ImgPath"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "CaptchaResp": {
      "description": "The response data of captcha | 验证码返回数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/CaptchaInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ChangePasswordReq": {
      "description": "change user's password request | 修改密码请求参数",
      "type": "object",
      "required": [
        "oldPassword",
        "newPassword"
      ],
      "properties": {
        "newPassword": {
          "description": "User's new password | 用户新密码",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "NewPassword"
        },
        "oldPassword": {
          "description": "User's old password | 用户旧密码",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "OldPassword"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ConfigurationInfo": {
      "description": "The response data of configuration information | 参数配置信息",
      "type": "object",
      "properties": {
        "category": {
          "description": "Configuration category | 配置的分类",
          "type": "string",
          "x-go-name": "Category"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "key": {
          "description": "Configuration key | 配置的键名",
          "type": "string",
          "x-go-name": "Key"
        },
        "name": {
          "description": "Configurarion name | 配置名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "remark": {
          "description": "Remark | 备注",
          "type": "string",
          "x-go-name": "Remark"
        },
        "sort": {
          "description": "Sort Number | 排序编号",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Sort"
        },
        "state": {
          "description": "State true: normal false: ban | 状态 true 正常 false 禁用",
          "type": "boolean",
          "x-go-name": "State"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        },
        "value": {
          "description": "Configuraion value | 配置的值",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ConfigurationInfoResp": {
      "description": "Configuration information response | 参数配置信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/ConfigurationInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ConfigurationListInfo": {
      "description": "Configuration list data | 参数配置列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | Configuration列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ConfigurationListReq": {
      "description": "Get configuration list request params | 参数配置列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "category": {
          "description": "Category",
          "type": "string",
          "x-go-name": "Category"
        },
        "key": {
          "description": "Key",
          "type": "string",
          "x-go-name": "Key"
        },
        "name": {
          "description": "Name",
          "type": "string",
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ConfigurationListResp": {
      "description": "The response data of configuration list | 参数配置列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/ConfigurationListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "CreateOrUpdateApiAuthorityReq": {
      "description": "Create or update api authorization information request | 创建或更新API授权信息",
      "type": "object",
      "required": [
        "roleId",
        "data"
      ],
      "properties": {
        "data": {
          "description": "API authorization list | API授权列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiAuthorityInfo"
          },
          "x-go-name": "Data"
        },
        "roleId": {
          "description": "Role ID | 角色ID",
          "type": "integer",
          "format": "uint64",
          "maximum": 1000,
          "x-go-name": "RoleId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "CurrentTenantResp": {
      "description": "Current active tenant response | 当前激活租户响应",
      "type": "object",
      "properties": {
        "activeTenantId": {
          "description": "Active Tenant ID | 当前激活租户ID",
          "type": "string",
          "x-go-name": "ActiveTenantId"
        },
        "activeTenantInfo": {
          "$ref": "#/definitions/TenantInfo"
        },
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data"
        },
        "isSwitched": {
          "description": "Is Switched | 是否已切换",
          "type": "boolean",
          "x-go-name": "IsSwitched"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        },
        "originalTenantId": {
          "description": "Original Tenant ID | 原始租户ID",
          "type": "string",
          "x-go-name": "OriginalTenantId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DepartmentInfo": {
      "description": "The response data of department information | 部门信息",
      "type": "object",
      "properties": {
        "ancestors": {
          "description": "Ancestors | 父级部门列表",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Ancestors"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "description": "Email | 邮箱",
          "type": "string",
          "maxLength": 70,
          "x-go-name": "Email"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "leader": {
          "description": "Leader | 部门负责人",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Leader"
        },
        "name": {
          "description": "Name | 部门名称",
          "type": "string",
          "maxLength": 50,
          "minLength": 1,
          "x-go-name": "Name"
        },
        "parentId": {
          "description": "ParentId | 父级 ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ParentId"
        },
        "phone": {
          "description": "Phone | 电话号码",
          "type": "string",
          "maxLength": 18,
          "x-go-name": "Phone"
        },
        "remark": {
          "description": "Remark | 备注",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Remark"
        },
        "sort": {
          "description": "Sort | 排序",
          "type": "integer",
          "format": "uint32",
          "maximum": 10000,
          "x-go-name": "Sort"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "trans": {
          "description": "Translated Name | 展示名称",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DepartmentInfoResp": {
      "description": "Department information response | 部门信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/DepartmentInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DepartmentListInfo": {
      "description": "Department list data | 部门列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 部门列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DepartmentInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DepartmentListReq": {
      "description": "Get department list request params | 部门列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "leader": {
          "description": "Leader | 部门负责人",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Leader"
        },
        "name": {
          "description": "Name | 部门名称",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DepartmentListResp": {
      "description": "The response data of department list | 部门列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/DepartmentListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryDetailInfo": {
      "description": "The response data of dictionary detail information | 字典键值信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "cssClass": {
          "description": "CssClass | 字典样式",
          "type": "string",
          "x-go-name": "CssClass"
        },
        "dictionaryId": {
          "description": "Dictionary ID | 所属字典ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DictionaryId"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "isDefault": {
          "description": "IsDefault | 是否为默认值",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "IsDefault"
        },
        "key": {
          "description": "Key | 键",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "Key"
        },
        "listClass": {
          "description": "ListClass | 字典样式",
          "type": "string",
          "x-go-name": "ListClass"
        },
        "sort": {
          "description": "Sort | 排序",
          "type": "integer",
          "format": "uint32",
          "maximum": 10000,
          "x-go-name": "Sort"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "title": {
          "description": "Title | 显示名称",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Title"
        },
        "trans": {
          "description": "Title I18n Trans | 标题国际化后",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        },
        "value": {
          "description": "Value | 值",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryDetailInfoResp": {
      "description": "DictionaryDetail information response | 字典键值信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/DictionaryDetailInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryDetailListInfo": {
      "description": "DictionaryDetail list data | 字典键值列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 字典键值列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryDetailInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryDetailListReq": {
      "description": "Get dictionary detail list request params | 字典键值列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "dictionaryId": {
          "description": "Dictionary ID | 所属字典ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DictionaryId"
        },
        "name": {
          "description": "Title | 标题",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "Title"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryDetailListResp": {
      "description": "The response data of dictionary detail list | 字典键值列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/DictionaryDetailListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryInfo": {
      "description": "The response data of dictionary information | 字典信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "desc": {
          "description": "Description of dictionary | 字典描述",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Desc"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "name": {
          "description": "Name | 字典名称",
          "type": "string",
          "maxLength": 50,
          "minLength": 1,
          "x-go-name": "Name"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "title": {
          "description": "Title | 字典多语言名称",
          "type": "string",
          "maxLength": 50,
          "minLength": 1,
          "x-go-name": "Title"
        },
        "trans": {
          "description": "Translated Name | 字典多语言名称",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryInfoResp": {
      "description": "Dictionary information response | 字典信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/DictionaryInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryListInfo": {
      "description": "Dictionary list data | 字典列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 字典列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DictionaryInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryListReq": {
      "description": "Get dictionary list request params | 字典列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "name": {
          "description": "Name | 字典名称",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "title": {
          "description": "Title | 字典标题",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "DictionaryListResp": {
      "description": "The response data of dictionary list | 字典列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/DictionaryListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailCaptchaReq": {
      "description": "The email captcha request | 邮箱验证码请求参数",
      "type": "object",
      "properties": {
        "email": {
          "description": "The email address | 邮箱地址",
          "type": "string",
          "x-go-name": "Email"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailLogInfo": {
      "description": "The response data of email log information | 电子邮件日志信息",
      "type": "object",
      "properties": {
        "content": {
          "description": "Content | 内容",
          "type": "string",
          "x-go-name": "Content"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID",
          "type": "string",
          "x-go-name": "Id"
        },
        "provider": {
          "description": "Provider | 服务提供商",
          "type": "string",
          "x-go-name": "Provider"
        },
        "sendStatus": {
          "description": "SendStatus | 发送状态",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "SendStatus"
        },
        "subject": {
          "description": "Subject | 主题",
          "type": "string",
          "x-go-name": "Subject"
        },
        "target": {
          "description": "Target | 目标邮箱",
          "type": "string",
          "x-go-name": "Target"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailLogInfoResp": {
      "description": "EmailLog information response | 电子邮件日志信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/EmailLogInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailLogListInfo": {
      "description": "EmailLog list data | 电子邮件日志列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 电子邮件日志列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailLogInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailLogListReq": {
      "description": "Get email log list request params | 电子邮件日志列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "provider": {
          "description": "Provider | 服务提供商",
          "type": "string",
          "x-go-name": "Provider"
        },
        "sendStatus": {
          "description": "Send Status | 发送状态",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "SendStatus"
        },
        "subject": {
          "description": "Subject | 主题",
          "type": "string",
          "x-go-name": "Subject"
        },
        "target": {
          "description": "Target | 目标邮箱",
          "type": "string",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailLogListResp": {
      "description": "The response data of email log list | 电子邮件日志列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/EmailLogListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailProviderInfo": {
      "description": "The response data of email provider information | 邮箱服务配置信息",
      "type": "object",
      "properties": {
        "authType": {
          "description": "AuthType | 认证类型",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "AuthType"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "emailAddr": {
          "description": "Email address | 邮箱地址",
          "type": "string",
          "x-go-name": "EmailAddr"
        },
        "hostName": {
          "description": "HostName | 主机名",
          "type": "string",
          "x-go-name": "HostName"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "identify": {
          "description": "Identify | 身份标识",
          "type": "string",
          "x-go-name": "Identify"
        },
        "isDefault": {
          "description": "Is default provider | 是否默认",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "description": "Name | 名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "description": "Password | 密码",
          "type": "string",
          "x-go-name": "Password"
        },
        "port": {
          "description": "Port | 端口",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Port"
        },
        "secret": {
          "description": "Secret | 密钥",
          "type": "string",
          "x-go-name": "Secret"
        },
        "tls": {
          "description": "Tls | 是否启用TLS",
          "type": "boolean",
          "x-go-name": "Tls"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailProviderInfoResp": {
      "description": "EmailProvider information response | 邮箱服务配置信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/EmailProviderInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailProviderListInfo": {
      "description": "EmailProvider list data | 邮箱服务配置列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 邮箱服务配置列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailProviderInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailProviderListReq": {
      "description": "Get email provider list request params | 邮箱服务配置列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "emailAddr": {
          "description": "Email address | 邮箱地址",
          "type": "string",
          "x-go-name": "EmailAddr"
        },
        "name": {
          "description": "Name | 名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "EmailProviderListResp": {
      "description": "The response data of email provider list | 邮箱服务配置列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/EmailProviderListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "GetUserOauthAccountsReq": {
      "description": "Get user OAuth accounts request | 获取用户OAuth账户请求",
      "type": "object",
      "required": [
        "page",
        "pageSize",
        "userId"
      ],
      "properties": {
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "userId": {
          "description": "User ID | 用户ID",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "GetUserOauthAccountsResp": {
      "description": "Get user OAuth accounts response | 获取用户OAuth账户响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/OauthAccountListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "IDPathReq": {
      "description": "Basic ID request | 基础ID地址参数请求",
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "IDReq": {
      "description": "Basic ID request | 基础ID参数请求",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "IDsReq": {
      "description": "Basic IDs request | 基础ID数组参数请求",
      "type": "object",
      "required": [
        "ids"
      ],
      "properties": {
        "ids": {
          "description": "IDs",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "Ids"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "LoginByEmailReq": {
      "description": "Log in by email request | 邮箱登录参数",
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "captcha": {
          "description": "The Captcha which users input | 用户输入的验证码",
          "type": "string",
          "maxLength": 5,
          "minLength": 5,
          "x-go-name": "Captcha"
        },
        "email": {
          "description": "The user's email address | 用户的邮箱",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Email"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "LoginBySmsReq": {
      "description": "Log in by SMS request | 短信登录参数",
      "type": "object",
      "required": [
        "phoneNumber"
      ],
      "properties": {
        "captcha": {
          "description": "The Captcha which users input | 用户输入的验证码",
          "type": "string",
          "maxLength": 5,
          "minLength": 5,
          "x-go-name": "Captcha"
        },
        "phoneNumber": {
          "description": "The user's mobile phone number | 用户的手机号码",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "PhoneNumber"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "LoginInfo": {
      "description": "The log in information | 登陆返回的数据信息",
      "type": "object",
      "properties": {
        "expire": {
          "description": "Expire timestamp | 过期时间戳",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Expire"
        },
        "token": {
          "description": "Token for authorization | 验证身份的token",
          "type": "string",
          "x-go-name": "Token"
        },
        "userId": {
          "description": "User's UUID | 用户的UUID",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "LoginReq": {
      "description": "Login request | 登录参数",
      "type": "object",
      "required": [
        "username",
        "password",
        "captchaId",
        "captcha"
      ],
      "properties": {
        "captcha": {
          "description": "The Captcha which users input | 用户输入的验证码",
          "type": "string",
          "maxLength": 5,
          "minLength": 5,
          "x-go-name": "Captcha"
        },
        "captchaId": {
          "description": "Captcha ID which store in redis | 验证码编号, 存在redis中",
          "type": "string",
          "maxLength": 20,
          "minLength": 20,
          "x-go-name": "CaptchaId"
        },
        "password": {
          "description": "Password | 密码",
          "type": "string",
          "maxLength": 30,
          "minLength": 6,
          "x-go-name": "Password"
        },
        "username": {
          "description": "User Name | 用户名",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "LoginResp": {
      "description": "The log in response data | 登录返回数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/LoginInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "LoginTrendData": {
      "description": "Login trend data | 登录趋势数据",
      "type": "object",
      "properties": {
        "count": {
          "description": "Count | 数量",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "date": {
          "description": "Date | 日期",
          "type": "string",
          "x-go-name": "Date"
        },
        "failureCount": {
          "description": "Failure count | 失败数量",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailureCount"
        },
        "successCount": {
          "description": "Success count | 成功数量",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SuccessCount"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuAuthorityInfoReq": {
      "description": "Create or update menu authorization information request params | 创建或更新菜单授权信息参数",
      "type": "object",
      "required": [
        "roleId",
        "menuIds"
      ],
      "properties": {
        "menuIds": {
          "description": "menu ID array | 菜单ID数组",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "MenuIds"
        },
        "roleId": {
          "description": "role ID | 角色ID",
          "type": "integer",
          "format": "uint64",
          "maximum": 1000,
          "x-go-name": "RoleId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuAuthorityInfoResp": {
      "description": "Menu authorization response data | 菜单授权信息数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/MenuAuthorityInfoReq"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuInfo": {
      "description": "The response data of menu information | 菜单信息",
      "type": "object",
      "properties": {
        "component": {
          "description": "Component | 组件地址",
          "type": "string",
          "x-go-name": "Component"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "disabled": {
          "description": "Disabled | 是否启用",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "level": {
          "description": "Level | 菜单层级",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Level"
        },
        "menuType": {
          "description": "MenuType | 菜单类型",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MenuType"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "name": {
          "description": "Menu name | 菜单名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "parentId": {
          "description": "ParentId | 父级菜单ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ParentId"
        },
        "path": {
          "description": "Path | 菜单访问路径",
          "type": "string",
          "x-go-name": "Path"
        },
        "permission": {
          "description": "Permission symbol | 权限标识",
          "type": "string",
          "x-go-name": "Permission"
        },
        "redirect": {
          "description": "Redirect | 跳转地址",
          "type": "string",
          "x-go-name": "Redirect"
        },
        "serviceName": {
          "description": "Service Name | 服务名称",
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "sort": {
          "description": "Sort | 排序",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Sort"
        },
        "trans": {
          "description": "Translated Name | 国际化展示名称",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuInfoResp": {
      "description": "Menu information response | 菜单信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/MenuInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuListInfo": {
      "description": "Menu list data | Menu列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The menu list data | 菜单列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MenuInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuListResp": {
      "description": "The response data of menu list | 菜单列表返回数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/MenuListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuPlainInfo": {
      "description": "Menu information plain | 菜单信息无嵌套",
      "type": "object",
      "properties": {
        "affix": {
          "description": "Affix tab | 是否固定标签",
          "type": "boolean",
          "x-go-name": "Affix"
        },
        "carryParam": {
          "description": "The route carries parameters or not | 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true",
          "type": "boolean",
          "x-go-name": "CarryParam"
        },
        "component": {
          "description": "Component | 组件地址",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "Component"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "disabled": {
          "description": "Disabled | 是否启用",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "dynamicLevel": {
          "description": "The maximum number of pages the router can open | 动态路由可打开Tab页数",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "DynamicLevel"
        },
        "frameSrc": {
          "description": "Iframe path | 内嵌iframe的地址",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "FrameSrc"
        },
        "hideBreadcrumb": {
          "description": "If hide the breadcrumb | 隐藏面包屑",
          "type": "boolean",
          "x-go-name": "HideBreadcrumb"
        },
        "hideChildrenInMenu": {
          "description": "Hide children menu or not | 隐藏所有子菜单",
          "type": "boolean",
          "x-go-name": "HideChildrenInMenu"
        },
        "hideMenu": {
          "description": "Hide menu | 隐藏菜单",
          "type": "boolean",
          "x-go-name": "HideMenu"
        },
        "hideTab": {
          "description": "Hide the tab header | 当前路由不在标签页显示",
          "type": "boolean",
          "x-go-name": "HideTab"
        },
        "icon": {
          "description": "Menu Icon | 菜单图标",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Icon"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "ignoreKeepAlive": {
          "description": "Do not keep alive the tab | 不缓存Tab",
          "type": "boolean",
          "x-go-name": "IgnoreKeepAlive"
        },
        "level": {
          "description": "Level | 菜单层级",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Level"
        },
        "menuType": {
          "description": "MenuType | 菜单类型",
          "type": "integer",
          "format": "uint32",
          "maximum": 10,
          "x-go-name": "MenuType"
        },
        "name": {
          "description": "Menu name | 菜单名称",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Name"
        },
        "params": {
          "description": "The Route Params | 路由参数",
          "type": "string",
          "x-go-name": "Params"
        },
        "parentId": {
          "description": "ParentId | 父级菜单ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ParentId"
        },
        "path": {
          "description": "Path | 菜单访问路径",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Path"
        },
        "permission": {
          "description": "Permission symbol | 权限标识",
          "type": "string",
          "x-go-name": "Permission"
        },
        "realPath": {
          "description": "The real path of the route without dynamic part | 动态路由的实际Path, 即去除路由的动态部分",
          "type": "string",
          "x-go-name": "RealPath"
        },
        "redirect": {
          "description": "Redirect | 跳转地址",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "Redirect"
        },
        "serviceName": {
          "description": "Service Name | 服务名称",
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "sort": {
          "description": "Sort | 排序",
          "type": "integer",
          "format": "uint32",
          "maximum": 10000,
          "x-go-name": "Sort"
        },
        "title": {
          "description": "Menu title show in page | 菜单显示名",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Title"
        },
        "trans": {
          "description": "Translated Name | 国际化展示名称",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuPlainInfoList": {
      "description": "Menu list data | 菜单列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The menu list data | 菜单列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MenuPlainInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuPlainInfoListResp": {
      "description": "Menu list data response | 菜单列表数据返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/MenuPlainInfoList"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "MenuPlainInfoResp": {
      "description": "Menu detail data response | 菜单数据返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/MenuPlainInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "Meta": {
      "description": "The meta data of menu | 菜单的meta数据",
      "type": "object",
      "properties": {
        "affix": {
          "description": "Affix tab | 是否固定标签",
          "type": "boolean",
          "x-go-name": "Affix"
        },
        "carryParam": {
          "description": "The route carries parameters or not | 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true",
          "type": "boolean",
          "x-go-name": "CarryParam"
        },
        "dynamicLevel": {
          "description": "The maximum number of pages the router can open | 动态路由可打开Tab页数",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "DynamicLevel"
        },
        "frameSrc": {
          "description": "Iframe path | 内嵌iframe的地址",
          "type": "string",
          "x-go-name": "FrameSrc"
        },
        "hideBreadcrumb": {
          "description": "If hide the breadcrumb | 隐藏面包屑",
          "type": "boolean",
          "x-go-name": "HideBreadcrumb"
        },
        "hideChildrenInMenu": {
          "description": "Hide children menu or not | 隐藏所有子菜单",
          "type": "boolean",
          "x-go-name": "HideChildrenInMenu"
        },
        "hideMenu": {
          "description": "Hide menu | 隐藏菜单",
          "type": "boolean",
          "x-go-name": "HideMenu"
        },
        "hideTab": {
          "description": "Hide the tab header | 当前路由不在标签页显示",
          "type": "boolean",
          "x-go-name": "HideTab"
        },
        "icon": {
          "description": "Menu Icon | 菜单图标",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Icon"
        },
        "ignoreKeepAlive": {
          "description": "Do not keep alive the tab | 不缓存Tab",
          "type": "boolean",
          "x-go-name": "IgnoreKeepAlive"
        },
        "params": {
          "description": "The Route Params | 路由参数",
          "type": "string",
          "x-go-name": "Params"
        },
        "realPath": {
          "description": "The real path of the route without dynamic part | 动态路由的实际Path, 即去除路由的动态部分",
          "type": "string",
          "x-go-name": "RealPath"
        },
        "title": {
          "description": "Menu title show in page | 菜单显示名",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthAccountInfo": {
      "description": "OAuth Account information | OAuth账户信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "extraData": {
          "description": "Extra data as JSON | 额外数据",
          "type": "string",
          "x-go-name": "ExtraData"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "lastLoginAt": {
          "description": "Last login at | 最后登录时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LastLoginAt"
        },
        "lastLoginIp": {
          "description": "Last login IP | 最后登录IP",
          "type": "string",
          "maxLength": 45,
          "x-go-name": "LastLoginIp"
        },
        "loginCount": {
          "description": "Login count | 登录次数",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LoginCount"
        },
        "providerAvatar": {
          "description": "Provider avatar | 第三方头像",
          "type": "string",
          "maxLength": 500,
          "x-go-name": "ProviderAvatar"
        },
        "providerEmail": {
          "description": "Provider email | 第三方邮箱",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "ProviderEmail"
        },
        "providerId": {
          "description": "Provider ID | 提供商ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ProviderId"
        },
        "providerNickname": {
          "description": "Provider nickname | 第三方昵称",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "ProviderNickname"
        },
        "providerType": {
          "description": "Provider type | 提供商类型",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "ProviderType"
        },
        "providerUserId": {
          "description": "Provider user ID | 第三方用户ID",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "ProviderUserId"
        },
        "providerUsername": {
          "description": "Provider username | 第三方用户名",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "ProviderUsername"
        },
        "tokenExpiresAt": {
          "description": "Token expires at | 令牌过期时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TokenExpiresAt"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        },
        "userId": {
          "description": "User ID | 用户ID",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthAccountInfoResp": {
      "description": "OAuth Account information response | OAuth账户信息响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/OauthAccountInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthAccountListInfo": {
      "description": "OAuth Account list info | OAuth账户列表信息",
      "type": "object",
      "properties": {
        "data": {
          "description": "The OAuth account list data | OAuth账户列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OauthAccountInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthAccountListReq": {
      "description": "OAuth Account list request | OAuth账户列表请求",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "providerId": {
          "description": "Provider ID | 提供商ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ProviderId"
        },
        "providerType": {
          "description": "Provider type | 提供商类型",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "ProviderType"
        },
        "userId": {
          "description": "User ID | 用户ID",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthAccountListResp": {
      "description": "OAuth Account list response | OAuth账户列表响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/OauthAccountListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthCallbackReq": {
      "description": "Enhanced OAuth callback request | 增强的OAuth回调请求",
      "type": "object",
      "required": [
        "state",
        "code"
      ],
      "properties": {
        "clientIp": {
          "description": "Client IP address | 客户端IP地址",
          "type": "string",
          "maxLength": 45,
          "x-go-name": "ClientIp"
        },
        "code": {
          "description": "Authorization code | 授权码",
          "type": "string",
          "x-go-name": "Code"
        },
        "error": {
          "description": "Error code if any | 错误码（如果有）",
          "type": "string",
          "x-go-name": "Error"
        },
        "errorDescription": {
          "description": "Error description | 错误描述",
          "type": "string",
          "x-go-name": "ErrorDescription"
        },
        "state": {
          "description": "State parameter | 状态参数",
          "type": "string",
          "x-go-name": "State"
        },
        "userAgent": {
          "description": "User agent | 用户代理",
          "type": "string",
          "maxLength": 500,
          "x-go-name": "UserAgent"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthLoginReq": {
      "description": "Oauth log in request | Oauth 登录请求",
      "type": "object",
      "required": [
        "state",
        "provider"
      ],
      "properties": {
        "clientIp": {
          "description": "Client IP address | 客户端IP地址",
          "type": "string",
          "maxLength": 45,
          "x-go-name": "ClientIp"
        },
        "provider": {
          "description": "Provider name | 提供商名字",
          "type": "string",
          "maxLength": 40,
          "x-go-name": "Provider",
          "example": "google"
        },
        "scopes": {
          "description": "Additional scopes | 额外权限范围",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Scopes"
        },
        "state": {
          "description": "State code to avoid hack | 状态码，请求前后相同避免安全问题",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "State"
        },
        "userAgent": {
          "description": "User agent | 用户代理",
          "type": "string",
          "maxLength": 500,
          "x-go-name": "UserAgent"
        },
        "userId": {
          "description": "User ID for binding (optional) | 绑定的用户ID（可选）",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderInfo": {
      "description": "The response data of oauth provider information | 第三方信息",
      "type": "object",
      "properties": {
        "authStyle": {
          "description": "The type of auth | 鉴权方式",
          "type": "integer",
          "format": "uint64",
          "maximum": 20,
          "x-go-name": "AuthStyle"
        },
        "authUrl": {
          "description": "Authority URL | 授权地址",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "AuthUrl"
        },
        "cacheTtl": {
          "description": "Cache TTL in seconds | 缓存TTL(秒)",
          "type": "integer",
          "format": "int32",
          "x-go-name": "CacheTtl"
        },
        "clientId": {
          "description": "ClientId | 客户端ID",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "ClientId"
        },
        "clientSecret": {
          "description": "ClientSecret | 客户端密钥",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "ClientSecret"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "displayName": {
          "description": "Enhanced fields from OAuth refactor\nDisplay name | 显示名称",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "DisplayName"
        },
        "enabled": {
          "description": "Whether enabled | 是否启用",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "extraConfig": {
          "description": "Extra configuration as JSON | 额外配置信息",
          "type": "string",
          "x-go-name": "ExtraConfig"
        },
        "failureCount": {
          "description": "Failure count | 失败次数",
          "type": "integer",
          "format": "int32",
          "x-go-name": "FailureCount"
        },
        "iconUrl": {
          "description": "Icon URL | 图标地址",
          "type": "string",
          "maxLength": 500,
          "x-go-name": "IconUrl"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "infoUrl": {
          "description": "The URL to get user information | 获取信息地址",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "InfoUrl"
        },
        "lastUsedAt": {
          "description": "Last used at | 最后使用时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LastUsedAt"
        },
        "name": {
          "description": "Provider name | 第三方提供商名称",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "Name"
        },
        "providerType": {
          "description": "Provider specific type | 提供商具体类型",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "ProviderType"
        },
        "redirectUrl": {
          "description": "Redirect URL| 跳转地址",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "RedirectUrl"
        },
        "remark": {
          "description": "Remark | 备注",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "Remark"
        },
        "scopes": {
          "description": "Scopes | 授权范围",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Scopes"
        },
        "sort": {
          "description": "Sort order | 排序",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Sort"
        },
        "successCount": {
          "description": "Success count | 成功次数",
          "type": "integer",
          "format": "int32",
          "x-go-name": "SuccessCount"
        },
        "supportPkce": {
          "description": "Support PKCE | 是否支持PKCE",
          "type": "boolean",
          "x-go-name": "SupportPkce"
        },
        "tokenUrl": {
          "description": "The URL to get token | 获取Token的地址",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "TokenUrl"
        },
        "type": {
          "description": "Provider type | 提供商类型",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Type"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        },
        "webhookUrl": {
          "description": "Webhook URL | 回调URL",
          "type": "string",
          "maxLength": 500,
          "x-go-name": "WebhookUrl"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderInfoResp": {
      "description": "Oauth provider information response | 第三方信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/OauthProviderInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderListInfo": {
      "description": "OauthProvider list data | 第三方列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 第三方列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OauthProviderInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderListReq": {
      "description": "Get oauth provider list request params | 第三方列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "name": {
          "description": "Name | 第三方提供商名称",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderListResp": {
      "description": "The response data of oauth provider list | 第三方列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/OauthProviderListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderTestReq": {
      "description": "OAuth provider test request | OAuth提供商测试请求",
      "type": "object",
      "required": [
        "providerId"
      ],
      "properties": {
        "providerId": {
          "description": "Provider ID | 提供商ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ProviderId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderTestResp": {
      "description": "OAuth provider test response | OAuth提供商测试响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/OauthProviderTestResult"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthProviderTestResult": {
      "description": "OAuth provider test result | OAuth提供商测试结果",
      "type": "object",
      "properties": {
        "connected": {
          "description": "Is connection successful | 连接是否成功",
          "type": "boolean",
          "x-go-name": "Connected"
        },
        "errorMessage": {
          "description": "Error message if any | 错误信息",
          "type": "string",
          "x-go-name": "ErrorMessage"
        },
        "responseTime": {
          "description": "Response time in milliseconds | 响应时间(毫秒)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ResponseTime"
        },
        "testUrl": {
          "description": "Test URL | 测试URL",
          "type": "string",
          "x-go-name": "TestUrl"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthStatisticsData": {
      "description": "OAuth statistics data | OAuth统计数据",
      "type": "object",
      "properties": {
        "avgResponseTime": {
          "description": "Average response time | 平均响应时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AvgResponseTime"
        },
        "loginTrend": {
          "description": "Login trend data | 登录趋势数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoginTrendData"
          },
          "x-go-name": "LoginTrend"
        },
        "monthlyGrowth": {
          "description": "Monthly growth | 月增长率",
          "type": "number",
          "format": "double",
          "x-go-name": "MonthlyGrowth"
        },
        "providerStats": {
          "description": "Provider statistics | 提供商统计",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProviderStatData"
          },
          "x-go-name": "ProviderStats"
        },
        "successRate": {
          "description": "Success rate | 成功率",
          "type": "number",
          "format": "double",
          "x-go-name": "SuccessRate"
        },
        "todayLogins": {
          "description": "Today logins | 今日登录次数",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TodayLogins"
        },
        "totalLogins": {
          "description": "Total logins | 总登录次数",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalLogins"
        },
        "totalProviders": {
          "description": "Total providers | 总提供商数",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalProviders"
        },
        "totalUsers": {
          "description": "Total users | 总用户数",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalUsers"
        },
        "weeklyGrowth": {
          "description": "Weekly growth | 周增长率",
          "type": "number",
          "format": "double",
          "x-go-name": "WeeklyGrowth"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthStatisticsReq": {
      "description": "OAuth statistics request | OAuth统计请求",
      "type": "object",
      "properties": {
        "providerId": {
          "description": "Provider ID filter | 提供商ID筛选",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ProviderId"
        },
        "timeRange": {
          "description": "Time range | 时间范围",
          "type": "string",
          "x-go-name": "TimeRange"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "OauthStatisticsResp": {
      "description": "OAuth statistics response | OAuth统计响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/OauthStatisticsData"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PageInfo": {
      "description": "The page request parameters | 列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PermCodeResp": {
      "description": "The permission code for front end permission control | 权限码： 用于前端权限控制",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Permission code data | 权限码数据",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Data"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PositionInfo": {
      "description": "The response data of position information | 职位信息",
      "type": "object",
      "properties": {
        "code": {
          "description": "Code | 职位代码",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Code"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "deptId": {
          "description": "DeptId | 部门ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DeptId"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "name": {
          "description": "Name | 职位名称",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Name"
        },
        "remark": {
          "description": "Remark | 备注",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Remark"
        },
        "sort": {
          "description": "Sort | 排序",
          "type": "integer",
          "format": "uint32",
          "maximum": 10000,
          "x-go-name": "Sort"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "trans": {
          "description": "Translated Name | 展示名称",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PositionInfoResp": {
      "description": "Position information response | 职位信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/PositionInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PositionListInfo": {
      "description": "Position list data | 职位列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 职位列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PositionListReq": {
      "description": "Get position list request params | 职位列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "belongDeptId": {
          "description": "BelongDeptId | 所属部门ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "BelongDeptId"
        },
        "code": {
          "description": "Code | 职位代码",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Code"
        },
        "name": {
          "description": "Name | 职位名称",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "remark": {
          "description": "Remark | 备注",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Remark"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PositionListResp": {
      "description": "The response data of position list | 职位列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/PositionListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ProfileInfo": {
      "description": "The profile information | 个人信息",
      "type": "object",
      "properties": {
        "avatar": {
          "description": "The user's avatar path | 用户的头像路径",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "Avatar"
        },
        "email": {
          "description": "The user's email address | 用户的邮箱",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Email"
        },
        "mobile": {
          "description": "User's mobile phone number | 用户的手机号码",
          "type": "string",
          "maxLength": 18,
          "x-go-name": "Mobile"
        },
        "nickname": {
          "description": "user's nickname | 用户的昵称",
          "type": "string",
          "maxLength": 10,
          "x-go-name": "Nickname"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ProfileResp": {
      "description": "The profile response data | 个人信息返回数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/ProfileUserInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ProfileUserInfo": {
      "type": "object",
      "properties": {
        "postGroup": {
          "description": "User's Post | 用户岗位",
          "type": "string",
          "x-go-name": "PostGroup"
        },
        "roleGroup": {
          "description": "User's Role | 用户角色",
          "type": "string",
          "x-go-name": "RoleGroup"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ProviderStatData": {
      "description": "Provider stat data | 提供商统计数据",
      "type": "object",
      "properties": {
        "avgResponseTime": {
          "description": "Average response time | 平均响应时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AvgResponseTime"
        },
        "displayName": {
          "description": "Display name | 显示名称",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "failureCount": {
          "description": "Failure count | 失败次数",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailureCount"
        },
        "iconUrl": {
          "description": "Icon URL | 图标地址",
          "type": "string",
          "x-go-name": "IconUrl"
        },
        "lastUsed": {
          "description": "Last used time | 最后使用时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LastUsed"
        },
        "providerId": {
          "description": "Provider ID | 提供商ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ProviderId"
        },
        "providerName": {
          "description": "Provider name | 提供商名称",
          "type": "string",
          "x-go-name": "ProviderName"
        },
        "successCount": {
          "description": "Success count | 成功次数",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SuccessCount"
        },
        "successRate": {
          "description": "Success rate | 成功率",
          "type": "number",
          "format": "double",
          "x-go-name": "SuccessRate"
        },
        "totalUsage": {
          "description": "Total usage | 总使用次数",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalUsage"
        },
        "type": {
          "description": "Provider type | 提供商类型",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PublicTenantInfo": {
      "description": "Public tenant information | 公开租户信息",
      "type": "object",
      "properties": {
        "companyName": {
          "description": "Company Name | 公司名称/租户名称",
          "type": "string",
          "x-go-name": "CompanyName"
        },
        "domain": {
          "description": "Domain | 绑定域名(可选)",
          "type": "string",
          "x-go-name": "Domain"
        },
        "tenantId": {
          "description": "Tenant ID | 租户ID",
          "type": "string",
          "x-go-name": "TenantId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "PublicTenantListResp": {
      "description": "Public tenant list response | 公开租户列表响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        },
        "tenantEnabled": {
          "description": "Tenant enabled | 是否启用租户",
          "type": "boolean",
          "x-go-name": "TenantEnabled"
        },
        "voList": {
          "description": "Tenant list data | 租户列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicTenantInfo"
          },
          "x-go-name": "VoList"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RedirectInfo": {
      "description": "Redirect information | 跳转网址",
      "type": "object",
      "properties": {
        "URL": {
          "description": "Redirect URL | 跳转网址",
          "type": "string"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RedirectResp": {
      "description": "Redirect response | 跳转网址返回信息",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/RedirectInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RefreshTokenInfo": {
      "description": "Refresh token information | 刷新令牌信息",
      "type": "object",
      "properties": {
        "expiredAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiredAt"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RefreshTokenResp": {
      "description": "Refresh token response data | 刷新令牌响应数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/RefreshTokenInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RegisterByEmailReq": {
      "description": "Register by email request | 邮箱注册参数",
      "type": "object",
      "required": [
        "username",
        "password",
        "captcha",
        "email"
      ],
      "properties": {
        "captcha": {
          "description": "The Captcha which users input | 用户输入的验证码",
          "type": "string",
          "maxLength": 5,
          "minLength": 5,
          "x-go-name": "Captcha"
        },
        "email": {
          "description": "The user's email address | 用户的邮箱",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Email"
        },
        "password": {
          "description": "Password | 密码",
          "type": "string",
          "maxLength": 30,
          "minLength": 6,
          "x-go-name": "Password"
        },
        "username": {
          "description": "User Name | 用户名",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RegisterBySmsReq": {
      "description": "Register by SMS request | 短信注册参数",
      "type": "object",
      "required": [
        "username",
        "password",
        "captcha",
        "phoneNumber"
      ],
      "properties": {
        "captcha": {
          "description": "The Captcha which users input | 用户输入的验证码",
          "type": "string",
          "maxLength": 5,
          "minLength": 5,
          "x-go-name": "Captcha"
        },
        "password": {
          "description": "Password | 密码",
          "type": "string",
          "maxLength": 30,
          "minLength": 6,
          "x-go-name": "Password"
        },
        "phoneNumber": {
          "description": "The user's mobile phone number | 用户的手机号码",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "PhoneNumber"
        },
        "username": {
          "description": "User Name | 用户名",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RegisterReq": {
      "description": "register request | 注册参数",
      "type": "object",
      "required": [
        "username",
        "password",
        "captchaId",
        "captcha",
        "email"
      ],
      "properties": {
        "captcha": {
          "description": "The Captcha which users input | 用户输入的验证码",
          "type": "string",
          "maxLength": 5,
          "minLength": 5,
          "x-go-name": "Captcha"
        },
        "captchaId": {
          "description": "Captcha ID which store in redis | 验证码编号, 存在redis中",
          "type": "string",
          "maxLength": 20,
          "minLength": 20,
          "x-go-name": "CaptchaId"
        },
        "email": {
          "description": "The user's email address | 用户的邮箱",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Email"
        },
        "password": {
          "description": "Password | 密码",
          "type": "string",
          "maxLength": 30,
          "minLength": 6,
          "x-go-name": "Password"
        },
        "username": {
          "description": "User Name | 用户名",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ResetPasswordByEmailReq": {
      "description": "Reset password by email request | 通过邮箱重置密码请求",
      "type": "object",
      "properties": {
        "captcha": {
          "type": "string",
          "x-go-name": "Captcha"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ResetPasswordBySmsReq": {
      "description": "Reset password by SMS request | 通过短信重置密码请求",
      "type": "object",
      "properties": {
        "captcha": {
          "type": "string",
          "x-go-name": "Captcha"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "phoneNumber": {
          "type": "string",
          "x-go-name": "PhoneNumber"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "ResetPasswordReq": {
      "description": "Reset password | 管理员后台重置密码",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleAuthReq": {
      "type": "object",
      "properties": {
        "roleId": {
          "description": "role id | 角色Id",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RoleId"
        },
        "userIds": {
          "description": "userIds | 用户IDS",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "UserIds"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleChangeStatusReq": {
      "description": "Change Role Status | 修改角色状态",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleDataScopeReq": {
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "customDeptIds": {
          "description": "Custom department setting for data permission | 自定义部门数据权限",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "CustomDeptIds"
        },
        "dataScope": {
          "description": "Data scope 1 - all data 2 - custom dept data 3 - own dept and sub dept data 4 - own dept data  5 - your own data | 数据权限范围 1 - 所有数据 2 - 自定义部门数据 3 - 您所在部门及下属部门数据 4 - 您所在部门数据 5 - 本人数据",
          "type": "integer",
          "format": "uint32",
          "maxLength": 5,
          "minLength": 1,
          "x-go-name": "DataScope"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleInfo": {
      "description": "The response data of role information | 角色信息",
      "type": "object",
      "properties": {
        "code": {
          "description": "Role code | 角色码",
          "type": "string",
          "maxLength": 15,
          "x-go-name": "Code"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "customDeptIds": {
          "description": "Custom department setting for data permission | 自定义部门数据权限",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "CustomDeptIds"
        },
        "dataScope": {
          "description": "Data scope 1 - all data 2 - custom dept data 3 - own dept and sub dept data 4 - own dept data  5 - your own data | 数据权限范围 1 - 所有数据 2 - 自定义部门数据 3 - 您所在部门及下属部门数据 4 - 您所在部门数据 5 - 本人数据",
          "type": "integer",
          "format": "uint32",
          "maxLength": 5,
          "minLength": 1,
          "x-go-name": "DataScope"
        },
        "defaultRouter": {
          "description": "DefaultRouter | 默认首页",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "DefaultRouter"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "menuIds": {
          "description": "Role MenuIds | 角色菜单ID",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "MenuIds"
        },
        "name": {
          "description": "Name | 角色名称",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "Name"
        },
        "remark": {
          "description": "Remark | 备注",
          "type": "string",
          "maxLength": 200,
          "x-go-name": "Remark"
        },
        "sort": {
          "description": "Sort | 排序",
          "type": "integer",
          "format": "uint32",
          "maximum": 10000,
          "x-go-name": "Sort"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "trans": {
          "description": "Translated Name | 展示名称",
          "type": "string",
          "x-go-name": "Trans"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleInfoResp": {
      "description": "Role information response | 角色信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/RoleInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleInfoSimple": {
      "description": "The simple role data | 简单的角色数据",
      "type": "object",
      "properties": {
        "roleName": {
          "description": "Role name | 角色名",
          "type": "string",
          "x-go-name": "RoleName"
        },
        "value": {
          "description": "Role value | 角色值",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleListInfo": {
      "description": "Role list data | 角色列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 角色列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleListReq": {
      "description": "Get role list request params | 角色列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "code": {
          "description": "Code | 角色编码",
          "type": "string",
          "x-go-name": "Code"
        },
        "name": {
          "description": "Name | 角色名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleListResp": {
      "description": "The response data of role list | 角色列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/RoleListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "RoleUnallocatedUserListReq": {
      "description": "Role Unallocated UserList | 当前角色未授权用户列表",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "mobile": {
          "description": "mobile | 手机号",
          "type": "string",
          "maxLength": 16,
          "x-go-name": "Mobile"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "roleId": {
          "description": "role id | 角色Id",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RoleId"
        },
        "username": {
          "description": "userName | 用户名",
          "type": "string",
          "maxLength": 30,
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SendEmailReq": {
      "type": "object",
      "properties": {
        "content": {
          "description": "The email content | 邮件内容",
          "type": "string",
          "x-go-name": "Content"
        },
        "provider": {
          "description": "The email provider | 邮件服务提供商",
          "type": "string",
          "x-go-name": "Provider"
        },
        "subject": {
          "description": "The email subject | 邮件标题",
          "type": "string",
          "x-go-name": "Subject"
        },
        "target": {
          "description": "Target email address | 目标邮箱地址",
          "type": "string",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SendSmsReq": {
      "type": "object",
      "properties": {
        "appId": {
          "description": "The app ID | App ID",
          "type": "string",
          "x-go-name": "AppId"
        },
        "params": {
          "description": "The parameters | 参数",
          "type": "string",
          "x-go-name": "Params"
        },
        "phoneNumber": {
          "description": "Phone number | 电话号码",
          "type": "string",
          "x-go-name": "PhoneNumber"
        },
        "provider": {
          "description": "The email provider | 邮件服务提供商",
          "type": "string",
          "x-go-name": "Provider"
        },
        "signName": {
          "description": "The signuture name | 签名名称",
          "type": "string",
          "x-go-name": "SignName"
        },
        "templateId": {
          "description": "The template ID  | 模板 ID",
          "type": "string",
          "x-go-name": "TemplateId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsCaptchaReq": {
      "description": "The sms captcha request | 短信验证码请求参数",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "description": "The phone number | 电话号码",
          "type": "string",
          "x-go-name": "PhoneNumber"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsLogInfo": {
      "description": "The response data of sms log information | 短信日志信息",
      "type": "object",
      "properties": {
        "content": {
          "description": "Content | 短信内容",
          "type": "string",
          "x-go-name": "Content"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID",
          "type": "string",
          "x-go-name": "Id"
        },
        "phoneNumber": {
          "description": "Phone number | 手机号码",
          "type": "string",
          "x-go-name": "PhoneNumber"
        },
        "provider": {
          "description": "Provider | 服务商",
          "type": "string",
          "x-go-name": "Provider"
        },
        "sendStatus": {
          "description": "Send status | 发送状态",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "SendStatus"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsLogInfoResp": {
      "description": "SmsLog information response | 短信日志信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/SmsLogInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsLogListInfo": {
      "description": "SmsLog list data | 短信日志列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 短信日志列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SmsLogInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsLogListReq": {
      "description": "Get sms log list request params | 短信日志列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "content": {
          "description": "Content | 短信内容",
          "type": "string",
          "x-go-name": "Content"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "phoneNumber": {
          "description": "Phone number | 手机号码",
          "type": "string",
          "x-go-name": "PhoneNumber"
        },
        "provider": {
          "description": "Provider | 服务商",
          "type": "string",
          "x-go-name": "Provider"
        },
        "sendStatus": {
          "description": "Send Status | 发送状态",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "SendStatus"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsLogListResp": {
      "description": "The response data of sms log list | 短信日志列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/SmsLogListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsProviderInfo": {
      "description": "The response data of sms provider information | 短信配置信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "isDefault": {
          "description": "Is default provider | 是否默认服务商",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "description": "Name | 名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "region": {
          "description": "Region | 区域",
          "type": "string",
          "x-go-name": "Region"
        },
        "secretId": {
          "description": "Secret id | 秘钥 ID",
          "type": "string",
          "x-go-name": "SecretId"
        },
        "secretKey": {
          "description": "Secret key | 秘钥 Key",
          "type": "string",
          "x-go-name": "SecretKey"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsProviderInfoResp": {
      "description": "SmsProvider information response | 短信配置信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/SmsProviderInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsProviderListInfo": {
      "description": "SmsProvider list data | 短信配置列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 短信配置列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SmsProviderInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsProviderListReq": {
      "description": "Get sms provider list request params | 短信配置列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "name": {
          "description": "Name | 名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "SmsProviderListResp": {
      "description": "The response data of sms provider list | 短信配置列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/SmsProviderListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskInfo": {
      "description": "The response data of task information | 定时任务信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "cronExpression": {
          "description": "CronExpression | 定时任务 Cron 表达式",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "CronExpression"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "name": {
          "description": "Name | 任务名称",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Name"
        },
        "pattern": {
          "description": "Pattern | 任务的标识 (用于区分和确定要执行的任务)",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Pattern"
        },
        "payload": {
          "description": "Payload | 任务需要数据(JSON 字符串)",
          "type": "string",
          "x-go-name": "Payload"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "taskGroup": {
          "description": "TaskGroup | 任务分组",
          "type": "string",
          "maxLength": 40,
          "x-go-name": "TaskGroup"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskInfoResp": {
      "description": "Task information response | 定时任务信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TaskInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskListInfo": {
      "description": "Task list data | 定时任务列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 定时任务列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskListReq": {
      "description": "Get task list request params | 定时任务列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "name": {
          "description": "Name | 任务名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "taskGroup": {
          "description": "TaskGroup | 任务分组",
          "type": "string",
          "x-go-name": "TaskGroup"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskListResp": {
      "description": "The response data of task list | 定时任务列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TaskListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskLogInfo": {
      "description": "The response data of task log information | 任务日志信息",
      "type": "object",
      "properties": {
        "finishedAt": {
          "description": "FinishedAt | 任务完成时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "FinishedAt"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "result": {
          "description": "Result | 任务结果",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Result"
        },
        "startedAt": {
          "description": "StartedAt | 任务开始时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StartedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskLogInfoResp": {
      "description": "TaskLog information response | 任务日志信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TaskLogInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskLogListInfo": {
      "description": "TaskLog list data | 任务日志列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 任务日志列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskLogInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskLogListReq": {
      "description": "Get task log list request params | 任务日志列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "result": {
          "description": "Result | 任务结果",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Result"
        },
        "taskId": {
          "description": "TaskId | 任务ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TaskId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TaskLogListResp": {
      "description": "The response data of task log list | 任务日志列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TaskLogListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantCodeReq": {
      "description": "Get tenant by code request | 根据租户码获取租户请求",
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "description": "Tenant Code | 租户标识码",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Code"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantInfo": {
      "description": "The response data of tenant information | 租户信息",
      "type": "object",
      "properties": {
        "code": {
          "description": "Tenant Code | 租户标识码",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Code"
        },
        "config": {
          "description": "Configuration | 配置信息 (JSON格式)",
          "type": "string",
          "x-go-name": "Config"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "createdBy": {
          "description": "Created By | 创建者ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CreatedBy"
        },
        "description": {
          "description": "Description | 描述",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "Description"
        },
        "expiredAt": {
          "description": "Expired Time | 过期时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiredAt"
        },
        "id": {
          "description": "ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "name": {
          "description": "Tenant Name | 租户名称",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Name"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantInfoResp": {
      "description": "Tenant information response | 租户信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TenantInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantInitReq": {
      "description": "Initialize tenant request | 初始化租户请求",
      "type": "object",
      "required": [
        "tenantId"
      ],
      "properties": {
        "adminEmail": {
          "description": "Admin Email | 管理员邮箱",
          "type": "string",
          "x-go-name": "AdminEmail"
        },
        "adminPassword": {
          "description": "Admin Password | 管理员密码",
          "type": "string",
          "x-go-name": "AdminPassword"
        },
        "adminUsername": {
          "description": "Admin Username | 管理员用户名",
          "type": "string",
          "x-go-name": "AdminUsername"
        },
        "tenantId": {
          "description": "Tenant ID | 租户ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TenantId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantListInfo": {
      "description": "Tenant list data | 租户列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The tenant list data | 租户列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TenantInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantListReq": {
      "description": "Get tenant list request params | 租户列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "code": {
          "description": "Tenant Code | 租户标识码",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Code"
        },
        "createdBy": {
          "description": "Created By | 创建者ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CreatedBy"
        },
        "name": {
          "description": "Tenant Name | 租户名称",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Name"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantListResp": {
      "description": "The response data of tenant list | 租户列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TenantListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantStatusReq": {
      "description": "Update tenant status request | 更新租户状态请求",
      "type": "object",
      "required": [
        "id",
        "status"
      ],
      "properties": {
        "id": {
          "description": "Tenant ID | 租户ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TenantSwitchReq": {
      "description": "Dynamic tenant switch request | 动态租户切换请求",
      "type": "object",
      "required": [
        "tenantId"
      ],
      "properties": {
        "tenantId": {
          "description": "Target Tenant ID | 目标租户ID",
          "type": "string",
          "x-go-name": "TenantId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TokenInfo": {
      "description": "The response data of token information | 令牌信息",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "expiredAt": {
          "description": "ExpiredAt | 过期时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiredAt"
        },
        "id": {
          "description": "ID",
          "type": "string",
          "x-go-name": "Id"
        },
        "source": {
          "description": "Source | Token 来源",
          "type": "string",
          "x-go-name": "Source"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Status"
        },
        "token": {
          "description": "Token | 用户的Token",
          "type": "string",
          "x-go-name": "Token"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "description": "Username | 用户名",
          "type": "string",
          "x-go-name": "Username"
        },
        "uuid": {
          "description": "User's UUID | 用户的UUID",
          "type": "string",
          "x-go-name": "Uuid"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TokenInfoResp": {
      "description": "Token information response | Token信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TokenInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TokenListInfo": {
      "description": "Token list data | Token列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | 令牌列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TokenListReq": {
      "description": "Get token list request params | 令牌列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "email": {
          "description": "Email | 邮箱",
          "type": "string",
          "x-go-name": "Email"
        },
        "nickname": {
          "description": "Nickname | 昵称",
          "type": "string",
          "x-go-name": "Nickname"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "username": {
          "description": "Username | 用户名",
          "type": "string",
          "x-go-name": "Username"
        },
        "uuid": {
          "description": "UUID",
          "type": "string",
          "x-go-name": "Uuid"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "TokenListResp": {
      "description": "The response data of token list | 令牌列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/TokenListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UUIDReq": {
      "description": "Basic UUID request | 基础UUID参数请求",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID",
          "type": "string",
          "maxLength": 36,
          "x-go-name": "Id"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UUIDsReq": {
      "description": "Basic UUID array request | 基础UUID数组参数请求",
      "type": "object",
      "required": [
        "ids"
      ],
      "properties": {
        "ids": {
          "description": "Ids",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Ids"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UnbindOauthAccountReq": {
      "description": "Unbind OAuth account request | 解绑OAuth账户请求",
      "type": "object",
      "required": [
        "userId",
        "providerId"
      ],
      "properties": {
        "providerId": {
          "description": "Provider ID | 提供商ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ProviderId"
        },
        "userId": {
          "description": "User ID | 用户ID",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserBaseIDInfo": {
      "description": "The  data of user's basic information | 用户基本信息",
      "type": "object",
      "properties": {
        "avatar": {
          "description": "The user's avatar path | 用户的头像路径",
          "type": "string",
          "x-go-name": "Avatar"
        },
        "departmentName": {
          "description": "Department Name | 部门名称",
          "type": "string",
          "x-go-name": "DepartmentName"
        },
        "desc": {
          "description": "The description of user | 用户的描述信息",
          "type": "string",
          "x-go-name": "Description"
        },
        "homePath": {
          "description": "The home page that the user enters after logging in | 用户登陆后进入的首页",
          "type": "string",
          "x-go-name": "HomePath"
        },
        "nickname": {
          "description": "User's nickname | 用户的昵称",
          "type": "string",
          "x-go-name": "Nickname"
        },
        "roleCodes": {
          "description": "User's Role Name | 用户的角色名称",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleCodes"
        },
        "roleNames": {
          "description": "User's Role Name | 用户的角色名称",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleNames"
        },
        "userId": {
          "description": "User's UUID | 用户的UUID",
          "type": "string",
          "x-go-name": "UUID"
        },
        "username": {
          "description": "User's name | 用户名",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserBaseIDInfoResp": {
      "description": "The response data of user's basic information | 用户基本信息返回数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/UserBaseIDInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserBoundAccountInfo": {
      "description": "User bound account info | 用户绑定账户信息",
      "type": "object",
      "properties": {
        "lastLoginAt": {
          "description": "Last login at | 最后登录时间",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LastLoginAt"
        },
        "loginCount": {
          "description": "Login count | 登录次数",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LoginCount"
        },
        "providerAvatar": {
          "description": "Provider avatar | 第三方头像",
          "type": "string",
          "x-go-name": "ProviderAvatar"
        },
        "providerEmail": {
          "description": "Provider email | 第三方邮箱",
          "type": "string",
          "x-go-name": "ProviderEmail"
        },
        "providerNickname": {
          "description": "Provider nickname | 第三方昵称",
          "type": "string",
          "x-go-name": "ProviderNickname"
        },
        "providerUsername": {
          "description": "Provider username | 第三方用户名",
          "type": "string",
          "x-go-name": "ProviderUsername"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserInfo": {
      "description": "The response data of user information | 用户信息",
      "type": "object",
      "properties": {
        "avatar": {
          "description": "Avatar | 头像地址",
          "type": "string",
          "maxLength": 300,
          "x-go-name": "Avatar"
        },
        "createdAt": {
          "description": "Create date | 创建日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "departmentId": {
          "description": "Department ID | 部门ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DepartmentId"
        },
        "departmentName": {
          "description": "Department Name | 部门名称",
          "type": "string",
          "x-go-name": "DepartmentName"
        },
        "description": {
          "description": "Description | 描述",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Description"
        },
        "email": {
          "description": "Email | 邮箱",
          "type": "string",
          "maxLength": 80,
          "x-go-name": "Email"
        },
        "homePath": {
          "description": "HomePath | 首页",
          "type": "string",
          "maxLength": 70,
          "x-go-name": "HomePath"
        },
        "id": {
          "description": "ID",
          "type": "string",
          "x-go-name": "Id"
        },
        "mobile": {
          "description": "Mobile | 手机号",
          "type": "string",
          "maxLength": 18,
          "x-go-name": "Mobile"
        },
        "nickname": {
          "description": "Nickname | 昵称",
          "type": "string",
          "maxLength": 40,
          "x-go-name": "Nickname"
        },
        "password": {
          "description": "Password | 密码",
          "type": "string",
          "minLength": 6,
          "x-go-name": "Password"
        },
        "postIds": {
          "description": "Position ID | 职位ID",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "PositionIds"
        },
        "roleIds": {
          "description": "RoleId | 角色ID",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "RoleIds"
        },
        "status": {
          "description": "Status | 状态",
          "type": "integer",
          "format": "uint32",
          "maximum": 20,
          "x-go-name": "Status"
        },
        "updatedAt": {
          "description": "Update date | 更新日期",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "description": "Username | 用户名",
          "type": "string",
          "maxLength": 50,
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserInfoResp": {
      "description": "User information response | 用户信息返回体",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/UserInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserListInfo": {
      "description": "User list data | 用户列表数据",
      "type": "object",
      "properties": {
        "data": {
          "description": "The API list data | User列表数据",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInfo"
          },
          "x-go-name": "Data"
        },
        "total": {
          "description": "The total number of data | 数据总数",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserListReq": {
      "description": "Get user list request params | 用户列表请求参数",
      "type": "object",
      "required": [
        "page",
        "pageSize"
      ],
      "properties": {
        "departmentId": {
          "description": "The user's department ID | 用户所属部门ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DepartmentId"
        },
        "description": {
          "description": "Description | 描述",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Description"
        },
        "email": {
          "description": "The user's email address | 用户的邮箱",
          "type": "string",
          "maxLength": 100,
          "x-go-name": "Email"
        },
        "mobile": {
          "description": "User's mobile phone number | 用户的手机号码",
          "type": "string",
          "maxLength": 18,
          "x-go-name": "Mobile"
        },
        "nickname": {
          "description": "User's nickname | 用户的昵称",
          "type": "string",
          "maxLength": 10,
          "x-go-name": "Nickname"
        },
        "page": {
          "description": "Page number | 第几页",
          "type": "integer",
          "format": "uint64",
          "minimum": 0,
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Page size | 单页数据行数",
          "type": "integer",
          "format": "uint64",
          "maximum": 100000,
          "x-go-name": "PageSize"
        },
        "positionId": {
          "description": "User's position id | 用户的职位ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PositionId"
        },
        "roleIds": {
          "description": "User's role ID | 用户的角色ID",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64"
          },
          "x-go-name": "RoleIds"
        },
        "username": {
          "description": "User Name | 用户名",
          "type": "string",
          "maxLength": 20,
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserListResp": {
      "description": "The response data of user list | 用户列表数据",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "Data | 数据",
          "type": "string",
          "x-go-name": "Data",
          "$ref": "#/definitions/UserListInfo"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserOauthProviderInfo": {
      "description": "User OAuth provider info | 用户OAuth提供商信息",
      "type": "object",
      "properties": {
        "boundAccount": {
          "$ref": "#/definitions/UserBoundAccountInfo"
        },
        "displayName": {
          "description": "Display name | 显示名称",
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "iconUrl": {
          "description": "Icon URL | 图标地址",
          "type": "string",
          "x-go-name": "IconUrl"
        },
        "id": {
          "description": "Provider ID | 提供商ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Id"
        },
        "isBound": {
          "description": "Whether user has bound this provider | 用户是否已绑定此提供商",
          "type": "boolean",
          "x-go-name": "IsBound"
        },
        "name": {
          "description": "Provider name | 提供商名称",
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "description": "Provider type | 提供商类型",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserOauthProviderListReq": {
      "description": "OAuth provider list for user | 用户可用的OAuth提供商列表",
      "type": "object",
      "properties": {
        "enabledOnly": {
          "description": "Whether only enabled providers | 是否只获取启用的提供商",
          "type": "boolean",
          "x-go-name": "EnabledOnly"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    },
    "UserOauthProviderListResp": {
      "description": "OAuth provider list for user response | 用户OAuth提供商列表响应",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code | 错误代码",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "data": {
          "description": "OAuth provider list | OAuth提供商列表",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserOauthProviderInfo"
          },
          "x-go-name": "Data"
        },
        "msg": {
          "description": "Message | 提示信息",
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/coder-lulu/newbee-core/api/internal/types"
    }
  },
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Token": []
    }
  ]
}