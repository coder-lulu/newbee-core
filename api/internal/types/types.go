// Code generated by goctl. DO NOT EDIT.
package types

// The basic response with data | 基础带数据信息
// swagger:model BaseDataInfo
type BaseDataInfo struct {
	// Error code | 错误代码
	Code int `json:"code"`
	// Message | 提示信息
	Msg string `json:"msg"`
	// Data | 数据
	Data string `json:"data,omitempty"`
}

// The basic response with data | 基础带数据信息
// swagger:model BaseListInfo
type BaseListInfo struct {
	// The total number of data | 数据总数
	Total uint64 `json:"total"`
	// Data | 数据
	Data string `json:"data,omitempty"`
}

// The basic response without data | 基础不带数据信息
// swagger:model BaseMsgResp
type BaseMsgResp struct {
	// Error code | 错误代码
	Code int `json:"code"`
	// Message | 提示信息
	Msg string `json:"msg"`
}

// The page request parameters | 列表请求参数
// swagger:model PageInfo
type PageInfo struct {
	// Page number | 第几页
	// required : true
	// min : 0
	Page uint64 `json:"page" validate:"required,number,gt=0"`
	// Page size | 单页数据行数
	// required : true
	// max : 100000
	PageSize uint64 `json:"pageSize" validate:"required,number,lt=100000"`
}

// Basic ID request | 基础ID参数请求
// swagger:model IDReq
type IDReq struct {
	// ID
	// Required: true
	Id uint64 `json:"id" validate:"number"`
}

// Basic IDs request | 基础ID数组参数请求
// swagger:model IDsReq
type IDsReq struct {
	// IDs
	// Required: true
	Ids []uint64 `json:"ids"`
}

// Basic ID request | 基础ID地址参数请求
// swagger:model IDPathReq
type IDPathReq struct {
	// ID
	// Required: true
	Id uint64 `path:"id"`
}

// Basic UUID request | 基础UUID参数请求
// swagger:model UUIDReq
type UUIDReq struct {
	// ID
	// Required: true
	// Max length: 36
	Id string `json:"id" validate:"len=36"`
}

// Basic UUID array request | 基础UUID数组参数请求
// swagger:model UUIDsReq
type UUIDsReq struct {
	// Ids
	// Required: true
	Ids []string `json:"ids"`
}

// The base ID response data | 基础ID信息
// swagger:model BaseIDInfo
type BaseIDInfo struct {
	// ID
	Id *uint64 `json:"id,optional"`
	// Create date | 创建日期
	CreatedAt *int64 `json:"createdAt,optional"`
	// Update date | 更新日期
	UpdatedAt *int64 `json:"updatedAt,optional"`
}

// The base UUID response data | 基础UUID信息
// swagger:model BaseUUIDInfo
type BaseUUIDInfo struct {
	// ID
	Id *string `json:"id,optional"`
	// Create date | 创建日期
	CreatedAt *int64 `json:"createdAt,optional"`
	// Update date | 更新日期
	UpdatedAt *int64 `json:"updatedAt,optional"`
}

// The response data of role information | 角色信息
// swagger:model RoleInfo
type RoleInfo struct {
	BaseIDInfo
	// Translated Name | 展示名称
	Trans string `json:"trans,optional"`
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Name | 角色名称
	// max length : 30
	Name *string `json:"name,optional" validate:"omitempty,max=30"`
	// Role code | 角色码
	// max length : 15
	Code *string `json:"code,optional" validate:"omitempty,max=15,alphanum"`
	// DefaultRouter | 默认首页
	// max length : 80
	DefaultRouter *string `json:"defaultRouter,optional" validate:"omitempty,max=80"`
	// Remark | 备注
	// max length : 200
	Remark *string `json:"remark,optional" validate:"omitempty,max=200"`
	// Sort | 排序
	// max : 10000
	Sort *uint32 `json:"sort,optional" validate:"omitempty,lt=10000"`
	// Data scope 1 - all data 2 - custom dept data 3 - own dept and sub dept data 4 - own dept data  5 - your own data | 数据权限范围 1 - 所有数据 2 - 自定义部门数据 3 - 您所在部门及下属部门数据 4 - 您所在部门数据 5 - 本人数据
	// max length : 5
	// min length : 1
	DataScope *uint32 `json:"dataScope,optional validate:"omitempty,max=5,min=1"`
	// Custom department setting for data permission | 自定义部门数据权限
	CustomDeptIds []uint64 `json:"customDeptIds,optional,omitempty"`
	// Role MenuIds | 角色菜单ID
	MenuIds []uint64 `json:"menuIds,optional,omitempty"`
}

// Change Role Status | 修改角色状态
// swagger:model RoleChangeStatusReq
type RoleChangeStatusReq struct {
	BaseIDInfo
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
}

// The response data of role list | 角色列表数据
// swagger:model RoleListResp
type RoleListResp struct {
	BaseDataInfo
	// Role list data | 角色列表数据
	Data RoleListInfo `json:"data"`
}

// Role list data | 角色列表数据
// swagger:model RoleListInfo
type RoleListInfo struct {
	BaseListInfo
	// The API list data | 角色列表数据
	Data []RoleInfo `json:"data"`
}

// Get role list request params | 角色列表请求参数
// swagger:model RoleListReq
type RoleListReq struct {
	PageInfo
	// Name | 角色名称
	Name *string `json:"name,optional"`
	// Code | 角色编码
	Code *string `json:"code,optional,omitempty" validate:"omitempty"`
}

// Role information response | 角色信息返回体
// swagger:model RoleInfoResp
type RoleInfoResp struct {
	BaseDataInfo
	// Role information | 角色数据
	Data RoleInfo `json:"data"`
}

// swagger:model RoleDataScopeReq
type RoleDataScopeReq struct {
	BaseIDInfo
	// Data scope 1 - all data 2 - custom dept data 3 - own dept and sub dept data 4 - own dept data  5 - your own data | 数据权限范围 1 - 所有数据 2 - 自定义部门数据 3 - 您所在部门及下属部门数据 4 - 您所在部门数据 5 - 本人数据
	// max length : 5
	// min length : 1
	DataScope uint32 `json:"dataScope" validate:"max=5,min=1"`
	// Custom department setting for data permission | 自定义部门数据权限
	CustomDeptIds []uint64 `json:"customDeptIds,optional,omitempty"`
}

// swagger:model RoleAuthReq
type RoleAuthReq struct {
	// role id | 角色Id
	RoleId uint64 `json:"roleId"`
	// userIds | 用户IDS
	UserIds []string `json:"userIds"`
}

// The response data of user information | 用户信息
// swagger:model UserInfo
type UserInfo struct {
	BaseUUIDInfo
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Username | 用户名
	// max length : 50
	Username *string `json:"username,optional" validate:"omitempty,max=50"`
	// Nickname | 昵称
	// max length : 40
	Nickname *string `json:"nickname,optional" validate:"omitempty,max=40"`
	// Password | 密码
	// min length : 6
	Password *string `json:"password,optional" validate:"omitempty,min=6"`
	// Description | 描述
	// max length : 100
	Description *string `json:"description,optional" validate:"omitempty,max=100"`
	// HomePath | 首页
	// max length : 70
	HomePath *string `json:"homePath,optional" validate:"omitempty,max=70"`
	// RoleId | 角色ID
	RoleIds []uint64 `json:"roleIds,optional"`
	// Mobile | 手机号
	// max length : 18
	Mobile *string `json:"mobile,optional" validate:"omitempty,max=18"`
	// Email | 邮箱
	// max length : 80
	Email *string `json:"email,optional" validate:"omitempty,max=80"`
	// Avatar | 头像地址
	// max length : 300
	Avatar *string `json:"avatar,optional" validate:"omitempty,max=300"`
	// Department Name | 部门名称
	DepartmentName *string `json:"departmentName,optional,omitempty"`
	// Department ID | 部门ID
	DepartmentId *uint64 `json:"departmentId,optional,omitempty"`
	// Position ID | 职位ID
	PositionIds []uint64 `json:"postIds,optional,omitempty"`
}

// The response data of user list | 用户列表数据
// swagger:model UserListResp
type UserListResp struct {
	BaseDataInfo
	// User list data | User列表数据
	Data UserListInfo `json:"data"`
}

// User list data | 用户列表数据
// swagger:model UserListInfo
type UserListInfo struct {
	BaseListInfo
	// The API list data | User列表数据
	Data []UserInfo `json:"data"`
}

// Get user list request params | 用户列表请求参数
// swagger:model UserListReq
type UserListReq struct {
	PageInfo
	// User Name | 用户名
	// max length : 20
	Username *string `json:"username,optional" validate:"omitempty,alphanum,max=20"`
	// User's nickname | 用户的昵称
	// max length : 10
	Nickname *string `json:"nickname,optional" validate:"omitempty,alphanumunicode,max=10"`
	// User's mobile phone number | 用户的手机号码
	// max length : 18
	Mobile *string `json:"mobile,optional" validate:"omitempty,eq=|numeric,max=18"`
	// The user's email address | 用户的邮箱
	// max length : 100
	Email *string `json:"email,optional" validate:"omitempty,email,max=100"`
	// User's role ID | 用户的角色ID
	RoleIds []uint64 `json:"roleIds,optional"`
	// The user's department ID | 用户所属部门ID
	DepartmentId *uint64 `json:"departmentId,optional"`
	// User's position id | 用户的职位ID
	PositionId *uint64 `json:"positionId,optional"`
	// Description | 描述
	// max length : 100
	Description *string `json:"description,optional" validate:"omitempty,max=100"`
}

// User information response | 用户信息返回体
// swagger:model UserInfoResp
type UserInfoResp struct {
	BaseDataInfo
	// User information | User数据
	Data UserInfo `json:"data"`
}

// register request | 注册参数
// swagger:model RegisterReq
type RegisterReq struct {
	// User Name | 用户名
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | 密码
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// Captcha ID which store in redis | 验证码编号, 存在redis中
	// required : true
	// max length : 20
	// min length : 20
	CaptchaId string `json:"captchaId" validate:"required,len=20"`
	// The Captcha which users input | 用户输入的验证码
	// required : true
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's email address | 用户的邮箱
	// required : true
	// max length : 100
	Email string `json:"email" validate:"required,email,max=100"`
}

// Register by email request | 邮箱注册参数
// swagger:model RegisterByEmailReq
type RegisterByEmailReq struct {
	// User Name | 用户名
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | 密码
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// The Captcha which users input | 用户输入的验证码
	// required : true
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's email address | 用户的邮箱
	// required : true
	// max length : 100
	Email string `json:"email" validate:"required,email,max=100"`
}

// Register by SMS request | 短信注册参数
// swagger:model RegisterBySmsReq
type RegisterBySmsReq struct {
	// User Name | 用户名
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | 密码
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// The Captcha which users input | 用户输入的验证码
	// required : true
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha" validate:"required,len=5"`
	// The user's mobile phone number | 用户的手机号码
	// required : true
	// max length : 20
	PhoneNumber string `json:"phoneNumber"  validate:"required,numeric,max=20"`
}

// change user's password request | 修改密码请求参数
// swagger:model ChangePasswordReq
type ChangePasswordReq struct {
	// User's old password | 用户旧密码
	// required : true
	// max length : 30
	OldPassword string `json:"oldPassword" validate:"required,max=30"`
	// User's new password | 用户新密码
	// required : true
	// max length : 30
	NewPassword string `json:"newPassword" validate:"required,max=30"`
}

// The log in information | 登陆返回的数据信息
// swagger:model LoginInfo
type LoginInfo struct {
	// User's UUID | 用户的UUID
	UserId string `json:"userId"`
	// Token for authorization | 验证身份的token
	Token string `json:"token"`
	// Expire timestamp | 过期时间戳
	Expire uint64 `json:"expire"`
}

// The simple role data | 简单的角色数据
// swagger:model RoleInfoSimple
type RoleInfoSimple struct {
	// Role name | 角色名
	RoleName string `json:"roleName"`
	// Role value | 角色值
	Value string `json:"value"`
}

// The response data of user's basic information | 用户基本信息返回数据
// swagger:model UserBaseIDInfoResp
type UserBaseIDInfoResp struct {
	BaseDataInfo
	// The  data of user's basic information | 用户基本信息
	Data UserBaseIDInfo `json:"data"`
}

// The  data of user's basic information | 用户基本信息
// swagger:model UserBaseIDInfo
type UserBaseIDInfo struct {
	// User's UUID | 用户的UUID
	UUID *string `json:"userId"`
	// User's name | 用户名
	Username *string `json:"username"`
	// User's nickname | 用户的昵称
	Nickname *string `json:"nickname"`
	// The user's avatar path | 用户的头像路径
	Avatar *string `json:"avatar"`
	// The home page that the user enters after logging in | 用户登陆后进入的首页
	HomePath *string `json:"homePath"`
	// The description of user | 用户的描述信息
	Description *string `json:"desc"`
	// User's Role Name | 用户的角色名称
	RoleNames []string `json:"roleNames"`
	// User's Role Name | 用户的角色名称
	RoleCodes []string `json:"roleCodes"`
	// Department Name | 部门名称
	DepartmentName string `json:"departmentName,optional"`
}

// The permission code for front end permission control | 权限码： 用于前端权限控制
// swagger:model PermCodeResp
type PermCodeResp struct {
	BaseDataInfo
	// Permission code data | 权限码数据
	Data []string `json:"data"`
}

// Login request | 登录参数
// swagger:model LoginReq
type LoginReq struct {
	// User Name | 用户名
	// required : true
	// max length : 20
	Username string `json:"username" validate:"required,alphanum,max=20"`
	// Password | 密码
	// required : true
	// max length : 30
	// min length : 6
	Password string `json:"password" validate:"required,max=30,min=6"`
	// Captcha ID which store in redis | 验证码编号, 存在redis中
	// required : true
	// max length : 20
	// min length : 20
	CaptchaId string `json:"captchaId"  validate:"required,len=20"`
	// The Captcha which users input | 用户输入的验证码
	// required : true
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha" validate:"required,len=5"`
	// Tenant ID
	// required : true
	TenantId string `json:"tenantId" validate:"required"`
}

// Log in by email request | 邮箱登录参数
// swagger:model LoginByEmailReq
type LoginByEmailReq struct {
	// The user's email address | 用户的邮箱
	// required : true
	// max length : 100
	Email string `json:"email" validate:"required,email,max=100"`
	// The Captcha which users input | 用户输入的验证码
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

// Log in by SMS request | 短信登录参数
// swagger:model LoginBySmsReq
type LoginBySmsReq struct {
	// The user's mobile phone number | 用户的手机号码
	// required : true
	// max length : 20
	PhoneNumber string `json:"phoneNumber"  validate:"required,numeric,max=20"`
	// The Captcha which users input | 用户输入的验证码
	// max length : 5
	// min length : 5
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

// The log in response data | 登录返回数据
// swagger:model LoginResp
type LoginResp struct {
	BaseDataInfo
	// The log in information | 登陆返回的数据信息
	Data LoginInfo `json:"data"`
}

// The profile information | 个人信息
// swagger:model ProfileInfo
type ProfileInfo struct {
	// user's nickname | 用户的昵称
	// max length : 10
	Nickname *string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`
	// The user's avatar path | 用户的头像路径
	// max length : 300
	Avatar *string `json:"avatar" validate:"omitempty,max=300"`
	// User's mobile phone number | 用户的手机号码
	// max length : 18
	Mobile *string `json:"mobile" validate:"omitempty,eq=|numeric,max=18"`
	// The user's email address | 用户的邮箱
	// max length : 100
	Email *string `json:"email" validate:"omitempty,email,max=100"`
}

// swagger:model ProfileUserInfo
type ProfileUserInfo struct {
	// User's Profile Info | 用户信息
	User UserInfo `json:"user"`
	// User's Role | 用户角色
	RoleGroup *string `json:"roleGroup"`
	// User's Post | 用户岗位
	PostGroup *string `json:"postGroup"`
}

// The profile response data | 个人信息返回数据
// swagger:model ProfileResp
type ProfileResp struct {
	BaseDataInfo
	// The profile information | 个人信息
	Data ProfileUserInfo `json:"data"`
}

// Reset password by email request | 通过邮箱重置密码请求
// swagger:model ResetPasswordByEmailReq
type ResetPasswordByEmailReq struct {
	Email    string `json:"email" validate:"email"`
	Captcha  string `json:"captcha"`
	Password string `json:"password"`
}

// Reset password by SMS request | 通过短信重置密码请求
// swagger:model ResetPasswordBySmsReq
type ResetPasswordBySmsReq struct {
	PhoneNumber string `json:"phoneNumber"`
	Captcha     string `json:"captcha"`
	Password    string `json:"password"`
}

// Reset password | 管理员后台重置密码
// swagger:model ResetPasswordReq
type ResetPasswordReq struct {
	UserId   string `json:"userId"`
	Password string `json:"password"`
}

// Refresh token response data | 刷新令牌响应数据
// swagger:model RefreshTokenResp
type RefreshTokenResp struct {
	BaseDataInfo
	// The token information | 令牌信息
	Data RefreshTokenInfo `json:"data"`
}

// Refresh token information | 刷新令牌信息
// swagger:model RefreshTokenInfo
type RefreshTokenInfo struct {
	Token     string `json:"token"`
	ExpiredAt int64  `json:"expiredAt"`
}

// Role Unallocated UserList | 当前角色未授权用户列表
// swagger:model RoleUnallocatedUserListReq
type RoleUnallocatedUserListReq struct {
	PageInfo
	// userName | 用户名
	// max length : 30
	UserName *string `json:"username,optional" validate:"omitempty,max=30"`
	// mobile | 手机号
	// max length : 16
	Mobile *string `json:"mobile,optional" validate:"omitempty,max=16"`
	// role id | 角色Id
	RoleId uint64 `json:"roleId"`
}

// The response data of menu information | 菜单信息
// swagger:model MenuInfo
type MenuInfo struct {
	BaseIDInfo
	// Translated Name | 国际化展示名称
	Trans string `json:"trans,optional"`
	// Level | 菜单层级
	Level *uint32 `json:"level,optional"`
	// ParentId | 父级菜单ID
	ParentId *uint64 `json:"parentId,optional"`
	// Path | 菜单访问路径
	Path *string `json:"path,optional"`
	// Menu name | 菜单名称
	Name *string `json:"name,optional"`
	// Redirect | 跳转地址
	Redirect *string `json:"redirect,optional"`
	// Component | 组件地址
	Component *string `json:"component,optional"`
	// Sort | 排序
	Sort *uint32 `json:"sort,optional"`
	// Disabled | 是否启用
	Disabled *bool `json:"disabled,optional"`
	// Meta | 菜单meta数据
	Meta Meta `json:"meta"`
	// MenuType | 菜单类型
	MenuType *uint32 `json:"menuType,optional"`
	// Service Name | 服务名称
	ServiceName *string `json:"serviceName,optional"`
	// Permission symbol | 权限标识
	Permission *string `json:"permission,optional"`
}

// The meta data of menu | 菜单的meta数据
// swagger:model Meta
type Meta struct {
	// Menu title show in page | 菜单显示名
	// Max length: 50
	Title *string `json:"title" validate:"max=50"`
	// Menu Icon | 菜单图标
	// Max length: 50
	Icon *string `json:"icon" validate:"max=50"`
	// Hide menu | 隐藏菜单
	HideMenu *bool `json:"hideMenu" validate:"omitempty,boolean"`
	// If hide the breadcrumb | 隐藏面包屑
	HideBreadcrumb *bool `json:"hideBreadcrumb,optional" validate:"omitempty,boolean"`
	// Do not keep alive the tab | 不缓存Tab
	IgnoreKeepAlive *bool `json:"ignoreKeepAlive,optional" validate:"omitempty,boolean"`
	// Hide the tab header | 当前路由不在标签页显示
	HideTab *bool `json:"hideTab,optional" validate:"omitempty,boolean"`
	// Iframe path | 内嵌iframe的地址
	FrameSrc *string `json:"frameSrc,optional"`
	// The route carries parameters or not | 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true
	CarryParam *bool `json:"carryParam,optional" validate:"omitempty,boolean"`
	// Hide children menu or not | 隐藏所有子菜单
	HideChildrenInMenu *bool `json:"hideChildrenInMenu,optional" validate:"omitempty,boolean"`
	// Affix tab | 是否固定标签
	Affix *bool `json:"affix,optional" validate:"omitempty,boolean"`
	// The maximum number of pages the router can open | 动态路由可打开Tab页数
	DynamicLevel *uint32 `json:"dynamicLevel" validate:"number,lt=30"`
	// The real path of the route without dynamic part | 动态路由的实际Path, 即去除路由的动态部分
	RealPath *string `json:"realPath,optional"`
	// The Route Params | 路由参数
	Params *string `json:"params,optional"`
}

// The response data of menu list | 菜单列表返回数据
// swagger:model MenuListResp
type MenuListResp struct {
	BaseDataInfo
	// Menu list data | Menu列表数据
	Data MenuListInfo `json:"data"`
}

// Menu list data | Menu列表数据
// swagger:model MenuListInfo
type MenuListInfo struct {
	BaseListInfo
	// The menu list data | 菜单列表数据
	Data []MenuInfo `json:"data"`
}

// Menu information response | 菜单信息返回体
// swagger:model MenuInfoResp
type MenuInfoResp struct {
	BaseDataInfo
	// Menu information | Menu数据
	Data MenuInfo `json:"data"`
}

// Menu information plain | 菜单信息无嵌套
// swagger:model MenuPlainInfo
type MenuPlainInfo struct {
	Id *uint64 `json:"id,optional"`
	// Create date | 创建日期
	CreatedAt *int64 `json:"createdAt,optional"`
	// Update date | 更新日期
	UpdatedAt *int64 `json:"updatedAt,optional"`
	// Translated Name | 国际化展示名称
	Trans *string `json:"trans,optional"`
	// Level | 菜单层级
	// max : 20
	Level *uint32 `json:"level,optional" validate:"omitempty,lt=20"`
	// ParentId | 父级菜单ID
	ParentId *uint64 `json:"parentId,optional"`
	// Path | 菜单访问路径
	// max length : 200
	Path *string `json:"path,optional" validate:"omitempty,max=200"`
	// Menu name | 菜单名称
	// max length : 100
	Name *string `json:"name,optional" validate:"omitempty,max=100"`
	// Redirect | 跳转地址
	// max length : 300
	Redirect *string `json:"redirect,optional" validate:"omitempty,max=300"`
	// Component | 组件地址
	// max length : 80
	Component *string `json:"component,optional" validate:"omitempty,max=80"`
	// Sort | 排序
	// max : 10000
	Sort *uint32 `json:"sort,optional" validate:"omitempty,lt=10000"`
	// Disabled | 是否启用
	Disabled *bool `json:"disabled,optional"`
	// MenuType | 菜单类型
	// max : 10
	MenuType *uint32 `json:"menuType,optional" validate:"omitempty,lt=10"`
	// Service Name | 服务名称
	ServiceName *string `json:"serviceName,optional"`
	// Permission symbol | 权限标识
	Permission *string `json:"permission,optional"`
	// Menu title show in page | 菜单显示名
	// max length : 50
	Title *string `json:"title" validate:"omitempty,max=50"`
	// Menu Icon | 菜单图标
	// max length : 50
	Icon *string `json:"icon" validate:"omitempty,max=50"`
	// Hide menu | 隐藏菜单
	HideMenu *bool `json:"hideMenu" validate:"omitempty,boolean"`
	// If hide the breadcrumb | 隐藏面包屑
	HideBreadcrumb *bool `json:"hideBreadcrumb,optional" validate:"omitempty,boolean"`
	// Do not keep alive the tab | 不缓存Tab
	IgnoreKeepAlive *bool `json:"ignoreKeepAlive,optional" validate:"omitempty,boolean"`
	// Hide the tab header | 当前路由不在标签页显示
	HideTab *bool `json:"hideTab,optional" validate:"omitempty,boolean"`
	// Iframe path | 内嵌iframe的地址
	// max length : 300
	FrameSrc *string `json:"frameSrc,optional" validate:"omitempty,max=300"`
	// The route carries parameters or not | 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true
	CarryParam *bool `json:"carryParam,optional" validate:"omitempty,boolean"`
	// Hide children menu or not | 隐藏所有子菜单
	HideChildrenInMenu *bool `json:"hideChildrenInMenu,optional" validate:"omitempty,boolean"`
	// Affix tab | 是否固定标签
	Affix *bool `json:"affix,optional" validate:"omitempty,boolean"`
	// The maximum number of pages the router can open | 动态路由可打开Tab页数
	DynamicLevel *uint32 `json:"dynamicLevel,optional" validate:"omitempty,number,lt=30"`
	// The real path of the route without dynamic part | 动态路由的实际Path, 即去除路由的动态部分
	RealPath *string `json:"realPath,optional"`
	// The Route Params | 路由参数
	Params *string `json:"params,optional"`
}

// Menu list data | 菜单列表数据
type MenuPlainInfoList struct {
	BaseListInfo
	// The menu list data | 菜单列表数据
	Data []MenuPlainInfo `json:"data"`
}

// Menu list data response | 菜单列表数据返回体
// swagger:model MenuPlainInfoListResp
type MenuPlainInfoListResp struct {
	BaseDataInfo
	// Menu list data | Menu列表数据
	Data MenuPlainInfoList `json:"data"`
}

// Menu detail data response | 菜单数据返回体
// swagger:model MenuPlainInfoResp
type MenuPlainInfoResp struct {
	BaseDataInfo
	// Menu data | Menu数据
	Data MenuPlainInfo `json:"data"`
}

// The information of captcha | 验证码数据
// swagger:model CaptchaInfo
type CaptchaInfo struct {
	CaptchaId string `json:"captchaId"`
	ImgPath   string `json:"imgPath"`
}

// The response data of captcha | 验证码返回数据
// swagger:model CaptchaResp
type CaptchaResp struct {
	BaseDataInfo
	// The menu authorization data | 菜单授权信息数据
	Data CaptchaInfo `json:"data"`
}

// The email captcha request | 邮箱验证码请求参数
// swagger:model EmailCaptchaReq
type EmailCaptchaReq struct {
	// The email address | 邮箱地址
	Email string `json:"email"`
}

// The sms captcha request | 短信验证码请求参数
// swagger:model SmsCaptchaReq
type SmsCaptchaReq struct {
	// The phone number | 电话号码
	PhoneNumber string `json:"phoneNumber"`
}

// The API information | API信息
// swagger:model ApiInfo
type ApiInfo struct {
	BaseIDInfo
	// Translated Name | 多语言名称
	Trans string `json:"trans,optional"`
	// API path | API路径
	// min length : 1
	// max length : 80
	Path *string `json:"path,optional" validate:"omitempty,min=1,max=80"`
	// API Description | API 描述
	// max length : 100
	Description *string `json:"description,optional" validate:"omitempty,max=100"`
	// API group | API分组
	// min length : 1
	// max length : 80
	Group *string `json:"group,optional" validate:"omitempty,min=1,max=80"`
	// API request method e.g. POST | API请求类型 如POST
	// min length : 3
	// max length : 7
	Method *string `json:"method,optional" validate:"omitempty,uppercase,min=3,max=7"`
	// Whether is required | 是否是必须的 api
	IsRequired *bool `json:"isRequired,optional"`
	// Service name | 服务名称
	ServiceName *string `json:"serviceName,optional"`
}

// The response data of API list | API列表数据
// swagger:model ApiListResp
type ApiListResp struct {
	BaseDataInfo
	// API list data | API 列表数据
	Data ApiListInfo `json:"data"`
}

// API list data | API 列表数据
// swagger:model ApiListInfo
type ApiListInfo struct {
	BaseListInfo
	// The API list data | API列表数据
	Data []ApiInfo `json:"data"`
}

// Get API list request params | API列表请求参数
// swagger:model ApiListReq
type ApiListReq struct {
	PageInfo
	// API path | API路径
	// max length : 200
	Path *string `json:"path,optional" validate:"omitempty,max=200"`
	// API Description | API 描述
	// max length : 100
	Description *string `json:"description,optional" validate:"omitempty,max=100"`
	// API group | API分组
	// max length : 80
	Group *string `json:"group,optional" validate:"omitempty,max=80"`
	// API request method e.g. POST | API请求类型 如POST
	// min length : 3
	// max length : 7
	Method *string `json:"method,optional" validate:"omitempty,uppercase,min=3,max=7"`
	// Whether is required | 是否是必须的 api
	IsRequired *bool `json:"isRequired,optional"`
	// Service name | 服务名称
	ServiceName *string `json:"serviceName,optional"`
}

// API information response | API信息返回体
// swagger:model ApiInfoResp
type ApiInfoResp struct {
	BaseDataInfo
	// API information | API数据
	Data ApiInfo `json:"data"`
}

// The response data of api authorization | API授权数据
// swagger:model ApiAuthorityInfo
type ApiAuthorityInfo struct {
	// API path | API 路径
	// required : true
	// max length : 80
	Path string `json:"path" validate="required,max=80"`
	// API method | API请求方法
	// required : true
	// min length : 3
	// max length : 4
	Method string `json:"method" validate="required,min=3,max=4"`
}

// Create or update api authorization information request | 创建或更新API授权信息
// swagger:model CreateOrUpdateApiAuthorityReq
type CreateOrUpdateApiAuthorityReq struct {
	// Role ID | 角色ID
	// required : true
	// max : 1000
	RoleId uint64 `json:"roleId" validate:"required,lt=1000"`
	// API authorization list | API授权列表数据
	// Required: true
	Data []ApiAuthorityInfo `json:"data"`
}

// The response data of api authorization list | API授权列表返回数据
// swagger:model ApiAuthorityListResp
type ApiAuthorityListResp struct {
	BaseDataInfo
	// The api authorization list data | API授权列表数据
	Data ApiAuthorityListInfo `json:"data"`
}

// The  data of api authorization list | API授权列表数据
// swagger:model ApiAuthorityListInfo
type ApiAuthorityListInfo struct {
	BaseListInfo
	// The api authorization list data | API授权列表数据
	Data []ApiAuthorityInfo `json:"data"`
}

// Create or update menu authorization information request params | 创建或更新菜单授权信息参数
// swagger:model MenuAuthorityInfoReq
type MenuAuthorityInfoReq struct {
	// role ID | 角色ID
	// required : true
	// max : 1000
	RoleId uint64 `json:"roleId" validate:"required,lt=1000"`
	// menu ID array | 菜单ID数组
	// required : true
	MenuIds []uint64 `json:"menuIds" validate:"required"`
}

// Menu authorization response data | 菜单授权信息数据
// swagger:model MenuAuthorityInfoResp
type MenuAuthorityInfoResp struct {
	BaseDataInfo
	// The menu authorization data | 菜单授权信息数据
	Data MenuAuthorityInfoReq `json:"data"`
}

// The response data of dictionary information | 字典信息
// swagger:model DictionaryInfo
type DictionaryInfo struct {
	BaseIDInfo
	// Translated Name | 字典多语言名称
	Trans string `json:"trans,optional"`
	// Title | 字典多语言名称
	// min length : 1
	// max length : 50
	Title *string `json:"title,optional" validate:"omitempty,min=1,max=50"`
	// Name | 字典名称
	// min length : 1
	// max length : 50
	Name *string `json:"name,optional" validate:"omitempty,min=1,max=50"`
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Description of dictionary | 字典描述
	// max length : 200
	Desc *string `json:"desc,optional" validate:"omitempty,max=200"`
}

// The response data of dictionary list | 字典列表数据
// swagger:model DictionaryListResp
type DictionaryListResp struct {
	BaseDataInfo
	// Dictionary list data | 字典列表数据
	Data DictionaryListInfo `json:"data"`
}

// Dictionary list data | 字典列表数据
// swagger:model DictionaryListInfo
type DictionaryListInfo struct {
	BaseListInfo
	// The API list data | 字典列表数据
	Data []DictionaryInfo `json:"data"`
}

// Get dictionary list request params | 字典列表请求参数
// swagger:model DictionaryListReq
type DictionaryListReq struct {
	PageInfo
	// Title | 字典标题
	// max length : 50
	Title *string `json:"title,optional" validate:"omitempty,max=50"`
	// Name | 字典名称
	// max length : 50
	Name *string `json:"name,optional" validate:"omitempty,max=50"`
}

// Dictionary information response | 字典信息返回体
// swagger:model DictionaryInfoResp
type DictionaryInfoResp struct {
	BaseDataInfo
	// Dictionary information | 字典数据
	Data DictionaryInfo `json:"data"`
}

// The response data of oauth provider information | 第三方信息
// swagger:model OauthProviderInfo
type OauthProviderInfo struct {
	BaseIDInfo
	// Provider name | 第三方提供商名称
	// max length : 30
	Name *string `json:"name,optional" validate:"omitempty,max=30"`
	// ClientId | 客户端ID
	// max length : 80
	ClientId *string `json:"clientId,optional" validate:"omitempty,max=80"`
	// ClientSecret | 客户端密钥
	// max length : 100
	ClientSecret *string `json:"clientSecret,optional" validate:"omitempty,max=100"`
	// Redirect URL| 跳转地址
	// max length : 300
	RedirectUrl *string `json:"redirectUrl,optional" validate:"omitempty,max=300"`
	// Scopes | 授权范围
	// max length : 100
	Scopes *string `json:"scopes,optional" validate:"omitempty,max=100"`
	// Authority URL | 授权地址
	// max length : 300
	AuthUrl *string `json:"authUrl,optional" validate:"omitempty,max=300"`
	// The URL to get token | 获取Token的地址
	// max length : 300
	TokenUrl *string `json:"tokenUrl,optional" validate:"omitempty,max=300"`
	// The type of auth | 鉴权方式
	// max : 20
	AuthStyle *uint64 `json:"authStyle,optional" validate:"omitempty,lt=20"`
	// The URL to get user information | 获取信息地址
	// max length : 300
	InfoUrl *string `json:"infoUrl,optional" validate:"omitempty,max=300"`
	// Enhanced fields from OAuth refactor
	// Display name | 显示名称
	// max length : 50
	DisplayName *string `json:"displayName,optional" validate:"omitempty,max=50"`
	// Provider type | 提供商类型
	// max length : 20
	Type *string `json:"type,optional" validate:"omitempty,max=20"`
	// Provider specific type | 提供商具体类型
	// max length : 30
	ProviderType *string `json:"providerType,optional" validate:"omitempty,max=30"`
	// Extra configuration as JSON | 额外配置信息
	ExtraConfig *string `json:"extraConfig,optional"`
	// Whether enabled | 是否启用
	Enabled *bool `json:"enabled,optional"`
	// Sort order | 排序
	Sort *uint32 `json:"sort,optional"`
	// Remark | 备注
	// max length : 255
	Remark *string `json:"remark,optional" validate:"omitempty,max=255"`
	// Support PKCE | 是否支持PKCE
	SupportPkce *bool `json:"supportPkce,optional"`
	// Icon URL | 图标地址
	// max length : 500
	IconUrl *string `json:"iconUrl,optional" validate:"omitempty,max=500"`
	// Cache TTL in seconds | 缓存TTL(秒)
	CacheTtl *int32 `json:"cacheTtl,optional"`
	// Webhook URL | 回调URL
	// max length : 500
	WebhookUrl *string `json:"webhookUrl,optional" validate:"omitempty,max=500"`
	// Success count | 成功次数
	SuccessCount *int32 `json:"successCount,optional"`
	// Failure count | 失败次数
	FailureCount *int32 `json:"failureCount,optional"`
	// Last used at | 最后使用时间
	LastUsedAt *int64 `json:"lastUsedAt,optional"`
}

// The response data of oauth provider list | 第三方列表数据
// swagger:model OauthProviderListResp
type OauthProviderListResp struct {
	BaseDataInfo
	// OauthProvider list data | 第三方列表数据
	Data OauthProviderListInfo `json:"data"`
}

// OauthProvider list data | 第三方列表数据
// swagger:model OauthProviderListInfo
type OauthProviderListInfo struct {
	BaseListInfo
	// The API list data | 第三方列表数据
	Data []OauthProviderInfo `json:"data"`
}

// Get oauth provider list request params | 第三方列表请求参数
// swagger:model OauthProviderListReq
type OauthProviderListReq struct {
	PageInfo
	// Name | 第三方提供商名称
	// max length : 30
	Name *string `json:"name,optional" validate:"omitempty,max=30"`
}

// Oauth provider information response | 第三方信息返回体
// swagger:model OauthProviderInfoResp
type OauthProviderInfoResp struct {
	BaseDataInfo
	// OauthProvider information | 第三方数据
	Data OauthProviderInfo `json:"data"`
}

// Oauth log in request | Oauth 登录请求
// swagger:model OauthLoginReq
type OauthLoginReq struct {
	// State code to avoid hack | 状态码，请求前后相同避免安全问题
	// required : true
	// max length : 30
	State string `json:"state" validate:"required,max=30"`
	// Provider name | 提供商名字
	// Example: google
	// required : true
	// max length : 40
	Provider string `json:"provider" validate:"required,max=40"`
	// User ID for binding (optional) | 绑定的用户ID（可选）
	UserId *string `json:"userId,optional"`
	// Client IP address | 客户端IP地址
	// max length : 45
	ClientIp *string `json:"clientIp,optional" validate:"omitempty,max=45"`
	// User agent | 用户代理
	// max length : 500
	UserAgent *string `json:"userAgent,optional" validate:"omitempty,max=500"`
	// Additional scopes | 额外权限范围
	// max length : 200
	Scopes *string `json:"scopes,optional" validate:"omitempty,max=200"`
}

// Enhanced OAuth callback request | 增强的OAuth回调请求
// swagger:model OauthCallbackReq
type OauthCallbackReq struct {
	// State parameter | 状态参数
	// required : true
	State string `json:"state" validate:"required"`
	// Authorization code | 授权码
	// required : true
	Code string `json:"code" validate:"required"`
	// Error code if any | 错误码（如果有）
	Error *string `json:"error,optional"`
	// Error description | 错误描述
	ErrorDescription *string `json:"errorDescription,optional"`
	// Client IP address | 客户端IP地址
	// max length : 45
	ClientIp *string `json:"clientIp,optional" validate:"omitempty,max=45"`
	// User agent | 用户代理
	// max length : 500
	UserAgent *string `json:"userAgent,optional" validate:"omitempty,max=500"`
}

// OAuth provider list for user | 用户可用的OAuth提供商列表
// swagger:model UserOauthProviderListReq
type UserOauthProviderListReq struct {
	// Whether only enabled providers | 是否只获取启用的提供商
	EnabledOnly *bool `json:"enabledOnly,optional"`
}

// OAuth provider list for user response | 用户OAuth提供商列表响应
// swagger:model UserOauthProviderListResp
type UserOauthProviderListResp struct {
	BaseDataInfo
	// OAuth provider list | OAuth提供商列表
	Data []UserOauthProviderInfo `json:"data"`
}

// User OAuth provider info | 用户OAuth提供商信息
// swagger:model UserOauthProviderInfo
type UserOauthProviderInfo struct {
	// Provider ID | 提供商ID
	Id uint64 `json:"id"`
	// Provider name | 提供商名称
	Name string `json:"name"`
	// Display name | 显示名称
	DisplayName string `json:"displayName"`
	// Provider type | 提供商类型
	Type string `json:"type"`
	// Icon URL | 图标地址
	IconUrl *string `json:"iconUrl,optional"`
	// Whether user has bound this provider | 用户是否已绑定此提供商
	IsBound bool `json:"isBound"`
	// Bound account info if exists | 绑定的账户信息（如果存在）
	BoundAccount *UserBoundAccountInfo `json:"boundAccount,optional"`
}

// User bound account info | 用户绑定账户信息
// swagger:model UserBoundAccountInfo
type UserBoundAccountInfo struct {
	// Provider username | 第三方用户名
	ProviderUsername *string `json:"providerUsername,optional"`
	// Provider nickname | 第三方昵称
	ProviderNickname *string `json:"providerNickname,optional"`
	// Provider email | 第三方邮箱
	ProviderEmail *string `json:"providerEmail,optional"`
	// Provider avatar | 第三方头像
	ProviderAvatar *string `json:"providerAvatar,optional"`
	// Last login at | 最后登录时间
	LastLoginAt *int64 `json:"lastLoginAt,optional"`
	// Login count | 登录次数
	LoginCount uint32 `json:"loginCount"`
}

// Redirect response | 跳转网址返回信息
// swagger:model RedirectResp
type RedirectResp struct {
	BaseDataInfo
	// Redirect information | 跳转网址
	Data RedirectInfo `json:"data"`
}

// Redirect information | 跳转网址
// swagger:model RedirectInfo
type RedirectInfo struct {
	// Redirect URL | 跳转网址
	URL string `json:"URL"`
}

// The oauth callback response data | Oauth回调数据
// swagger:model CallbackResp
type CallbackResp struct {
	// User's UUID | 用户的UUID
	UserId string `json:"userId"`
	// User's role information| 用户的角色信息
	// in: body
	Role RoleInfoSimple `json:"role"`
	// Token for authorization | 验证身份的token
	Token string `json:"token"`
	// Expire timestamp | 过期时间戳
	Expire uint64 `json:"expire"`
}

// OAuth Account information | OAuth账户信息
// swagger:model OauthAccountInfo
type OauthAccountInfo struct {
	BaseIDInfo
	// User ID | 用户ID
	UserId *string `json:"userId,optional"`
	// Provider ID | 提供商ID
	ProviderId *uint64 `json:"providerId,optional"`
	// Provider type | 提供商类型
	// max length : 20
	ProviderType *string `json:"providerType,optional" validate:"omitempty,max=20"`
	// Provider user ID | 第三方用户ID
	// max length : 100
	ProviderUserId *string `json:"providerUserId,optional" validate:"omitempty,max=100"`
	// Provider username | 第三方用户名
	// max length : 100
	ProviderUsername *string `json:"providerUsername,optional" validate:"omitempty,max=100"`
	// Provider nickname | 第三方昵称
	// max length : 100
	ProviderNickname *string `json:"providerNickname,optional" validate:"omitempty,max=100"`
	// Provider email | 第三方邮箱
	// max length : 255
	ProviderEmail *string `json:"providerEmail,optional" validate:"omitempty,max=255"`
	// Provider avatar | 第三方头像
	// max length : 500
	ProviderAvatar *string `json:"providerAvatar,optional" validate:"omitempty,max=500"`
	// Token expires at | 令牌过期时间
	TokenExpiresAt *int64 `json:"tokenExpiresAt,optional"`
	// Extra data as JSON | 额外数据
	ExtraData *string `json:"extraData,optional"`
	// Last login at | 最后登录时间
	LastLoginAt *int64 `json:"lastLoginAt,optional"`
	// Last login IP | 最后登录IP
	// max length : 45
	LastLoginIp *string `json:"lastLoginIp,optional" validate:"omitempty,max=45"`
	// Login count | 登录次数
	LoginCount *uint32 `json:"loginCount,optional"`
}

// OAuth Account list response | OAuth账户列表响应
// swagger:model OauthAccountListResp
type OauthAccountListResp struct {
	BaseDataInfo
	// OAuth Account list data | OAuth账户列表数据
	Data OauthAccountListInfo `json:"data"`
}

// OAuth Account list info | OAuth账户列表信息
// swagger:model OauthAccountListInfo
type OauthAccountListInfo struct {
	BaseListInfo
	// The OAuth account list data | OAuth账户列表数据
	Data []OauthAccountInfo `json:"data"`
}

// OAuth Account list request | OAuth账户列表请求
// swagger:model OauthAccountListReq
type OauthAccountListReq struct {
	PageInfo
	// Provider type | 提供商类型
	// max length : 20
	ProviderType *string `json:"providerType,optional" validate:"omitempty,max=20"`
	// Provider ID | 提供商ID
	ProviderId *uint64 `json:"providerId,optional"`
	// User ID | 用户ID
	UserId *string `json:"userId,optional"`
}

// OAuth Account information response | OAuth账户信息响应
// swagger:model OauthAccountInfoResp
type OauthAccountInfoResp struct {
	BaseDataInfo
	// OAuth Account information | OAuth账户数据
	Data OauthAccountInfo `json:"data"`
}

// Bind OAuth account request | 绑定OAuth账户请求
// swagger:model BindOauthAccountReq
type BindOauthAccountReq struct {
	// User ID | 用户ID
	// required : true
	UserId string `json:"userId" validate:"required"`
	// Provider type | 提供商类型
	// required : true
	// max length : 20
	ProviderType string `json:"providerType" validate:"required,max=20"`
	// Provider ID | 提供商ID
	// required : true
	ProviderId uint64 `json:"providerId" validate:"required"`
	// Authorization code | 授权码
	// required : true
	AuthorizationCode string `json:"authorizationCode" validate:"required"`
	// State parameter | 状态参数
	// required : true
	State string `json:"state" validate:"required"`
}

// Unbind OAuth account request | 解绑OAuth账户请求
// swagger:model UnbindOauthAccountReq
type UnbindOauthAccountReq struct {
	// User ID | 用户ID
	// required : true
	UserId string `json:"userId" validate:"required"`
	// Provider ID | 提供商ID
	// required : true
	ProviderId uint64 `json:"providerId" validate:"required"`
}

// Get user OAuth accounts request | 获取用户OAuth账户请求
// swagger:model GetUserOauthAccountsReq
type GetUserOauthAccountsReq struct {
	PageInfo
	// User ID | 用户ID
	// required : true
	UserId string `json:"userId" validate:"required"`
}

// Get user OAuth accounts response | 获取用户OAuth账户响应
// swagger:model GetUserOauthAccountsResp
type GetUserOauthAccountsResp struct {
	BaseDataInfo
	// User OAuth accounts data | 用户OAuth账户数据
	Data OauthAccountListInfo `json:"data"`
}

// OAuth provider test request | OAuth提供商测试请求
// swagger:model OauthProviderTestReq
type OauthProviderTestReq struct {
	// Provider ID | 提供商ID
	// required : true
	ProviderId uint64 `json:"providerId" validate:"required"`
}

// OAuth provider test response | OAuth提供商测试响应
// swagger:model OauthProviderTestResp
type OauthProviderTestResp struct {
	BaseDataInfo
	// Test result | 测试结果
	Data OauthProviderTestResult `json:"data"`
}

// OAuth provider test result | OAuth提供商测试结果
type OauthProviderTestResult struct {
	// Is connection successful | 连接是否成功
	Connected bool `json:"connected"`
	// Test URL | 测试URL
	TestUrl string `json:"testUrl"`
	// Error message if any | 错误信息
	ErrorMessage *string `json:"errorMessage,optional"`
	// Response time in milliseconds | 响应时间(毫秒)
	ResponseTime int64 `json:"responseTime"`
}

// OAuth statistics request | OAuth统计请求
// swagger:model OauthStatisticsReq
type OauthStatisticsReq struct {
	// Time range | 时间范围
	TimeRange *string `json:"timeRange,optional" validate:"omitempty,oneof=7d 30d 90d 1y"`
	// Provider ID filter | 提供商ID筛选
	ProviderId *uint64 `json:"providerId,optional"`
}

// OAuth statistics response | OAuth统计响应
// swagger:model OauthStatisticsResp
type OauthStatisticsResp struct {
	BaseDataInfo
	// Statistics data | 统计数据
	Data OauthStatisticsData `json:"data"`
}

// OAuth statistics data | OAuth统计数据
type OauthStatisticsData struct {
	// Total logins | 总登录次数
	TotalLogins int64 `json:"totalLogins"`
	// Total users | 总用户数
	TotalUsers int64 `json:"totalUsers"`
	// Total providers | 总提供商数
	TotalProviders int64 `json:"totalProviders"`
	// Today logins | 今日登录次数
	TodayLogins int64 `json:"todayLogins"`
	// Average response time | 平均响应时间
	AvgResponseTime int64 `json:"avgResponseTime"`
	// Success rate | 成功率
	SuccessRate float64 `json:"successRate"`
	// Weekly growth | 周增长率
	WeeklyGrowth float64 `json:"weeklyGrowth"`
	// Monthly growth | 月增长率
	MonthlyGrowth float64 `json:"monthlyGrowth"`
	// Provider statistics | 提供商统计
	ProviderStats []ProviderStatData `json:"providerStats"`
	// Login trend data | 登录趋势数据
	LoginTrend []LoginTrendData `json:"loginTrend"`
}

// Provider stat data | 提供商统计数据
type ProviderStatData struct {
	// Provider ID | 提供商ID
	ProviderId uint64 `json:"providerId"`
	// Provider name | 提供商名称
	ProviderName string `json:"providerName"`
	// Display name | 显示名称
	DisplayName string `json:"displayName"`
	// Provider type | 提供商类型
	Type string `json:"type"`
	// Icon URL | 图标地址
	IconUrl *string `json:"iconUrl,optional"`
	// Total usage | 总使用次数
	TotalUsage int64 `json:"totalUsage"`
	// Success count | 成功次数
	SuccessCount int64 `json:"successCount"`
	// Failure count | 失败次数
	FailureCount int64 `json:"failureCount"`
	// Success rate | 成功率
	SuccessRate float64 `json:"successRate"`
	// Average response time | 平均响应时间
	AvgResponseTime int64 `json:"avgResponseTime"`
	// Last used time | 最后使用时间
	LastUsed *int64 `json:"lastUsed,optional"`
}

// Login trend data | 登录趋势数据
type LoginTrendData struct {
	// Date | 日期
	Date string `json:"date"`
	// Count | 数量
	Count int64 `json:"count"`
	// Success count | 成功数量
	SuccessCount int64 `json:"successCount"`
	// Failure count | 失败数量
	FailureCount int64 `json:"failureCount"`
}

// The response data of token information | 令牌信息
// swagger:model TokenInfo
type TokenInfo struct {
	BaseUUIDInfo
	// Status | 状态
	Status *uint32 `json:"status,optional"`
	// User's UUID | 用户的UUID
	Uuid *string `json:"uuid,optional"`
	// Token | 用户的Token
	Token *string `json:"token,optional"`
	// Source | Token 来源
	Source *string `json:"source,optional"`
	// Username | 用户名
	Username *string `json:"username,optional"`
	// ExpiredAt | 过期时间
	ExpiredAt *int64 `json:"expiredAt,optional"`
}

// The response data of token list | 令牌列表数据
// swagger:model TokenListResp
type TokenListResp struct {
	BaseDataInfo
	// Token list data | 令牌列表数据
	Data TokenListInfo `json:"data"`
}

// Token list data | Token列表数据
// swagger:model TokenListInfo
type TokenListInfo struct {
	BaseListInfo
	// The API list data | 令牌列表数据
	Data []TokenInfo `json:"data"`
}

// Get token list request params | 令牌列表请求参数
// swagger:model TokenListReq
type TokenListReq struct {
	PageInfo
	// Username | 用户名
	Username *string `json:"username,optional"`
	// Nickname | 昵称
	Nickname *string `json:"nickname,optional"`
	// Email | 邮箱
	Email *string `json:"email,optional"`
	// UUID
	Uuid *string `json:"uuid,optional"`
}

// Token information response | Token信息返回体
// swagger:model TokenInfoResp
type TokenInfoResp struct {
	BaseDataInfo
	// Token information | Token数据
	Data TokenInfo `json:"data"`
}

// The response data of department information | 部门信息
// swagger:model DepartmentInfo
type DepartmentInfo struct {
	BaseIDInfo
	// Translated Name | 展示名称
	Trans string `json:"trans,optional"`
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Sort | 排序
	// max : 10000
	Sort *uint32 `json:"sort,optional" validate:"omitempty,lt=10000"`
	// Name | 部门名称
	// min length : 1
	// max length : 50
	Name *string `json:"name,optional" validate:"omitempty,min=1,max=50"`
	// Ancestors | 父级部门列表
	// max length : 200
	Ancestors *string `json:"ancestors,optional" validate:"omitempty,max=200"`
	// Leader | 部门负责人
	// max length : 20
	Leader *string `json:"leader,optional" validate:"omitempty,max=20"`
	// Phone | 电话号码
	// max length : 18
	Phone *string `json:"phone,optional" validate:"omitempty,max=18"`
	// Email | 邮箱
	// max length : 70
	Email *string `json:"email,optional" validate:"omitempty,max=70"`
	// Remark | 备注
	// max length : 200
	Remark *string `json:"remark,optional" validate:"omitempty,max=200"`
	// ParentId | 父级 ID
	ParentId *uint64 `json:"parentId,optional"`
}

// The response data of department list | 部门列表数据
// swagger:model DepartmentListResp
type DepartmentListResp struct {
	BaseDataInfo
	// Department list data | 部门列表数据
	Data DepartmentListInfo `json:"data"`
}

// Department list data | 部门列表数据
// swagger:model DepartmentListInfo
type DepartmentListInfo struct {
	BaseListInfo
	// The API list data | 部门列表数据
	Data []DepartmentInfo `json:"data"`
}

// Get department list request params | 部门列表请求参数
// swagger:model DepartmentListReq
type DepartmentListReq struct {
	PageInfo
	// Name | 部门名称
	// max length : 50
	Name *string `json:"name,optional" validate:"omitempty,max=50"`
	// Leader | 部门负责人
	// max length : 20
	Leader *string `json:"leader,optional" validate:"omitempty,max=20"`
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
}

// Department information response | 部门信息返回体
// swagger:model DepartmentInfoResp
type DepartmentInfoResp struct {
	BaseDataInfo
	// Department information | 部门数据
	Data DepartmentInfo `json:"data"`
}

// The response data of position information | 职位信息
// swagger:model PositionInfo
type PositionInfo struct {
	BaseIDInfo
	// Translated Name | 展示名称
	Trans string `json:"trans,optional"`
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Sort | 排序
	// max : 10000
	Sort *uint32 `json:"sort,optional" validate:"omitempty,lt=10000"`
	// Name | 职位名称
	// max length : 50
	Name *string `json:"name,optional" validate:"omitempty,max=50"`
	// Code | 职位代码
	// max length : 20
	Code *string `json:"code,optional" validate:"omitempty,max=20"`
	// Remark | 备注
	// max length : 200
	Remark *string `json:"remark,optional" validate:"omitempty,max=200"`
	// DeptId | 部门ID
	DeptId *uint64 `json:"deptId,optional" validate:"omitempty"`
}

// The response data of position list | 职位列表数据
// swagger:model PositionListResp
type PositionListResp struct {
	BaseDataInfo
	// Position list data | 职位列表数据
	Data PositionListInfo `json:"data"`
}

// Position list data | 职位列表数据
// swagger:model PositionListInfo
type PositionListInfo struct {
	BaseListInfo
	// The API list data | 职位列表数据
	Data []PositionInfo `json:"data"`
}

// Get position list request params | 职位列表请求参数
// swagger:model PositionListReq
type PositionListReq struct {
	PageInfo
	// Name | 职位名称
	// max length : 50
	Name *string `json:"name,optional" validate:"omitempty,max=50"`
	// Code | 职位代码
	// max length : 20
	Code *string `json:"code,optional" validate:"omitempty,max=20"`
	// Remark | 备注
	// max length : 200
	Remark *string `json:"remark,optional" validate:"omitempty,max=200"`
	// BelongDeptId | 所属部门ID
	BelongDeptId *uint64 `json:"belongDeptId, optional" validate:"omitempty"`
}

// Position information response | 职位信息返回体
// swagger:model PositionInfoResp
type PositionInfoResp struct {
	BaseDataInfo
	// Position information | 职位数据
	Data PositionInfo `json:"data"`
}

// The response data of dictionary detail information | 字典键值信息
// swagger:model DictionaryDetailInfo
type DictionaryDetailInfo struct {
	BaseIDInfo
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Title | 显示名称
	// max length : 50
	Title *string `json:"title,optional" validate:"omitempty,max=50"`
	// Key | 键
	// max length : 80
	Key *string `json:"key,optional" validate:"omitempty,max=80"`
	// Value | 值
	// max length : 100
	Value *string `json:"value,optional" validate:"omitempty,max=100"`
	// Dictionary ID | 所属字典ID
	DictionaryId *uint64 `json:"dictionaryId,optional"`
	// Sort | 排序
	// max : 10000
	Sort *uint32 `json:"sort,optional" validate:"omitempty,lt=10000"`
	// Title I18n Trans | 标题国际化后
	Trans string `json:"trans,optional"`
	// CssClass | 字典样式
	CssClass *string `json:"cssClass,optional"`
	// ListClass | 字典样式
	ListClass *string `json:"listClass,optional"`
	// IsDefault | 是否为默认值
	IsDefault *uint32 `json:"isDefault,optional"`
}

// The response data of dictionary detail list | 字典键值列表数据
// swagger:model DictionaryDetailListResp
type DictionaryDetailListResp struct {
	BaseDataInfo
	// DictionaryDetail list data | 字典键值列表数据
	Data DictionaryDetailListInfo `json:"data"`
}

// DictionaryDetail list data | 字典键值列表数据
// swagger:model DictionaryDetailListInfo
type DictionaryDetailListInfo struct {
	BaseListInfo
	// The API list data | 字典键值列表数据
	Data []DictionaryDetailInfo `json:"data"`
}

// Get dictionary detail list request params | 字典键值列表请求参数
// swagger:model DictionaryDetailListReq
type DictionaryDetailListReq struct {
	PageInfo
	// Title | 标题
	// max length : 80
	Title *string `json:"name,optional" validate:"omitempty,max=80"`
	// Dictionary ID | 所属字典ID
	DictionaryId *uint64 `json:"dictionaryId,optional"`
}

// DictionaryDetail information response | 字典键值信息返回体
// swagger:model DictionaryDetailInfoResp
type DictionaryDetailInfoResp struct {
	BaseDataInfo
	// DictionaryDetail information | 字典键值数据
	Data DictionaryDetailInfo `json:"data"`
}

// Dictionary name request | 字典名称请求
// swagger:parameters GetDictionaryDetailByDictionaryName
type DictionaryNameReq struct {
	// in:path
	Name *string `json:"name,optional" path:"name"`
}

// The response data of task information | 定时任务信息
// swagger:model TaskInfo
type TaskInfo struct {
	BaseIDInfo
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Name | 任务名称
	// max length : 50
	Name *string `json:"name,optional" validate:"omitempty,max=50"`
	// TaskGroup | 任务分组
	// max length : 40
	TaskGroup *string `json:"taskGroup,optional" validate:"omitempty,max=40"`
	// CronExpression | 定时任务 Cron 表达式
	// max length : 80
	CronExpression *string `json:"cronExpression,optional" validate:"omitempty,max=80"`
	// Pattern | 任务的标识 (用于区分和确定要执行的任务)
	// max length : 100
	Pattern *string `json:"pattern,optional" validate:"omitempty,max=100"`
	// Payload | 任务需要数据(JSON 字符串)
	Payload *string `json:"payload,optional"`
}

// The response data of task list | 定时任务列表数据
// swagger:model TaskListResp
type TaskListResp struct {
	BaseDataInfo
	// Task list data | 定时任务列表数据
	Data TaskListInfo `json:"data"`
}

// Task list data | 定时任务列表数据
// swagger:model TaskListInfo
type TaskListInfo struct {
	BaseListInfo
	// The API list data | 定时任务列表数据
	Data []TaskInfo `json:"data"`
}

// Get task list request params | 定时任务列表请求参数
// swagger:model TaskListReq
type TaskListReq struct {
	PageInfo
	// Name | 任务名称
	Name *string `json:"name,optional"`
	// TaskGroup | 任务分组
	TaskGroup *string `json:"taskGroup,optional"`
}

// Task information response | 定时任务信息返回体
// swagger:model TaskInfoResp
type TaskInfoResp struct {
	BaseDataInfo
	// Task information | 定时任务数据
	Data TaskInfo `json:"data"`
}

// The response data of task log information | 任务日志信息
// swagger:model TaskLogInfo
type TaskLogInfo struct {
	// ID
	Id *uint64 `json:"id"`
	// StartedAt | 任务开始时间
	StartedAt *int64 `json:"startedAt,optional"`
	// FinishedAt | 任务完成时间
	FinishedAt *int64 `json:"finishedAt,optional"`
	// Result | 任务结果
	Result *uint32 `json:"result,optional"`
}

// The response data of task log list | 任务日志列表数据
// swagger:model TaskLogListResp
type TaskLogListResp struct {
	BaseDataInfo
	// TaskLog list data | 任务日志列表数据
	Data TaskLogListInfo `json:"data"`
}

// TaskLog list data | 任务日志列表数据
// swagger:model TaskLogListInfo
type TaskLogListInfo struct {
	BaseListInfo
	// The API list data | 任务日志列表数据
	Data []TaskLogInfo `json:"data"`
}

// Get task log list request params | 任务日志列表请求参数
// swagger:model TaskLogListReq
type TaskLogListReq struct {
	PageInfo
	// TaskId | 任务ID
	TaskId *uint64 `json:"taskId"`
	// Result | 任务结果
	Result *uint32 `json:"result"`
}

// TaskLog information response | 任务日志信息返回体
// swagger:model TaskLogInfoResp
type TaskLogInfoResp struct {
	BaseDataInfo
	// TaskLog information | 任务日志数据
	Data TaskLogInfo `json:"data"`
}

// The response data of email log information | 电子邮件日志信息
// swagger:model EmailLogInfo
type EmailLogInfo struct {
	BaseUUIDInfo
	// Target | 目标邮箱
	Target *string `json:"target,optional"`
	// Subject | 主题
	Subject *string `json:"subject,optional"`
	// Content | 内容
	Content *string `json:"content,optional"`
	// SendStatus | 发送状态
	SendStatus *uint32 `json:"sendStatus,optional"`
	// Provider | 服务提供商
	Provider *string `json:"provider,optional"`
}

// The response data of email log list | 电子邮件日志列表数据
// swagger:model EmailLogListResp
type EmailLogListResp struct {
	BaseDataInfo
	// EmailLog list data | 电子邮件日志列表数据
	Data EmailLogListInfo `json:"data"`
}

// EmailLog list data | 电子邮件日志列表数据
// swagger:model EmailLogListInfo
type EmailLogListInfo struct {
	BaseListInfo
	// The API list data | 电子邮件日志列表数据
	Data []EmailLogInfo `json:"data"`
}

// Get email log list request params | 电子邮件日志列表请求参数
// swagger:model EmailLogListReq
type EmailLogListReq struct {
	PageInfo
	// Target | 目标邮箱
	Target *string `json:"target,optional"`
	// Subject | 主题
	Subject *string `json:"subject,optional"`
	// Provider | 服务提供商
	Provider *string `json:"provider,optional"`
	// Send Status | 发送状态
	SendStatus *uint32 `json:"sendStatus,optional"`
}

// EmailLog information response | 电子邮件日志信息返回体
// swagger:model EmailLogInfoResp
type EmailLogInfoResp struct {
	BaseDataInfo
	// EmailLog information | 电子邮件日志数据
	Data EmailLogInfo `json:"data"`
}

// The response data of sms log information | 短信日志信息
// swagger:model SmsLogInfo
type SmsLogInfo struct {
	BaseUUIDInfo
	// Phone number | 手机号码
	PhoneNumber *string `json:"phoneNumber,optional"`
	// Content | 短信内容
	Content *string `json:"content,optional"`
	// Send status | 发送状态
	SendStatus *uint32 `json:"sendStatus,optional"`
	// Provider | 服务商
	Provider *string `json:"provider,optional"`
}

// The response data of sms log list | 短信日志列表数据
// swagger:model SmsLogListResp
type SmsLogListResp struct {
	BaseDataInfo
	// SmsLog list data | 短信日志列表数据
	Data SmsLogListInfo `json:"data"`
}

// SmsLog list data | 短信日志列表数据
// swagger:model SmsLogListInfo
type SmsLogListInfo struct {
	BaseListInfo
	// The API list data | 短信日志列表数据
	Data []SmsLogInfo `json:"data"`
}

// Get sms log list request params | 短信日志列表请求参数
// swagger:model SmsLogListReq
type SmsLogListReq struct {
	PageInfo
	// Phone number | 手机号码
	PhoneNumber *string `json:"phoneNumber,optional"`
	// Content | 短信内容
	Content *string `json:"content,optional"`
	// Provider | 服务商
	Provider *string `json:"provider,optional"`
	// Send Status | 发送状态
	SendStatus *uint32 `json:"sendStatus,optional"`
}

// SmsLog information response | 短信日志信息返回体
// swagger:model SmsLogInfoResp
type SmsLogInfoResp struct {
	BaseDataInfo
	// SmsLog information | 短信日志数据
	Data SmsLogInfo `json:"data"`
}

// The response data of sms provider information | 短信配置信息
// swagger:model SmsProviderInfo
type SmsProviderInfo struct {
	BaseIDInfo
	// Name | 名称
	Name *string `json:"name,optional"`
	// Secret id | 秘钥 ID
	SecretId *string `json:"secretId,optional"`
	// Secret key | 秘钥 Key
	SecretKey *string `json:"secretKey,optional"`
	// Region | 区域
	Region *string `json:"region,optional"`
	// Is default provider | 是否默认服务商
	IsDefault *bool `json:"isDefault,optional"`
}

// The response data of sms provider list | 短信配置列表数据
// swagger:model SmsProviderListResp
type SmsProviderListResp struct {
	BaseDataInfo
	// SmsProvider list data | 短信配置列表数据
	Data SmsProviderListInfo `json:"data"`
}

// SmsProvider list data | 短信配置列表数据
// swagger:model SmsProviderListInfo
type SmsProviderListInfo struct {
	BaseListInfo
	// The API list data | 短信配置列表数据
	Data []SmsProviderInfo `json:"data"`
}

// Get sms provider list request params | 短信配置列表请求参数
// swagger:model SmsProviderListReq
type SmsProviderListReq struct {
	PageInfo
	// Name | 名称
	Name *string `json:"name,optional"`
}

// SmsProvider information response | 短信配置信息返回体
// swagger:model SmsProviderInfoResp
type SmsProviderInfoResp struct {
	BaseDataInfo
	// SmsProvider information | 短信配置数据
	Data SmsProviderInfo `json:"data"`
}

// The response data of email provider information | 邮箱服务配置信息
// swagger:model EmailProviderInfo
type EmailProviderInfo struct {
	BaseIDInfo
	// Name | 名称
	Name *string `json:"name,optional"`
	// AuthType | 认证类型
	AuthType *uint32 `json:"authType,optional"`
	// Email address | 邮箱地址
	EmailAddr *string `json:"emailAddr,optional"`
	// Password | 密码
	Password *string `json:"password,optional"`
	// HostName | 主机名
	HostName *string `json:"hostName,optional"`
	// Identify | 身份标识
	Identify *string `json:"identify,optional"`
	// Secret | 密钥
	Secret *string `json:"secret,optional"`
	// Port | 端口
	Port *uint32 `json:"port,optional"`
	// Tls | 是否启用TLS
	Tls *bool `json:"tls,optional"`
	// Is default provider | 是否默认
	IsDefault *bool `json:"isDefault,optional"`
}

// The response data of email provider list | 邮箱服务配置列表数据
// swagger:model EmailProviderListResp
type EmailProviderListResp struct {
	BaseDataInfo
	// EmailProvider list data | 邮箱服务配置列表数据
	Data EmailProviderListInfo `json:"data"`
}

// EmailProvider list data | 邮箱服务配置列表数据
// swagger:model EmailProviderListInfo
type EmailProviderListInfo struct {
	BaseListInfo
	// The API list data | 邮箱服务配置列表数据
	Data []EmailProviderInfo `json:"data"`
}

// Get email provider list request params | 邮箱服务配置列表请求参数
// swagger:model EmailProviderListReq
type EmailProviderListReq struct {
	PageInfo
	// Name | 名称
	Name *string `json:"name,optional"`
	// Email address | 邮箱地址
	EmailAddr *string `json:"emailAddr,optional"`
}

// EmailProvider information response | 邮箱服务配置信息返回体
// swagger:model EmailProviderInfoResp
type EmailProviderInfoResp struct {
	BaseDataInfo
	// EmailProvider information | 邮箱服务配置数据
	Data EmailProviderInfo `json:"data"`
}

// swagger:model SendSmsReq
type SendSmsReq struct {
	// Phone number | 电话号码
	PhoneNumber string `json:"phoneNumber"`
	// The parameters | 参数
	Params string `json:"params"`
	// The template ID  | 模板 ID
	TemplateId *string `json:"templateId,optional"`
	// The app ID | App ID
	AppId *string `json:"appId,optional"`
	// The signuture name | 签名名称
	SignName *string `json:"signName,optional"`
	// The email provider | 邮件服务提供商
	Provider *string `json:"provider,optional"`
}

// swagger:model SendEmailReq
type SendEmailReq struct {
	// Target email address | 目标邮箱地址
	Target string `json:"target"`
	// The email subject | 邮件标题
	Subject string `json:"subject"`
	// The email content | 邮件内容
	Content string `json:"content"`
	// The email provider | 邮件服务提供商
	Provider *string `json:"provider,optional"`
}

// The response data of configuration information | 参数配置信息
// swagger:model ConfigurationInfo
type ConfigurationInfo struct {
	BaseIDInfo
	// Sort Number | 排序编号
	Sort *uint32 `json:"sort,optional"`
	// State true: normal false: ban | 状态 true 正常 false 禁用
	State *bool `json:"state,optional"`
	// Configurarion name | 配置名称
	Name *string `json:"name,optional"`
	// Configuration key | 配置的键名
	Key *string `json:"key,optional"`
	// Configuraion value | 配置的值
	Value *string `json:"value,optional"`
	// Configuration category | 配置的分类
	Category *string `json:"category,optional"`
	// Remark | 备注
	Remark *string `json:"remark,optional"`
}

// The response data of configuration list | 参数配置列表数据
// swagger:model ConfigurationListResp
type ConfigurationListResp struct {
	BaseDataInfo
	// Configuration list data | 参数配置列表数据
	Data ConfigurationListInfo `json:"data"`
}

// Configuration list data | 参数配置列表数据
// swagger:model ConfigurationListInfo
type ConfigurationListInfo struct {
	BaseListInfo
	// The API list data | Configuration列表数据
	Data []ConfigurationInfo `json:"data"`
}

// Get configuration list request params | 参数配置列表请求参数
// swagger:model ConfigurationListReq
type ConfigurationListReq struct {
	PageInfo
	// Name
	Name *string `json:"name,optional"`
	// Key
	Key *string `json:"key,optional"`
	// Category
	Category *string `json:"category,optional"`
}

// Configuration information response | 参数配置信息返回体
// swagger:model ConfigurationInfoResp
type ConfigurationInfoResp struct {
	BaseDataInfo
	// Configuration information | 参数配置数据
	Data ConfigurationInfo `json:"data"`
}

// The response data of audit log information | 审计日志信息
// swagger:model AuditLogInfo
type AuditLogInfo struct {
	BaseUUIDInfo
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Tenant ID | 租户ID
	// max length : 36
	TenantId *string `json:"tenantId,optional" validate:"omitempty,max=36"`
	// User ID | 用户ID
	// max length : 36
	UserId *string `json:"userId,optional" validate:"omitempty,max=36"`
	// User name | 用户名
	// max length : 50
	UserName *string `json:"userName,optional" validate:"omitempty,max=50"`
	// Operation type | 操作类型
	OperationType *string `json:"operationType,optional" validate:"omitempty,oneof=CREATE READ UPDATE DELETE"`
	// Resource type | 资源类型
	// max length : 50
	ResourceType *string `json:"resourceType,optional" validate:"omitempty,max=50"`
	// Resource ID | 资源ID
	// max length : 50
	ResourceId *string `json:"resourceId,optional" validate:"omitempty,max=50"`
	// Request method | 请求方法
	// max length : 10
	RequestMethod *string `json:"requestMethod,optional" validate:"omitempty,max=10"`
	// Request path | 请求路径
	// max length : 255
	RequestPath *string `json:"requestPath,optional" validate:"omitempty,max=255"`
	// Request data | 请求数据
	RequestData *string `json:"requestData,optional"`
	// Response status | 响应状态
	ResponseStatus *int32 `json:"responseStatus,optional"`
	// Response data | 响应数据
	ResponseData *string `json:"responseData,optional"`
	// IP address | IP地址
	// max length : 45
	IpAddress *string `json:"ipAddress,optional" validate:"omitempty,max=45"`
	// User agent | 用户代理
	// max length : 512
	UserAgent *string `json:"userAgent,optional" validate:"omitempty,max=512"`
	// Duration in milliseconds | 耗时(毫秒)
	DurationMs *int64 `json:"durationMs,optional"`
	// Error message | 错误信息
	ErrorMessage *string `json:"errorMessage,optional"`
	// Metadata | 元数据
	Metadata map[string]interface{} `json:"metadata,optional"`
}

// The response data of audit log list | 审计日志列表数据
// swagger:model AuditLogListResp
type AuditLogListResp struct {
	BaseDataInfo
	// Audit log list | 审计日志列表
	Data AuditLogListInfo `json:"data"`
}

// The data of audit log list | 审计日志列表数据
// swagger:model AuditLogListInfo
type AuditLogListInfo struct {
	BaseListInfo
	// The API list data | 审计日志列表数据
	Data []AuditLogInfo `json:"data"`
}

// Get audit log list request params | 审计日志列表请求参数
// swagger:model AuditLogListReq
type AuditLogListReq struct {
	PageInfo
	// User ID | 用户ID
	// max length : 36
	UserId *string `json:"userId,optional" validate:"omitempty,max=36"`
	// User name | 用户名
	// max length : 50
	UserName *string `json:"userName,optional" validate:"omitempty,max=50"`
	// Operation type | 操作类型
	OperationType *string `json:"operationType,optional" validate:"omitempty,oneof=CREATE READ UPDATE DELETE"`
	// Resource type | 资源类型
	// max length : 50
	ResourceType *string `json:"resourceType,optional" validate:"omitempty,max=50"`
	// Resource ID | 资源ID
	// max length : 50
	ResourceId *string `json:"resourceId,optional" validate:"omitempty,max=50"`
	// Request method | 请求方法
	// max length : 10
	RequestMethod *string `json:"requestMethod,optional" validate:"omitempty,max=10"`
	// Request path | 请求路径
	// max length : 255
	RequestPath *string `json:"requestPath,optional" validate:"omitempty,max=255"`
	// IP address | IP地址
	// max length : 45
	IpAddress *string `json:"ipAddress,optional" validate:"omitempty,max=45"`
	// Response status | 响应状态
	ResponseStatus *int32 `json:"responseStatus,optional"`
	// Start time | 开始时间
	StartTime *int64 `json:"startTime,optional"`
	// End time | 结束时间
	EndTime *int64 `json:"endTime,optional"`
	// Min duration (ms) | 最小耗时(毫秒)
	MinDuration *int64 `json:"minDuration,optional"`
	// Max duration (ms) | 最大耗时(毫秒)
	MaxDuration *int64 `json:"maxDuration,optional"`
}

// Get audit log by ID request params | 通过ID获取审计日志请求参数
// swagger:model AuditLogReq
type AuditLogReq struct {
	UUIDReq
}

// The response data when create or update audit log | 创建或更新审计日志时返回的数据
// swagger:model AuditLogResp
type AuditLogResp struct {
	BaseDataInfo
	// Audit log information | 审计日志信息
	Data AuditLogInfo `json:"data"`
}

// Audit log statistics request params | 审计日志统计请求参数
// swagger:model AuditLogStatsReq
type AuditLogStatsReq struct {
	// Start time | 开始时间
	StartTime *int64 `json:"startTime,optional"`
	// End time | 结束时间
	EndTime *int64 `json:"endTime,optional"`
	// Group by field | 分组字段
	GroupBy *string `json:"groupBy,optional" validate:"omitempty,oneof=operation_type resource_type user_id response_status ip_address"`
}

// Audit log statistics response | 审计日志统计响应
// swagger:model AuditLogStatsResp
type AuditLogStatsResp struct {
	BaseDataInfo
	// Statistics data | 统计数据
	Data []AuditLogStatsItem `json:"data"`
}

// Audit log statistics item | 审计日志统计项
type AuditLogStatsItem struct {
	// Label | 标签
	Label string `json:"label"`
	// Count | 数量
	Count int64 `json:"count"`
	// Percentage | 百分比
	Percentage float64 `json:"percentage"`
}

// The response data of tenant information | 租户信息
// swagger:model TenantInfo
type TenantInfo struct {
	BaseIDInfo
	// Status | 状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Tenant Name | 租户名称
	// max length : 100
	Name *string `json:"name,optional" validate:"omitempty,max=100"`
	// Tenant Code | 租户标识码
	// max length : 50
	Code *string `json:"code,optional" validate:"omitempty,max=50"`
	// Description | 描述
	// max length : 255
	Description *string `json:"description,optional" validate:"omitempty,max=255"`
	// Expired Time | 过期时间
	ExpiredAt *int64 `json:"expiredAt,optional"`
	// Configuration | 配置信息 (JSON格式)
	Config *string `json:"config,optional"`
	// Created By | 创建者ID
	CreatedBy *uint64 `json:"createdBy,optional"`
}

// The response data of tenant list | 租户列表数据
// swagger:model TenantListResp
type TenantListResp struct {
	BaseDataInfo
	// Tenant list data | 租户列表数据
	Data TenantListInfo `json:"data"`
}

// Tenant list data | 租户列表数据
// swagger:model TenantListInfo
type TenantListInfo struct {
	BaseListInfo
	// The tenant list data | 租户列表数据
	Data []TenantInfo `json:"data"`
}

// Get tenant list request params | 租户列表请求参数
// swagger:model TenantListReq
type TenantListReq struct {
	PageInfo
	// Tenant Name | 租户名称
	// max length : 100
	Name *string `json:"name,optional" validate:"omitempty,max=100"`
	// Tenant Code | 租户标识码
	// max length : 50
	Code *string `json:"code,optional" validate:"omitempty,max=50"`
	// Status | 状态
	Status *uint32 `json:"status,optional"`
	// Created By | 创建者ID
	CreatedBy *uint64 `json:"createdBy,optional"`
}

// Tenant information response | 租户信息返回体
// swagger:model TenantInfoResp
type TenantInfoResp struct {
	BaseDataInfo
	// Tenant information | 租户数据
	Data TenantInfo `json:"data"`
}

// Get tenant by code request | 根据租户码获取租户请求
// swagger:model TenantCodeReq
type TenantCodeReq struct {
	// Tenant Code | 租户标识码
	// required : true
	// max length : 50
	Code string `json:"code" validate:"required,max=50"`
}

// Update tenant status request | 更新租户状态请求
// swagger:model TenantStatusReq
type TenantStatusReq struct {
	// Tenant ID | 租户ID
	// required : true
	Id uint64 `json:"id" validate:"required"`
	// Status | 状态
	// required : true
	// max : 20
	Status uint32 `json:"status" validate:"required,lt=20"`
}

// Initialize tenant request | 初始化租户请求
// swagger:model TenantInitReq
type TenantInitReq struct {
	// Tenant ID | 租户ID
	// required : true
	TenantId uint64 `json:"tenantId" validate:"required"`
	// Admin Username | 管理员用户名
	AdminUsername *string `json:"adminUsername,optional" validate:"omitempty,max=50"`
	// Admin Password | 管理员密码
	AdminPassword *string `json:"adminPassword,optional" validate:"omitempty,min=6,max=30"`
	// Admin Email | 管理员邮箱
	AdminEmail *string `json:"adminEmail,optional" validate:"omitempty,email,max=100"`
}

// Public tenant information | 公开租户信息
// swagger:model PublicTenantInfo
type PublicTenantInfo struct {
	// Tenant ID | 租户ID
	TenantId string `json:"tenantId"`
	// Company Name | 公司名称/租户名称
	CompanyName string `json:"companyName"`
	// Domain | 绑定域名(可选)
	Domain *string `json:"domain,optional"`
}

// Public tenant list response | 公开租户列表响应
// swagger:model PublicTenantListResp
type PublicTenantListResp struct {
	BaseDataInfo
	// Tenant enabled | 是否启用租户
	TenantEnabled bool `json:"tenantEnabled"`
	// Tenant list data | 租户列表数据
	VoList []PublicTenantInfo `json:"voList"`
}

// Dynamic tenant switch request | 动态租户切换请求
// swagger:model TenantSwitchReq
type TenantSwitchReq struct {
	// Target Tenant ID | 目标租户ID
	// required : true
	TenantId string `json:"tenantId" validate:"required"`
}

// Current active tenant response | 当前激活租户响应
// swagger:model CurrentTenantResp
type CurrentTenantResp struct {
	BaseDataInfo
	// Original Tenant ID | 原始租户ID
	OriginalTenantId string `json:"originalTenantId"`
	// Active Tenant ID | 当前激活租户ID
	ActiveTenantId string `json:"activeTenantId"`
	// Active Tenant Info | 激活租户信息
	ActiveTenantInfo *TenantInfo `json:"activeTenantInfo,optional"`
	// Is Switched | 是否已切换
	IsSwitched bool `json:"isSwitched"`
}

// The response data of Casbin rule information | Casbin权限规则信息
// swagger:model CasbinRuleInfo
type CasbinRuleInfo struct {
	BaseIDInfo
	// Tenant ID | 租户ID
	TenantId *uint64 `json:"tenantId,optional"`
	// Policy type: p, g, g2, etc. | 策略类型: p, g, g2等
	// required : true
	// max length : 10
	Ptype string `json:"ptype" validate:"required,max=10"`
	// Subject: user ID, role code | 主体: 用户ID、角色代码
	// max length : 100
	V0 *string `json:"v0,optional" validate:"omitempty,max=100"`
	// Object: resource path, API endpoint | 资源: 资源路径、API端点
	// max length : 100
	V1 *string `json:"v1,optional" validate:"omitempty,max=100"`
	// Action: read, write, delete, etc. | 操作: read, write, delete等
	// max length : 50
	V2 *string `json:"v2,optional" validate:"omitempty,max=50"`
	// Effect: allow, deny | 效果: allow, deny
	// max length : 50
	V3 *string `json:"v3,optional" validate:"omitempty,max=50"`
	// Condition expression: JSON format | 条件表达式: JSON格式
	// max length : 500
	V4 *string `json:"v4,optional" validate:"omitempty,max=500"`
	// Priority: numeric string | 优先级: 数值字符串
	// max length : 20
	V5 *string `json:"v5,optional" validate:"omitempty,max=20"`
	// Service name: core, cmdb, workflow, etc. | 服务名称: core, cmdb, workflow等
	// required : true
	// max length : 50
	ServiceName string `json:"serviceName" validate:"required,max=50"`
	// Rule name: for identification | 规则名称: 便于识别
	// max length : 100
	RuleName *string `json:"ruleName,optional" validate:"omitempty,max=100"`
	// Rule description | 规则描述
	// max length : 500
	Description *string `json:"description,optional" validate:"omitempty,max=500"`
	// Rule category: system, business, custom | 规则分类: system, business, custom
	// max length : 50
	Category *string `json:"category,optional" validate:"omitempty,max=50"`
	// Rule version | 规则版本
	// max length : 20
	Version *string `json:"version,optional" validate:"omitempty,max=20"`
	// Require approval | 是否需要审批
	RequireApproval *bool `json:"requireApproval,optional"`
	// Approval status: pending, approved, rejected | 审批状态: pending, approved, rejected
	// max length : 20
	ApprovalStatus *string `json:"approvalStatus,optional" validate:"omitempty,max=20"`
	// Approved by user ID | 审批人ID
	ApprovedBy *uint64 `json:"approvedBy,optional"`
	// Approval time | 审批时间
	ApprovedAt *int64 `json:"approvedAt,optional"`
	// Effective from time | 生效开始时间
	EffectiveFrom *int64 `json:"effectiveFrom,optional"`
	// Effective to time | 生效结束时间
	EffectiveTo *int64 `json:"effectiveTo,optional"`
	// Is temporary permission | 是否为临时权限
	IsTemporary *bool `json:"isTemporary,optional"`
	// Status | 规则状态
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Metadata JSON string | 元数据JSON字符串
	// max length : 1000
	Metadata *string `json:"metadata,optional" validate:"omitempty,max=1000"`
	// Tags list | 标签列表
	Tags []string `json:"tags,optional"`
	// Usage count | 使用次数统计
	UsageCount *int64 `json:"usageCount,optional"`
	// Last used time | 最后使用时间
	LastUsedAt *int64 `json:"lastUsedAt,optional"`
}

// Get Casbin rule list request params | Casbin规则列表请求参数
// swagger:model CasbinRuleListReq
type CasbinRuleListReq struct {
	PageInfo
	// Service name filter | 按服务名称过滤
	// max length : 50
	ServiceName *string `json:"serviceName,optional" validate:"omitempty,max=50"`
	// Policy type filter | 按策略类型过滤
	// max length : 10
	Ptype *string `json:"ptype,optional" validate:"omitempty,max=10"`
	// Subject filter | 按主体过滤
	// max length : 100
	V0 *string `json:"v0,optional" validate:"omitempty,max=100"`
	// Object filter | 按资源过滤
	// max length : 100
	V1 *string `json:"v1,optional" validate:"omitempty,max=100"`
	// Status filter | 按状态过滤
	// max : 20
	Status *uint32 `json:"status,optional" validate:"omitempty,lt=20"`
	// Approval status filter | 按审批状态过滤
	// max length : 20
	ApprovalStatus *string `json:"approvalStatus,optional" validate:"omitempty,max=20"`
	// Category filter | 按分类过滤
	// max length : 50
	Category *string `json:"category,optional" validate:"omitempty,max=50"`
	// Temporary permission filter | 按临时权限过滤
	IsTemporary *bool `json:"isTemporary,optional"`
	// Effective time range start | 生效时间范围开始
	EffectiveFromStart *int64 `json:"effectiveFromStart,optional"`
	// Effective time range end | 生效时间范围结束
	EffectiveFromEnd *int64 `json:"effectiveFromEnd,optional"`
	// Search keyword | 关键词搜索(规则名称、描述)
	// max length : 100
	Keyword *string `json:"keyword,optional" validate:"omitempty,max=100"`
	// Order by field | 排序字段
	// max length : 50
	OrderBy *string `json:"orderBy,optional" validate:"omitempty,max=50"`
	// Order direction: asc, desc | 排序方向: asc, desc
	OrderDirection *string `json:"orderDirection,optional" validate:"omitempty,oneof=asc desc"`
}

// Casbin rule list data | Casbin规则列表数据
// swagger:model CasbinRuleListInfo
type CasbinRuleListInfo struct {
	BaseListInfo
	// The Casbin rule list data | Casbin规则列表数据
	Data []CasbinRuleInfo `json:"data"`
}

// The response data of Casbin rule list | Casbin规则列表数据
// swagger:model CasbinRuleListResp
type CasbinRuleListResp struct {
	BaseDataInfo
	// Casbin rule list data | Casbin规则列表数据
	Data CasbinRuleListInfo `json:"data"`
}

// Casbin rule information response | Casbin规则信息返回体
// swagger:model CasbinRuleInfoResp
type CasbinRuleInfoResp struct {
	BaseDataInfo
	// Casbin rule information | Casbin规则数据
	Data CasbinRuleInfo `json:"data"`
}

// Batch create Casbin rules request | 批量创建Casbin规则请求
// swagger:model BatchCreateCasbinRulesReq
type BatchCreateCasbinRulesReq struct {
	// Rules list | 规则列表
	// required : true
	Rules []CasbinRuleInfo `json:"rules" validate:"required,dive"`
}

// Batch update Casbin rules request | 批量更新Casbin规则请求
// swagger:model BatchUpdateCasbinRulesReq
type BatchUpdateCasbinRulesReq struct {
	// Rules list | 规则列表
	// required : true
	Rules []CasbinRuleInfo `json:"rules" validate:"required,dive"`
}

// Permission check request | 权限检查请求
// swagger:model PermissionCheckReq
type PermissionCheckReq struct {
	// Service name | 服务名称
	// required : true
	// max length : 50
	ServiceName string `json:"serviceName" validate:"required,max=50"`
	// Subject: user ID or role | 主体: 用户ID或角色
	// required : true
	// max length : 100
	Subject string `json:"subject" validate:"required,max=100"`
	// Object: resource path | 资源: 资源路径
	// required : true
	// max length : 100
	Object string `json:"object" validate:"required,max=100"`
	// Action: operation type | 操作: 操作类型
	// required : true
	// max length : 50
	Action string `json:"action" validate:"required,max=50"`
	// Context information | 上下文信息
	Context map[string]string `json:"context,optional"`
	// Enable cache | 是否启用缓存
	EnableCache *bool `json:"enableCache,optional"`
	// Audit log | 是否记录审计日志
	AuditLog *bool `json:"auditLog,optional"`
}

// Permission check response | 权限检查响应
// swagger:model PermissionCheckResp
type PermissionCheckResp struct {
	BaseDataInfo
	// Permission check result | 权限检查结果
	Data PermissionCheckResult `json:"data"`
}

// Permission check result | 权限检查结果
type PermissionCheckResult struct {
	// Is allowed | 是否允许
	Allowed bool `json:"allowed"`
	// Reason | 原因说明
	Reason string `json:"reason"`
	// Applied rules | 应用的规则ID列表
	AppliedRules []string `json:"appliedRules"`
	// Data filters | 数据过滤条件
	DataFilters map[string]string `json:"dataFilters"`
	// Field masks | 字段掩码列表
	FieldMasks []string `json:"fieldMasks"`
	// Check duration in milliseconds | 检查耗时(毫秒)
	CheckDurationMs int64 `json:"checkDurationMs"`
	// From cache | 是否来自缓存
	FromCache bool `json:"fromCache"`
}

// Batch permission check request | 批量权限检查请求
// swagger:model BatchPermissionCheckReq
type BatchPermissionCheckReq struct {
	// Permission requests | 权限请求列表
	// required : true
	Requests []PermissionCheckReq `json:"requests" validate:"required,dive"`
	// Fail fast | 是否快速失败
	FailFast *bool `json:"failFast,optional"`
}

// Batch permission check response | 批量权限检查响应
// swagger:model BatchPermissionCheckResp
type BatchPermissionCheckResp struct {
	BaseDataInfo
	// Batch check result | 批量检查结果
	Data BatchPermissionCheckResult `json:"data"`
}

// Batch permission check result | 批量权限检查结果
type BatchPermissionCheckResult struct {
	// Permission responses | 权限响应列表
	Responses []PermissionCheckResult `json:"responses"`
	// Success count | 成功数量
	SuccessCount int32 `json:"successCount"`
	// Failed count | 失败数量
	FailedCount int32 `json:"failedCount"`
}

// Get user permission summary request | 获取用户权限摘要请求
// swagger:model UserPermissionSummaryReq
type UserPermissionSummaryReq struct {
	// User ID | 用户ID
	// required : true
	// max length : 100
	UserId string `json:"userId" validate:"required,max=100"`
	// Service name | 服务名称
	// max length : 50
	ServiceName *string `json:"serviceName,optional" validate:"omitempty,max=50"`
	// Include inherited permissions | 是否包含继承权限
	IncludeInherited *bool `json:"includeInherited,optional"`
}

// User permission summary response | 用户权限摘要响应
// swagger:model UserPermissionSummaryResp
type UserPermissionSummaryResp struct {
	BaseDataInfo
	// Permission summary | 权限摘要数据
	Data UserPermissionSummary `json:"data"`
}

// User permission summary | 用户权限摘要
type UserPermissionSummary struct {
	// User ID | 用户ID
	UserId string `json:"userId"`
	// Permissions | 权限列表
	Permissions []PermissionSummary `json:"permissions"`
	// Total count | 总数量
	TotalCount int32 `json:"totalCount"`
}

// Permission summary | 权限摘要信息
type PermissionSummary struct {
	// Resource | 资源
	Resource string `json:"resource"`
	// Actions | 操作列表
	Actions []string `json:"actions"`
	// Source: direct, inherited | 权限来源: direct, inherited
	Source string `json:"source"`
	// Rule ID | 规则ID
	RuleId *string `json:"ruleId,optional"`
}

// Validate Casbin rule request | 权限规则验证请求
// swagger:model ValidateCasbinRuleReq
type ValidateCasbinRuleReq struct {
	// Rule to validate | 待验证的规则
	// required : true
	Rule CasbinRuleInfo `json:"rule" validate:"required"`
	// Check conflicts | 是否检查冲突
	CheckConflicts *bool `json:"checkConflicts,optional"`
}

// Validate Casbin rule response | 权限规则验证响应
// swagger:model ValidateCasbinRuleResp
type ValidateCasbinRuleResp struct {
	BaseDataInfo
	// Validation result | 验证结果
	Data ValidationResult `json:"data"`
}

// Validation result | 验证结果
type ValidationResult struct {
	// Is valid | 是否有效
	Valid bool `json:"valid"`
	// Validation errors | 验证错误列表
	Errors []string `json:"errors"`
	// Warning messages | 警告信息列表
	Warnings []string `json:"warnings"`
	// Conflict rule IDs | 冲突规则ID列表
	Conflicts []string `json:"conflicts"`
}

// Sync Casbin rules request | 规则同步请求
// swagger:model SyncCasbinRulesReq
type SyncCasbinRulesReq struct {
	// Service name filter | 同步指定服务的规则，为空则同步所有
	// max length : 50
	ServiceName *string `json:"serviceName,optional" validate:"omitempty,max=50"`
	// Force reload | 是否强制重新加载
	ForceReload *bool `json:"forceReload,optional"`
}

// Sync Casbin rules response | 规则同步响应
// swagger:model SyncCasbinRulesResp
type SyncCasbinRulesResp struct {
	BaseDataInfo
	// Sync result | 同步结果
	Data SyncResult `json:"data"`
}

// Sync result | 同步结果
type SyncResult struct {
	// Synced count | 同步的规则数量
	SyncedCount int32 `json:"syncedCount"`
	// Synced services | 同步的服务列表
	SyncedServices []string `json:"syncedServices"`
	// Sync duration in milliseconds | 同步耗时
	SyncDurationMs int64 `json:"syncDurationMs"`
}

// Refresh Casbin cache request | 刷新缓存请求
// swagger:model RefreshCasbinCacheReq
type RefreshCasbinCacheReq struct {
	// Cache type: rule, decision, all | 缓存类型: rule, decision, all
	CacheType *string `json:"cacheType,optional" validate:"omitempty,oneof=rule decision all"`
	// Service name | 指定服务
	// max length : 50
	ServiceName *string `json:"serviceName,optional" validate:"omitempty,max=50"`
}

// Refresh Casbin cache response | 刷新缓存响应
// swagger:model RefreshCasbinCacheResp
type RefreshCasbinCacheResp struct {
	BaseDataInfo
	// Refresh result | 刷新结果
	Data RefreshCacheResult `json:"data"`
}

// Refresh cache result | 刷新缓存结果
type RefreshCacheResult struct {
	// Success | 是否成功
	Success bool `json:"success"`
	// Message | 消息
	Message string `json:"message"`
	// Cleared entries | 清理的缓存条目数
	ClearedEntries int32 `json:"clearedEntries"`
}
