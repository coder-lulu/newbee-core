syntax = "proto3";

// OauthProvider message

message OauthProviderInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string name = 4;
  optional string client_id = 5;
  optional string client_secret = 6;
  optional string redirect_url = 7;
  optional string scopes = 8;
  optional string auth_url = 9;
  optional string token_url = 10;
  optional uint64 auth_style = 11;
  optional string info_url = 12;
  // Enhanced fields from OAuth refactor
  optional string display_name = 13;
  optional string type = 14;
  optional string provider_type = 15;
  optional string encrypted_secret = 16;
  optional string encryption_key_id = 17;
  optional string extra_config = 18;  // JSON string representation
  optional bool enabled = 19;
  optional uint32 sort = 20;
  optional string remark = 21;
  optional bool support_pkce = 22;
  optional string icon_url = 23;
  optional int32 cache_ttl = 24;
  optional string webhook_url = 25;
  optional int32 success_count = 26;
  optional int32 failure_count = 27;
  optional int64 last_used_at = 28;
  // Tenant and status fields from mixins (for completeness)
  optional uint32 status = 29;
  optional uint64 tenant_id = 30;
}

message OauthProviderListResp {
  uint64 total = 1;
  repeated OauthProviderInfo data = 2;
}

message OauthProviderListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
}

message CallbackReq {
  string state = 1;
  string code = 2;
}

message OauthLoginReq {
  string state = 1;
  string provider = 2;
}

message OauthRedirectResp {
  string url = 1;
}

// OAuth Account Binding messages
message OauthAccountInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string user_id = 4;
  optional uint64 provider_id = 5;
  optional string provider_type = 6;
  optional string provider_user_id = 7;
  optional string provider_username = 8;
  optional string provider_nickname = 9;
  optional string provider_email = 10;
  optional string provider_avatar = 11;
  optional string access_token = 12;
  optional string refresh_token = 13;
  optional int64 token_expires_at = 14;
  optional string extra_data = 15;  // JSON string
  optional int64 last_login_at = 16;
  optional string last_login_ip = 17;
  optional uint32 login_count = 18;
  optional uint32 status = 19;
  optional uint64 tenant_id = 20;
}

message BindOauthAccountReq {
  string user_id = 1;
  string provider_type = 2;
  uint64 provider_id = 3;
  string authorization_code = 4;
  string state = 5;
}

message UnbindOauthAccountReq {
  string user_id = 1;
  uint64 provider_id = 2;
}

message GetUserOauthAccountsReq {
  string user_id = 1;
  uint64 page = 2;
  uint64 page_size = 3;
}

message GetUserOauthAccountsResp {
  uint64 total = 1;
  repeated OauthAccountInfo data = 2;
}

message OauthAccountListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string provider_type = 3;
  optional uint64 provider_id = 4;
  optional string user_id = 5;
}

message OauthAccountListResp {
  uint64 total = 1;
  repeated OauthAccountInfo data = 2;
}

// OAuth Session messages
message OauthSessionInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string session_id = 4;
  optional string state = 5;
  optional uint64 provider_id = 6;
  optional string user_id = 7;
  optional string redirect_uri = 8;
  optional string scope = 9;
  optional string code_challenge = 10;
  optional string code_challenge_method = 11;
  optional string code_verifier = 12;
  optional int64 expires_at = 13;
  optional string client_ip = 14;
  optional string user_agent = 15;
  optional string authorization_code = 16;
  optional int64 code_received_at = 17;
  optional string callback_data = 18;  // JSON string
  optional string error_code = 19;
  optional string error_description = 20;
  optional int32 retry_count = 21;
  optional uint32 status = 22;
  optional uint64 tenant_id = 23;
}

message CreateOauthSessionReq {
  string state = 1;
  uint64 provider_id = 2;
  optional string user_id = 3;
  string redirect_uri = 4;
  optional string scope = 5;
  optional string code_challenge = 6;
  optional string code_challenge_method = 7;
  optional string code_verifier = 8;
  int64 expires_at = 9;
  optional string client_ip = 10;
  optional string user_agent = 11;
}

message UpdateOauthSessionReq {
  string session_id = 1;
  optional string authorization_code = 2;
  optional string callback_data = 3;  // JSON string
  optional string error_code = 4;
  optional string error_description = 5;
}

message GetOauthSessionByStateReq {
  string state = 1;
}

service Core {

  // OauthProvider management
  // group: oauthprovider
  rpc createOauthProvider (OauthProviderInfo) returns (BaseIDResp);
  // group: oauthprovider
  rpc updateOauthProvider (OauthProviderInfo) returns (BaseResp);
  // group: oauthprovider
  rpc getOauthProviderList (OauthProviderListReq) returns (OauthProviderListResp);
  // group: oauthprovider
  rpc getOauthProviderById (IDReq) returns (OauthProviderInfo);
  // group: oauthprovider
  rpc deleteOauthProvider (IDsReq) returns (BaseResp);
  // group: oauthprovider
  rpc oauthLogin (OauthLoginReq) returns (OauthRedirectResp);
  // group: oauthprovider
  rpc oauthCallback (CallbackReq) returns (UserInfo);

  // OAuth Account Binding management
  // group: oauthaccount
  rpc createOauthAccount (OauthAccountInfo) returns (BaseIDResp);
  // group: oauthaccount
  rpc updateOauthAccount (OauthAccountInfo) returns (BaseResp);
  // group: oauthaccount
  rpc getOauthAccountList (OauthAccountListReq) returns (OauthAccountListResp);
  // group: oauthaccount
  rpc getOauthAccountById (IDReq) returns (OauthAccountInfo);
  // group: oauthaccount
  rpc deleteOauthAccount (IDsReq) returns (BaseResp);
  // group: oauthaccount
  rpc bindOauthAccount (BindOauthAccountReq) returns (BaseResp);
  // group: oauthaccount
  rpc unbindOauthAccount (UnbindOauthAccountReq) returns (BaseResp);
  // group: oauthaccount
  rpc getUserOauthAccounts (GetUserOauthAccountsReq) returns (GetUserOauthAccountsResp);

  // OAuth Session management
  // group: oauthsession
  rpc createOauthSession (CreateOauthSessionReq) returns (BaseIDResp);
  // group: oauthsession
  rpc updateOauthSession (UpdateOauthSessionReq) returns (BaseResp);
  // group: oauthsession
  rpc getOauthSessionByState (GetOauthSessionByStateReq) returns (OauthSessionInfo);
  // group: oauthsession
  rpc deleteOauthSession (IDReq) returns (BaseResp);

}