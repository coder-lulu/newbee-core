// Code generated by ent, DO NOT EDIT.

package casbinrule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldStatus, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldTenantID, v))
}

// Ptype applies equality check predicate on the "ptype" field. It's identical to PtypeEQ.
func Ptype(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldPtype, v))
}

// V0 applies equality check predicate on the "v0" field. It's identical to V0EQ.
func V0(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV0, v))
}

// V1 applies equality check predicate on the "v1" field. It's identical to V1EQ.
func V1(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV1, v))
}

// V2 applies equality check predicate on the "v2" field. It's identical to V2EQ.
func V2(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV2, v))
}

// V3 applies equality check predicate on the "v3" field. It's identical to V3EQ.
func V3(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV3, v))
}

// V4 applies equality check predicate on the "v4" field. It's identical to V4EQ.
func V4(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV4, v))
}

// V5 applies equality check predicate on the "v5" field. It's identical to V5EQ.
func V5(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV5, v))
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldServiceName, v))
}

// RuleName applies equality check predicate on the "rule_name" field. It's identical to RuleNameEQ.
func RuleName(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldRuleName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldDescription, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldCategory, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldVersion, v))
}

// RequireApproval applies equality check predicate on the "require_approval" field. It's identical to RequireApprovalEQ.
func RequireApproval(v bool) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldRequireApproval, v))
}

// ApprovedBy applies equality check predicate on the "approved_by" field. It's identical to ApprovedByEQ.
func ApprovedBy(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedAt applies equality check predicate on the "approved_at" field. It's identical to ApprovedAtEQ.
func ApprovedAt(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldApprovedAt, v))
}

// EffectiveFrom applies equality check predicate on the "effective_from" field. It's identical to EffectiveFromEQ.
func EffectiveFrom(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldEffectiveFrom, v))
}

// EffectiveTo applies equality check predicate on the "effective_to" field. It's identical to EffectiveToEQ.
func EffectiveTo(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldEffectiveTo, v))
}

// IsTemporary applies equality check predicate on the "is_temporary" field. It's identical to IsTemporaryEQ.
func IsTemporary(v bool) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldIsTemporary, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldMetadata, v))
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldTags, v))
}

// UsageCount applies equality check predicate on the "usage_count" field. It's identical to UsageCountEQ.
func UsageCount(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldUsageCount, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldLastUsedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldStatus))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldTenantID, v))
}

// PtypeEQ applies the EQ predicate on the "ptype" field.
func PtypeEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldPtype, v))
}

// PtypeNEQ applies the NEQ predicate on the "ptype" field.
func PtypeNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldPtype, v))
}

// PtypeIn applies the In predicate on the "ptype" field.
func PtypeIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldPtype, vs...))
}

// PtypeNotIn applies the NotIn predicate on the "ptype" field.
func PtypeNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldPtype, vs...))
}

// PtypeGT applies the GT predicate on the "ptype" field.
func PtypeGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldPtype, v))
}

// PtypeGTE applies the GTE predicate on the "ptype" field.
func PtypeGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldPtype, v))
}

// PtypeLT applies the LT predicate on the "ptype" field.
func PtypeLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldPtype, v))
}

// PtypeLTE applies the LTE predicate on the "ptype" field.
func PtypeLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldPtype, v))
}

// PtypeContains applies the Contains predicate on the "ptype" field.
func PtypeContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldPtype, v))
}

// PtypeHasPrefix applies the HasPrefix predicate on the "ptype" field.
func PtypeHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldPtype, v))
}

// PtypeHasSuffix applies the HasSuffix predicate on the "ptype" field.
func PtypeHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldPtype, v))
}

// PtypeEqualFold applies the EqualFold predicate on the "ptype" field.
func PtypeEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldPtype, v))
}

// PtypeContainsFold applies the ContainsFold predicate on the "ptype" field.
func PtypeContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldPtype, v))
}

// V0EQ applies the EQ predicate on the "v0" field.
func V0EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV0, v))
}

// V0NEQ applies the NEQ predicate on the "v0" field.
func V0NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldV0, v))
}

// V0In applies the In predicate on the "v0" field.
func V0In(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldV0, vs...))
}

// V0NotIn applies the NotIn predicate on the "v0" field.
func V0NotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldV0, vs...))
}

// V0GT applies the GT predicate on the "v0" field.
func V0GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldV0, v))
}

// V0GTE applies the GTE predicate on the "v0" field.
func V0GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldV0, v))
}

// V0LT applies the LT predicate on the "v0" field.
func V0LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldV0, v))
}

// V0LTE applies the LTE predicate on the "v0" field.
func V0LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldV0, v))
}

// V0Contains applies the Contains predicate on the "v0" field.
func V0Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldV0, v))
}

// V0HasPrefix applies the HasPrefix predicate on the "v0" field.
func V0HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldV0, v))
}

// V0HasSuffix applies the HasSuffix predicate on the "v0" field.
func V0HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldV0, v))
}

// V0IsNil applies the IsNil predicate on the "v0" field.
func V0IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldV0))
}

// V0NotNil applies the NotNil predicate on the "v0" field.
func V0NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldV0))
}

// V0EqualFold applies the EqualFold predicate on the "v0" field.
func V0EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldV0, v))
}

// V0ContainsFold applies the ContainsFold predicate on the "v0" field.
func V0ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldV0, v))
}

// V1EQ applies the EQ predicate on the "v1" field.
func V1EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV1, v))
}

// V1NEQ applies the NEQ predicate on the "v1" field.
func V1NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldV1, v))
}

// V1In applies the In predicate on the "v1" field.
func V1In(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldV1, vs...))
}

// V1NotIn applies the NotIn predicate on the "v1" field.
func V1NotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldV1, vs...))
}

// V1GT applies the GT predicate on the "v1" field.
func V1GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldV1, v))
}

// V1GTE applies the GTE predicate on the "v1" field.
func V1GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldV1, v))
}

// V1LT applies the LT predicate on the "v1" field.
func V1LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldV1, v))
}

// V1LTE applies the LTE predicate on the "v1" field.
func V1LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldV1, v))
}

// V1Contains applies the Contains predicate on the "v1" field.
func V1Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldV1, v))
}

// V1HasPrefix applies the HasPrefix predicate on the "v1" field.
func V1HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldV1, v))
}

// V1HasSuffix applies the HasSuffix predicate on the "v1" field.
func V1HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldV1, v))
}

// V1IsNil applies the IsNil predicate on the "v1" field.
func V1IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldV1))
}

// V1NotNil applies the NotNil predicate on the "v1" field.
func V1NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldV1))
}

// V1EqualFold applies the EqualFold predicate on the "v1" field.
func V1EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldV1, v))
}

// V1ContainsFold applies the ContainsFold predicate on the "v1" field.
func V1ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldV1, v))
}

// V2EQ applies the EQ predicate on the "v2" field.
func V2EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV2, v))
}

// V2NEQ applies the NEQ predicate on the "v2" field.
func V2NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldV2, v))
}

// V2In applies the In predicate on the "v2" field.
func V2In(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldV2, vs...))
}

// V2NotIn applies the NotIn predicate on the "v2" field.
func V2NotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldV2, vs...))
}

// V2GT applies the GT predicate on the "v2" field.
func V2GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldV2, v))
}

// V2GTE applies the GTE predicate on the "v2" field.
func V2GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldV2, v))
}

// V2LT applies the LT predicate on the "v2" field.
func V2LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldV2, v))
}

// V2LTE applies the LTE predicate on the "v2" field.
func V2LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldV2, v))
}

// V2Contains applies the Contains predicate on the "v2" field.
func V2Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldV2, v))
}

// V2HasPrefix applies the HasPrefix predicate on the "v2" field.
func V2HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldV2, v))
}

// V2HasSuffix applies the HasSuffix predicate on the "v2" field.
func V2HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldV2, v))
}

// V2IsNil applies the IsNil predicate on the "v2" field.
func V2IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldV2))
}

// V2NotNil applies the NotNil predicate on the "v2" field.
func V2NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldV2))
}

// V2EqualFold applies the EqualFold predicate on the "v2" field.
func V2EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldV2, v))
}

// V2ContainsFold applies the ContainsFold predicate on the "v2" field.
func V2ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldV2, v))
}

// V3EQ applies the EQ predicate on the "v3" field.
func V3EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV3, v))
}

// V3NEQ applies the NEQ predicate on the "v3" field.
func V3NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldV3, v))
}

// V3In applies the In predicate on the "v3" field.
func V3In(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldV3, vs...))
}

// V3NotIn applies the NotIn predicate on the "v3" field.
func V3NotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldV3, vs...))
}

// V3GT applies the GT predicate on the "v3" field.
func V3GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldV3, v))
}

// V3GTE applies the GTE predicate on the "v3" field.
func V3GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldV3, v))
}

// V3LT applies the LT predicate on the "v3" field.
func V3LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldV3, v))
}

// V3LTE applies the LTE predicate on the "v3" field.
func V3LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldV3, v))
}

// V3Contains applies the Contains predicate on the "v3" field.
func V3Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldV3, v))
}

// V3HasPrefix applies the HasPrefix predicate on the "v3" field.
func V3HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldV3, v))
}

// V3HasSuffix applies the HasSuffix predicate on the "v3" field.
func V3HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldV3, v))
}

// V3IsNil applies the IsNil predicate on the "v3" field.
func V3IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldV3))
}

// V3NotNil applies the NotNil predicate on the "v3" field.
func V3NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldV3))
}

// V3EqualFold applies the EqualFold predicate on the "v3" field.
func V3EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldV3, v))
}

// V3ContainsFold applies the ContainsFold predicate on the "v3" field.
func V3ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldV3, v))
}

// V4EQ applies the EQ predicate on the "v4" field.
func V4EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV4, v))
}

// V4NEQ applies the NEQ predicate on the "v4" field.
func V4NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldV4, v))
}

// V4In applies the In predicate on the "v4" field.
func V4In(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldV4, vs...))
}

// V4NotIn applies the NotIn predicate on the "v4" field.
func V4NotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldV4, vs...))
}

// V4GT applies the GT predicate on the "v4" field.
func V4GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldV4, v))
}

// V4GTE applies the GTE predicate on the "v4" field.
func V4GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldV4, v))
}

// V4LT applies the LT predicate on the "v4" field.
func V4LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldV4, v))
}

// V4LTE applies the LTE predicate on the "v4" field.
func V4LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldV4, v))
}

// V4Contains applies the Contains predicate on the "v4" field.
func V4Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldV4, v))
}

// V4HasPrefix applies the HasPrefix predicate on the "v4" field.
func V4HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldV4, v))
}

// V4HasSuffix applies the HasSuffix predicate on the "v4" field.
func V4HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldV4, v))
}

// V4IsNil applies the IsNil predicate on the "v4" field.
func V4IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldV4))
}

// V4NotNil applies the NotNil predicate on the "v4" field.
func V4NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldV4))
}

// V4EqualFold applies the EqualFold predicate on the "v4" field.
func V4EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldV4, v))
}

// V4ContainsFold applies the ContainsFold predicate on the "v4" field.
func V4ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldV4, v))
}

// V5EQ applies the EQ predicate on the "v5" field.
func V5EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldV5, v))
}

// V5NEQ applies the NEQ predicate on the "v5" field.
func V5NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldV5, v))
}

// V5In applies the In predicate on the "v5" field.
func V5In(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldV5, vs...))
}

// V5NotIn applies the NotIn predicate on the "v5" field.
func V5NotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldV5, vs...))
}

// V5GT applies the GT predicate on the "v5" field.
func V5GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldV5, v))
}

// V5GTE applies the GTE predicate on the "v5" field.
func V5GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldV5, v))
}

// V5LT applies the LT predicate on the "v5" field.
func V5LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldV5, v))
}

// V5LTE applies the LTE predicate on the "v5" field.
func V5LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldV5, v))
}

// V5Contains applies the Contains predicate on the "v5" field.
func V5Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldV5, v))
}

// V5HasPrefix applies the HasPrefix predicate on the "v5" field.
func V5HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldV5, v))
}

// V5HasSuffix applies the HasSuffix predicate on the "v5" field.
func V5HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldV5, v))
}

// V5IsNil applies the IsNil predicate on the "v5" field.
func V5IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldV5))
}

// V5NotNil applies the NotNil predicate on the "v5" field.
func V5NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldV5))
}

// V5EqualFold applies the EqualFold predicate on the "v5" field.
func V5EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldV5, v))
}

// V5ContainsFold applies the ContainsFold predicate on the "v5" field.
func V5ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldV5, v))
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldServiceName, v))
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldServiceName, v))
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldServiceName, vs...))
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldServiceName, vs...))
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldServiceName, v))
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldServiceName, v))
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldServiceName, v))
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldServiceName, v))
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldServiceName, v))
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldServiceName, v))
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldServiceName, v))
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldServiceName, v))
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldServiceName, v))
}

// RuleNameEQ applies the EQ predicate on the "rule_name" field.
func RuleNameEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldRuleName, v))
}

// RuleNameNEQ applies the NEQ predicate on the "rule_name" field.
func RuleNameNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldRuleName, v))
}

// RuleNameIn applies the In predicate on the "rule_name" field.
func RuleNameIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldRuleName, vs...))
}

// RuleNameNotIn applies the NotIn predicate on the "rule_name" field.
func RuleNameNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldRuleName, vs...))
}

// RuleNameGT applies the GT predicate on the "rule_name" field.
func RuleNameGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldRuleName, v))
}

// RuleNameGTE applies the GTE predicate on the "rule_name" field.
func RuleNameGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldRuleName, v))
}

// RuleNameLT applies the LT predicate on the "rule_name" field.
func RuleNameLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldRuleName, v))
}

// RuleNameLTE applies the LTE predicate on the "rule_name" field.
func RuleNameLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldRuleName, v))
}

// RuleNameContains applies the Contains predicate on the "rule_name" field.
func RuleNameContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldRuleName, v))
}

// RuleNameHasPrefix applies the HasPrefix predicate on the "rule_name" field.
func RuleNameHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldRuleName, v))
}

// RuleNameHasSuffix applies the HasSuffix predicate on the "rule_name" field.
func RuleNameHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldRuleName, v))
}

// RuleNameIsNil applies the IsNil predicate on the "rule_name" field.
func RuleNameIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldRuleName))
}

// RuleNameNotNil applies the NotNil predicate on the "rule_name" field.
func RuleNameNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldRuleName))
}

// RuleNameEqualFold applies the EqualFold predicate on the "rule_name" field.
func RuleNameEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldRuleName, v))
}

// RuleNameContainsFold applies the ContainsFold predicate on the "rule_name" field.
func RuleNameContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldRuleName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldDescription, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldCategory, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldVersion, v))
}

// RequireApprovalEQ applies the EQ predicate on the "require_approval" field.
func RequireApprovalEQ(v bool) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldRequireApproval, v))
}

// RequireApprovalNEQ applies the NEQ predicate on the "require_approval" field.
func RequireApprovalNEQ(v bool) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldRequireApproval, v))
}

// ApprovalStatusEQ applies the EQ predicate on the "approval_status" field.
func ApprovalStatusEQ(v ApprovalStatus) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldApprovalStatus, v))
}

// ApprovalStatusNEQ applies the NEQ predicate on the "approval_status" field.
func ApprovalStatusNEQ(v ApprovalStatus) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldApprovalStatus, v))
}

// ApprovalStatusIn applies the In predicate on the "approval_status" field.
func ApprovalStatusIn(vs ...ApprovalStatus) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldApprovalStatus, vs...))
}

// ApprovalStatusNotIn applies the NotIn predicate on the "approval_status" field.
func ApprovalStatusNotIn(vs ...ApprovalStatus) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldApprovalStatus, vs...))
}

// ApprovedByEQ applies the EQ predicate on the "approved_by" field.
func ApprovedByEQ(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedByNEQ applies the NEQ predicate on the "approved_by" field.
func ApprovedByNEQ(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldApprovedBy, v))
}

// ApprovedByIn applies the In predicate on the "approved_by" field.
func ApprovedByIn(vs ...uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldApprovedBy, vs...))
}

// ApprovedByNotIn applies the NotIn predicate on the "approved_by" field.
func ApprovedByNotIn(vs ...uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldApprovedBy, vs...))
}

// ApprovedByGT applies the GT predicate on the "approved_by" field.
func ApprovedByGT(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldApprovedBy, v))
}

// ApprovedByGTE applies the GTE predicate on the "approved_by" field.
func ApprovedByGTE(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldApprovedBy, v))
}

// ApprovedByLT applies the LT predicate on the "approved_by" field.
func ApprovedByLT(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldApprovedBy, v))
}

// ApprovedByLTE applies the LTE predicate on the "approved_by" field.
func ApprovedByLTE(v uint64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldApprovedBy, v))
}

// ApprovedByIsNil applies the IsNil predicate on the "approved_by" field.
func ApprovedByIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldApprovedBy))
}

// ApprovedByNotNil applies the NotNil predicate on the "approved_by" field.
func ApprovedByNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldApprovedBy))
}

// ApprovedAtEQ applies the EQ predicate on the "approved_at" field.
func ApprovedAtEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldApprovedAt, v))
}

// ApprovedAtNEQ applies the NEQ predicate on the "approved_at" field.
func ApprovedAtNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldApprovedAt, v))
}

// ApprovedAtIn applies the In predicate on the "approved_at" field.
func ApprovedAtIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldApprovedAt, vs...))
}

// ApprovedAtNotIn applies the NotIn predicate on the "approved_at" field.
func ApprovedAtNotIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldApprovedAt, vs...))
}

// ApprovedAtGT applies the GT predicate on the "approved_at" field.
func ApprovedAtGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldApprovedAt, v))
}

// ApprovedAtGTE applies the GTE predicate on the "approved_at" field.
func ApprovedAtGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldApprovedAt, v))
}

// ApprovedAtLT applies the LT predicate on the "approved_at" field.
func ApprovedAtLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldApprovedAt, v))
}

// ApprovedAtLTE applies the LTE predicate on the "approved_at" field.
func ApprovedAtLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldApprovedAt, v))
}

// ApprovedAtIsNil applies the IsNil predicate on the "approved_at" field.
func ApprovedAtIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldApprovedAt))
}

// ApprovedAtNotNil applies the NotNil predicate on the "approved_at" field.
func ApprovedAtNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldApprovedAt))
}

// EffectiveFromEQ applies the EQ predicate on the "effective_from" field.
func EffectiveFromEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldEffectiveFrom, v))
}

// EffectiveFromNEQ applies the NEQ predicate on the "effective_from" field.
func EffectiveFromNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldEffectiveFrom, v))
}

// EffectiveFromIn applies the In predicate on the "effective_from" field.
func EffectiveFromIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldEffectiveFrom, vs...))
}

// EffectiveFromNotIn applies the NotIn predicate on the "effective_from" field.
func EffectiveFromNotIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldEffectiveFrom, vs...))
}

// EffectiveFromGT applies the GT predicate on the "effective_from" field.
func EffectiveFromGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldEffectiveFrom, v))
}

// EffectiveFromGTE applies the GTE predicate on the "effective_from" field.
func EffectiveFromGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldEffectiveFrom, v))
}

// EffectiveFromLT applies the LT predicate on the "effective_from" field.
func EffectiveFromLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldEffectiveFrom, v))
}

// EffectiveFromLTE applies the LTE predicate on the "effective_from" field.
func EffectiveFromLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldEffectiveFrom, v))
}

// EffectiveFromIsNil applies the IsNil predicate on the "effective_from" field.
func EffectiveFromIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldEffectiveFrom))
}

// EffectiveFromNotNil applies the NotNil predicate on the "effective_from" field.
func EffectiveFromNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldEffectiveFrom))
}

// EffectiveToEQ applies the EQ predicate on the "effective_to" field.
func EffectiveToEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldEffectiveTo, v))
}

// EffectiveToNEQ applies the NEQ predicate on the "effective_to" field.
func EffectiveToNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldEffectiveTo, v))
}

// EffectiveToIn applies the In predicate on the "effective_to" field.
func EffectiveToIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldEffectiveTo, vs...))
}

// EffectiveToNotIn applies the NotIn predicate on the "effective_to" field.
func EffectiveToNotIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldEffectiveTo, vs...))
}

// EffectiveToGT applies the GT predicate on the "effective_to" field.
func EffectiveToGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldEffectiveTo, v))
}

// EffectiveToGTE applies the GTE predicate on the "effective_to" field.
func EffectiveToGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldEffectiveTo, v))
}

// EffectiveToLT applies the LT predicate on the "effective_to" field.
func EffectiveToLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldEffectiveTo, v))
}

// EffectiveToLTE applies the LTE predicate on the "effective_to" field.
func EffectiveToLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldEffectiveTo, v))
}

// EffectiveToIsNil applies the IsNil predicate on the "effective_to" field.
func EffectiveToIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldEffectiveTo))
}

// EffectiveToNotNil applies the NotNil predicate on the "effective_to" field.
func EffectiveToNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldEffectiveTo))
}

// IsTemporaryEQ applies the EQ predicate on the "is_temporary" field.
func IsTemporaryEQ(v bool) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldIsTemporary, v))
}

// IsTemporaryNEQ applies the NEQ predicate on the "is_temporary" field.
func IsTemporaryNEQ(v bool) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldIsTemporary, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldMetadata))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldMetadata, v))
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldTags, v))
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldTags, v))
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldTags, vs...))
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldTags, vs...))
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldTags, v))
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldTags, v))
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldTags, v))
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldTags, v))
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContains(FieldTags, v))
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasPrefix(FieldTags, v))
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldHasSuffix(FieldTags, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldTags))
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEqualFold(FieldTags, v))
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldContainsFold(FieldTags, v))
}

// UsageCountEQ applies the EQ predicate on the "usage_count" field.
func UsageCountEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldUsageCount, v))
}

// UsageCountNEQ applies the NEQ predicate on the "usage_count" field.
func UsageCountNEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldUsageCount, v))
}

// UsageCountIn applies the In predicate on the "usage_count" field.
func UsageCountIn(vs ...int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldUsageCount, vs...))
}

// UsageCountNotIn applies the NotIn predicate on the "usage_count" field.
func UsageCountNotIn(vs ...int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldUsageCount, vs...))
}

// UsageCountGT applies the GT predicate on the "usage_count" field.
func UsageCountGT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldUsageCount, v))
}

// UsageCountGTE applies the GTE predicate on the "usage_count" field.
func UsageCountGTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldUsageCount, v))
}

// UsageCountLT applies the LT predicate on the "usage_count" field.
func UsageCountLT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldUsageCount, v))
}

// UsageCountLTE applies the LTE predicate on the "usage_count" field.
func UsageCountLTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldUsageCount, v))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(sql.FieldNotNull(FieldLastUsedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CasbinRule) predicate.CasbinRule {
	return predicate.CasbinRule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CasbinRule) predicate.CasbinRule {
	return predicate.CasbinRule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CasbinRule) predicate.CasbinRule {
	return predicate.CasbinRule(sql.NotPredicates(p))
}
