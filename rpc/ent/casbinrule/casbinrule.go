// Code generated by ent, DO NOT EDIT.

package casbinrule

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the casbinrule type in the database.
	Label = "casbin_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldPtype holds the string denoting the ptype field in the database.
	FieldPtype = "ptype"
	// FieldV0 holds the string denoting the v0 field in the database.
	FieldV0 = "v0"
	// FieldV1 holds the string denoting the v1 field in the database.
	FieldV1 = "v1"
	// FieldV2 holds the string denoting the v2 field in the database.
	FieldV2 = "v2"
	// FieldV3 holds the string denoting the v3 field in the database.
	FieldV3 = "v3"
	// FieldV4 holds the string denoting the v4 field in the database.
	FieldV4 = "v4"
	// FieldV5 holds the string denoting the v5 field in the database.
	FieldV5 = "v5"
	// FieldServiceName holds the string denoting the service_name field in the database.
	FieldServiceName = "service_name"
	// FieldRuleName holds the string denoting the rule_name field in the database.
	FieldRuleName = "rule_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldRequireApproval holds the string denoting the require_approval field in the database.
	FieldRequireApproval = "require_approval"
	// FieldApprovalStatus holds the string denoting the approval_status field in the database.
	FieldApprovalStatus = "approval_status"
	// FieldApprovedBy holds the string denoting the approved_by field in the database.
	FieldApprovedBy = "approved_by"
	// FieldApprovedAt holds the string denoting the approved_at field in the database.
	FieldApprovedAt = "approved_at"
	// FieldEffectiveFrom holds the string denoting the effective_from field in the database.
	FieldEffectiveFrom = "effective_from"
	// FieldEffectiveTo holds the string denoting the effective_to field in the database.
	FieldEffectiveTo = "effective_to"
	// FieldIsTemporary holds the string denoting the is_temporary field in the database.
	FieldIsTemporary = "is_temporary"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldUsageCount holds the string denoting the usage_count field in the database.
	FieldUsageCount = "usage_count"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// Table holds the table name of the casbinrule in the database.
	Table = "sys_casbin_rules"
)

// Columns holds all SQL columns for casbinrule fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldTenantID,
	FieldPtype,
	FieldV0,
	FieldV1,
	FieldV2,
	FieldV3,
	FieldV4,
	FieldV5,
	FieldServiceName,
	FieldRuleName,
	FieldDescription,
	FieldCategory,
	FieldVersion,
	FieldRequireApproval,
	FieldApprovalStatus,
	FieldApprovedBy,
	FieldApprovedAt,
	FieldEffectiveFrom,
	FieldEffectiveTo,
	FieldIsTemporary,
	FieldMetadata,
	FieldTags,
	FieldUsageCount,
	FieldLastUsedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID uint64
	// DefaultCategory holds the default value on creation for the "category" field.
	DefaultCategory string
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion string
	// DefaultRequireApproval holds the default value on creation for the "require_approval" field.
	DefaultRequireApproval bool
	// DefaultIsTemporary holds the default value on creation for the "is_temporary" field.
	DefaultIsTemporary bool
	// DefaultUsageCount holds the default value on creation for the "usage_count" field.
	DefaultUsageCount int64
)

// ApprovalStatus defines the type for the "approval_status" enum field.
type ApprovalStatus string

// ApprovalStatusApproved is the default value of the ApprovalStatus enum.
const DefaultApprovalStatus = ApprovalStatusApproved

// ApprovalStatus values.
const (
	ApprovalStatusPending  ApprovalStatus = "pending"
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusRejected ApprovalStatus = "rejected"
)

func (as ApprovalStatus) String() string {
	return string(as)
}

// ApprovalStatusValidator is a validator for the "approval_status" field enum values. It is called by the builders before save.
func ApprovalStatusValidator(as ApprovalStatus) error {
	switch as {
	case ApprovalStatusPending, ApprovalStatusApproved, ApprovalStatusRejected:
		return nil
	default:
		return fmt.Errorf("casbinrule: invalid enum value for approval_status field: %q", as)
	}
}

// OrderOption defines the ordering options for the CasbinRule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByPtype orders the results by the ptype field.
func ByPtype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPtype, opts...).ToFunc()
}

// ByV0 orders the results by the v0 field.
func ByV0(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV0, opts...).ToFunc()
}

// ByV1 orders the results by the v1 field.
func ByV1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV1, opts...).ToFunc()
}

// ByV2 orders the results by the v2 field.
func ByV2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV2, opts...).ToFunc()
}

// ByV3 orders the results by the v3 field.
func ByV3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV3, opts...).ToFunc()
}

// ByV4 orders the results by the v4 field.
func ByV4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV4, opts...).ToFunc()
}

// ByV5 orders the results by the v5 field.
func ByV5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV5, opts...).ToFunc()
}

// ByServiceName orders the results by the service_name field.
func ByServiceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceName, opts...).ToFunc()
}

// ByRuleName orders the results by the rule_name field.
func ByRuleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRuleName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByRequireApproval orders the results by the require_approval field.
func ByRequireApproval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequireApproval, opts...).ToFunc()
}

// ByApprovalStatus orders the results by the approval_status field.
func ByApprovalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalStatus, opts...).ToFunc()
}

// ByApprovedBy orders the results by the approved_by field.
func ByApprovedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedBy, opts...).ToFunc()
}

// ByApprovedAt orders the results by the approved_at field.
func ByApprovedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedAt, opts...).ToFunc()
}

// ByEffectiveFrom orders the results by the effective_from field.
func ByEffectiveFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveFrom, opts...).ToFunc()
}

// ByEffectiveTo orders the results by the effective_to field.
func ByEffectiveTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveTo, opts...).ToFunc()
}

// ByIsTemporary orders the results by the is_temporary field.
func ByIsTemporary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTemporary, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByTags orders the results by the tags field.
func ByTags(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTags, opts...).ToFunc()
}

// ByUsageCount orders the results by the usage_count field.
func ByUsageCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageCount, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}
