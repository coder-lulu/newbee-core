// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
	"github.com/coder-lulu/newbee-core/rpc/ent/tenant"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TenantUpdate builder.
func (_u *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TenantUpdate) SetUpdatedAt(v time.Time) *TenantUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TenantUpdate) SetStatus(v uint8) *TenantUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableStatus(v *uint8) *TenantUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *TenantUpdate) AddStatus(v int8) *TenantUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TenantUpdate) ClearStatus() *TenantUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *TenantUpdate) SetName(v string) *TenantUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableName(v *string) *TenantUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *TenantUpdate) SetCode(v string) *TenantUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableCode(v *string) *TenantUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TenantUpdate) SetDescription(v string) *TenantUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableDescription(v *string) *TenantUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TenantUpdate) ClearDescription() *TenantUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetExpiredAt sets the "expired_at" field.
func (_u *TenantUpdate) SetExpiredAt(v time.Time) *TenantUpdate {
	_u.mutation.SetExpiredAt(v)
	return _u
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableExpiredAt(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetExpiredAt(*v)
	}
	return _u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (_u *TenantUpdate) ClearExpiredAt() *TenantUpdate {
	_u.mutation.ClearExpiredAt()
	return _u
}

// SetConfig sets the "config" field.
func (_u *TenantUpdate) SetConfig(v map[string]interface{}) *TenantUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *TenantUpdate) ClearConfig() *TenantUpdate {
	_u.mutation.ClearConfig()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *TenantUpdate) SetCreatedBy(v uint64) *TenantUpdate {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableCreatedBy(v *uint64) *TenantUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *TenantUpdate) AddCreatedBy(v int64) *TenantUpdate {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *TenantUpdate) ClearCreatedBy() *TenantUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// Mutation returns the TenantMutation object of the builder.
func (_u *TenantUpdate) Mutation() *TenantMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TenantUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TenantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TenantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TenantUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TenantUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TenantUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TenantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(tenant.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(tenant.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(tenant.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiredAtCleared() {
		_spec.ClearField(tenant.FieldExpiredAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(tenant.FieldConfig, field.TypeJSON, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(tenant.FieldConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(tenant.FieldCreatedBy, field.TypeUint64, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(tenant.FieldCreatedBy, field.TypeUint64)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TenantUpdateOne) SetUpdatedAt(v time.Time) *TenantUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TenantUpdateOne) SetStatus(v uint8) *TenantUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableStatus(v *uint8) *TenantUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *TenantUpdateOne) AddStatus(v int8) *TenantUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TenantUpdateOne) ClearStatus() *TenantUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *TenantUpdateOne) SetName(v string) *TenantUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableName(v *string) *TenantUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *TenantUpdateOne) SetCode(v string) *TenantUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableCode(v *string) *TenantUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TenantUpdateOne) SetDescription(v string) *TenantUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableDescription(v *string) *TenantUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TenantUpdateOne) ClearDescription() *TenantUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetExpiredAt sets the "expired_at" field.
func (_u *TenantUpdateOne) SetExpiredAt(v time.Time) *TenantUpdateOne {
	_u.mutation.SetExpiredAt(v)
	return _u
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableExpiredAt(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetExpiredAt(*v)
	}
	return _u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (_u *TenantUpdateOne) ClearExpiredAt() *TenantUpdateOne {
	_u.mutation.ClearExpiredAt()
	return _u
}

// SetConfig sets the "config" field.
func (_u *TenantUpdateOne) SetConfig(v map[string]interface{}) *TenantUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *TenantUpdateOne) ClearConfig() *TenantUpdateOne {
	_u.mutation.ClearConfig()
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *TenantUpdateOne) SetCreatedBy(v uint64) *TenantUpdateOne {
	_u.mutation.ResetCreatedBy()
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableCreatedBy(v *uint64) *TenantUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// AddCreatedBy adds value to the "created_by" field.
func (_u *TenantUpdateOne) AddCreatedBy(v int64) *TenantUpdateOne {
	_u.mutation.AddCreatedBy(v)
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *TenantUpdateOne) ClearCreatedBy() *TenantUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// Mutation returns the TenantMutation object of the builder.
func (_u *TenantUpdateOne) Mutation() *TenantMutation {
	return _u.mutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (_u *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Tenant entity.
func (_u *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TenantUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TenantUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TenantUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(tenant.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(tenant.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(tenant.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(tenant.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiredAtCleared() {
		_spec.ClearField(tenant.FieldExpiredAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(tenant.FieldConfig, field.TypeJSON, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(tenant.FieldConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCreatedBy(); ok {
		_spec.AddField(tenant.FieldCreatedBy, field.TypeUint64, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(tenant.FieldCreatedBy, field.TypeUint64)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Tenant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
