// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthaccount"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthsession"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
)

// OauthProviderUpdate is the builder for updating OauthProvider entities.
type OauthProviderUpdate struct {
	config
	hooks     []Hook
	mutation  *OauthProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OauthProviderUpdate builder.
func (_u *OauthProviderUpdate) Where(ps ...predicate.OauthProvider) *OauthProviderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OauthProviderUpdate) SetUpdatedAt(v time.Time) *OauthProviderUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *OauthProviderUpdate) SetStatus(v uint8) *OauthProviderUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableStatus(v *uint8) *OauthProviderUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *OauthProviderUpdate) AddStatus(v int8) *OauthProviderUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OauthProviderUpdate) ClearStatus() *OauthProviderUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *OauthProviderUpdate) SetName(v string) *OauthProviderUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableName(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *OauthProviderUpdate) SetDisplayName(v string) *OauthProviderUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableDisplayName(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *OauthProviderUpdate) ClearDisplayName() *OauthProviderUpdate {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetType sets the "type" field.
func (_u *OauthProviderUpdate) SetType(v string) *OauthProviderUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableType(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetProviderType sets the "provider_type" field.
func (_u *OauthProviderUpdate) SetProviderType(v string) *OauthProviderUpdate {
	_u.mutation.SetProviderType(v)
	return _u
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableProviderType(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetProviderType(*v)
	}
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *OauthProviderUpdate) SetClientID(v string) *OauthProviderUpdate {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableClientID(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *OauthProviderUpdate) SetClientSecret(v string) *OauthProviderUpdate {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableClientSecret(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetEncryptedSecret sets the "encrypted_secret" field.
func (_u *OauthProviderUpdate) SetEncryptedSecret(v string) *OauthProviderUpdate {
	_u.mutation.SetEncryptedSecret(v)
	return _u
}

// SetNillableEncryptedSecret sets the "encrypted_secret" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableEncryptedSecret(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetEncryptedSecret(*v)
	}
	return _u
}

// ClearEncryptedSecret clears the value of the "encrypted_secret" field.
func (_u *OauthProviderUpdate) ClearEncryptedSecret() *OauthProviderUpdate {
	_u.mutation.ClearEncryptedSecret()
	return _u
}

// SetEncryptionKeyID sets the "encryption_key_id" field.
func (_u *OauthProviderUpdate) SetEncryptionKeyID(v string) *OauthProviderUpdate {
	_u.mutation.SetEncryptionKeyID(v)
	return _u
}

// SetNillableEncryptionKeyID sets the "encryption_key_id" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableEncryptionKeyID(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetEncryptionKeyID(*v)
	}
	return _u
}

// ClearEncryptionKeyID clears the value of the "encryption_key_id" field.
func (_u *OauthProviderUpdate) ClearEncryptionKeyID() *OauthProviderUpdate {
	_u.mutation.ClearEncryptionKeyID()
	return _u
}

// SetRedirectURL sets the "redirect_url" field.
func (_u *OauthProviderUpdate) SetRedirectURL(v string) *OauthProviderUpdate {
	_u.mutation.SetRedirectURL(v)
	return _u
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableRedirectURL(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetRedirectURL(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *OauthProviderUpdate) SetScopes(v string) *OauthProviderUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableScopes(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetScopes(*v)
	}
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *OauthProviderUpdate) ClearScopes() *OauthProviderUpdate {
	_u.mutation.ClearScopes()
	return _u
}

// SetAuthURL sets the "auth_url" field.
func (_u *OauthProviderUpdate) SetAuthURL(v string) *OauthProviderUpdate {
	_u.mutation.SetAuthURL(v)
	return _u
}

// SetNillableAuthURL sets the "auth_url" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableAuthURL(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetAuthURL(*v)
	}
	return _u
}

// SetTokenURL sets the "token_url" field.
func (_u *OauthProviderUpdate) SetTokenURL(v string) *OauthProviderUpdate {
	_u.mutation.SetTokenURL(v)
	return _u
}

// SetNillableTokenURL sets the "token_url" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableTokenURL(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetTokenURL(*v)
	}
	return _u
}

// SetInfoURL sets the "info_url" field.
func (_u *OauthProviderUpdate) SetInfoURL(v string) *OauthProviderUpdate {
	_u.mutation.SetInfoURL(v)
	return _u
}

// SetNillableInfoURL sets the "info_url" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableInfoURL(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetInfoURL(*v)
	}
	return _u
}

// SetAuthStyle sets the "auth_style" field.
func (_u *OauthProviderUpdate) SetAuthStyle(v int) *OauthProviderUpdate {
	_u.mutation.ResetAuthStyle()
	_u.mutation.SetAuthStyle(v)
	return _u
}

// SetNillableAuthStyle sets the "auth_style" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableAuthStyle(v *int) *OauthProviderUpdate {
	if v != nil {
		_u.SetAuthStyle(*v)
	}
	return _u
}

// AddAuthStyle adds value to the "auth_style" field.
func (_u *OauthProviderUpdate) AddAuthStyle(v int) *OauthProviderUpdate {
	_u.mutation.AddAuthStyle(v)
	return _u
}

// SetExtraConfig sets the "extra_config" field.
func (_u *OauthProviderUpdate) SetExtraConfig(v map[string]interface{}) *OauthProviderUpdate {
	_u.mutation.SetExtraConfig(v)
	return _u
}

// ClearExtraConfig clears the value of the "extra_config" field.
func (_u *OauthProviderUpdate) ClearExtraConfig() *OauthProviderUpdate {
	_u.mutation.ClearExtraConfig()
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *OauthProviderUpdate) SetEnabled(v bool) *OauthProviderUpdate {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableEnabled(v *bool) *OauthProviderUpdate {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *OauthProviderUpdate) SetSort(v uint32) *OauthProviderUpdate {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableSort(v *uint32) *OauthProviderUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *OauthProviderUpdate) AddSort(v int32) *OauthProviderUpdate {
	_u.mutation.AddSort(v)
	return _u
}

// SetRemark sets the "remark" field.
func (_u *OauthProviderUpdate) SetRemark(v string) *OauthProviderUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableRemark(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *OauthProviderUpdate) ClearRemark() *OauthProviderUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetSupportPkce sets the "support_pkce" field.
func (_u *OauthProviderUpdate) SetSupportPkce(v bool) *OauthProviderUpdate {
	_u.mutation.SetSupportPkce(v)
	return _u
}

// SetNillableSupportPkce sets the "support_pkce" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableSupportPkce(v *bool) *OauthProviderUpdate {
	if v != nil {
		_u.SetSupportPkce(*v)
	}
	return _u
}

// SetIconURL sets the "icon_url" field.
func (_u *OauthProviderUpdate) SetIconURL(v string) *OauthProviderUpdate {
	_u.mutation.SetIconURL(v)
	return _u
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableIconURL(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetIconURL(*v)
	}
	return _u
}

// ClearIconURL clears the value of the "icon_url" field.
func (_u *OauthProviderUpdate) ClearIconURL() *OauthProviderUpdate {
	_u.mutation.ClearIconURL()
	return _u
}

// SetCacheTTL sets the "cache_ttl" field.
func (_u *OauthProviderUpdate) SetCacheTTL(v int) *OauthProviderUpdate {
	_u.mutation.ResetCacheTTL()
	_u.mutation.SetCacheTTL(v)
	return _u
}

// SetNillableCacheTTL sets the "cache_ttl" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableCacheTTL(v *int) *OauthProviderUpdate {
	if v != nil {
		_u.SetCacheTTL(*v)
	}
	return _u
}

// AddCacheTTL adds value to the "cache_ttl" field.
func (_u *OauthProviderUpdate) AddCacheTTL(v int) *OauthProviderUpdate {
	_u.mutation.AddCacheTTL(v)
	return _u
}

// SetWebhookURL sets the "webhook_url" field.
func (_u *OauthProviderUpdate) SetWebhookURL(v string) *OauthProviderUpdate {
	_u.mutation.SetWebhookURL(v)
	return _u
}

// SetNillableWebhookURL sets the "webhook_url" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableWebhookURL(v *string) *OauthProviderUpdate {
	if v != nil {
		_u.SetWebhookURL(*v)
	}
	return _u
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (_u *OauthProviderUpdate) ClearWebhookURL() *OauthProviderUpdate {
	_u.mutation.ClearWebhookURL()
	return _u
}

// SetSuccessCount sets the "success_count" field.
func (_u *OauthProviderUpdate) SetSuccessCount(v int) *OauthProviderUpdate {
	_u.mutation.ResetSuccessCount()
	_u.mutation.SetSuccessCount(v)
	return _u
}

// SetNillableSuccessCount sets the "success_count" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableSuccessCount(v *int) *OauthProviderUpdate {
	if v != nil {
		_u.SetSuccessCount(*v)
	}
	return _u
}

// AddSuccessCount adds value to the "success_count" field.
func (_u *OauthProviderUpdate) AddSuccessCount(v int) *OauthProviderUpdate {
	_u.mutation.AddSuccessCount(v)
	return _u
}

// SetFailureCount sets the "failure_count" field.
func (_u *OauthProviderUpdate) SetFailureCount(v int) *OauthProviderUpdate {
	_u.mutation.ResetFailureCount()
	_u.mutation.SetFailureCount(v)
	return _u
}

// SetNillableFailureCount sets the "failure_count" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableFailureCount(v *int) *OauthProviderUpdate {
	if v != nil {
		_u.SetFailureCount(*v)
	}
	return _u
}

// AddFailureCount adds value to the "failure_count" field.
func (_u *OauthProviderUpdate) AddFailureCount(v int) *OauthProviderUpdate {
	_u.mutation.AddFailureCount(v)
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *OauthProviderUpdate) SetLastUsedAt(v time.Time) *OauthProviderUpdate {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *OauthProviderUpdate) SetNillableLastUsedAt(v *time.Time) *OauthProviderUpdate {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *OauthProviderUpdate) ClearLastUsedAt() *OauthProviderUpdate {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// AddOauthAccountIDs adds the "oauth_accounts" edge to the OauthAccount entity by IDs.
func (_u *OauthProviderUpdate) AddOauthAccountIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.AddOauthAccountIDs(ids...)
	return _u
}

// AddOauthAccounts adds the "oauth_accounts" edges to the OauthAccount entity.
func (_u *OauthProviderUpdate) AddOauthAccounts(v ...*OauthAccount) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthAccountIDs(ids...)
}

// AddOauthSessionIDs adds the "oauth_sessions" edge to the OauthSession entity by IDs.
func (_u *OauthProviderUpdate) AddOauthSessionIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.AddOauthSessionIDs(ids...)
	return _u
}

// AddOauthSessions adds the "oauth_sessions" edges to the OauthSession entity.
func (_u *OauthProviderUpdate) AddOauthSessions(v ...*OauthSession) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthSessionIDs(ids...)
}

// Mutation returns the OauthProviderMutation object of the builder.
func (_u *OauthProviderUpdate) Mutation() *OauthProviderMutation {
	return _u.mutation
}

// ClearOauthAccounts clears all "oauth_accounts" edges to the OauthAccount entity.
func (_u *OauthProviderUpdate) ClearOauthAccounts() *OauthProviderUpdate {
	_u.mutation.ClearOauthAccounts()
	return _u
}

// RemoveOauthAccountIDs removes the "oauth_accounts" edge to OauthAccount entities by IDs.
func (_u *OauthProviderUpdate) RemoveOauthAccountIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.RemoveOauthAccountIDs(ids...)
	return _u
}

// RemoveOauthAccounts removes "oauth_accounts" edges to OauthAccount entities.
func (_u *OauthProviderUpdate) RemoveOauthAccounts(v ...*OauthAccount) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthAccountIDs(ids...)
}

// ClearOauthSessions clears all "oauth_sessions" edges to the OauthSession entity.
func (_u *OauthProviderUpdate) ClearOauthSessions() *OauthProviderUpdate {
	_u.mutation.ClearOauthSessions()
	return _u
}

// RemoveOauthSessionIDs removes the "oauth_sessions" edge to OauthSession entities by IDs.
func (_u *OauthProviderUpdate) RemoveOauthSessionIDs(ids ...uint64) *OauthProviderUpdate {
	_u.mutation.RemoveOauthSessionIDs(ids...)
	return _u
}

// RemoveOauthSessions removes "oauth_sessions" edges to OauthSession entities.
func (_u *OauthProviderUpdate) RemoveOauthSessions(v ...*OauthSession) *OauthProviderUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthProviderUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthProviderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthProviderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthProviderUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := oauthprovider.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthProviderUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := oauthprovider.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.display_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := oauthprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderType(); ok {
		if err := oauthprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.provider_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EncryptedSecret(); ok {
		if err := oauthprovider.EncryptedSecretValidator(v); err != nil {
			return &ValidationError{Name: "encrypted_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.encrypted_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EncryptionKeyID(); ok {
		if err := oauthprovider.EncryptionKeyIDValidator(v); err != nil {
			return &ValidationError{Name: "encryption_key_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.encryption_key_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURL(); ok {
		if err := oauthprovider.RedirectURLValidator(v); err != nil {
			return &ValidationError{Name: "redirect_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.redirect_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Scopes(); ok {
		if err := oauthprovider.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.scopes": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AuthURL(); ok {
		if err := oauthprovider.AuthURLValidator(v); err != nil {
			return &ValidationError{Name: "auth_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.auth_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TokenURL(); ok {
		if err := oauthprovider.TokenURLValidator(v); err != nil {
			return &ValidationError{Name: "token_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.token_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InfoURL(); ok {
		if err := oauthprovider.InfoURLValidator(v); err != nil {
			return &ValidationError{Name: "info_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.info_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Remark(); ok {
		if err := oauthprovider.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.remark": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IconURL(); ok {
		if err := oauthprovider.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.icon_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.WebhookURL(); ok {
		if err := oauthprovider.WebhookURLValidator(v); err != nil {
			return &ValidationError{Name: "webhook_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.webhook_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OauthProviderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthProviderUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OauthProviderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthprovider.Table, oauthprovider.Columns, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(oauthprovider.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(oauthprovider.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(oauthprovider.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(oauthprovider.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(oauthprovider.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(oauthprovider.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderType(); ok {
		_spec.SetField(oauthprovider.FieldProviderType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.EncryptedSecret(); ok {
		_spec.SetField(oauthprovider.FieldEncryptedSecret, field.TypeString, value)
	}
	if _u.mutation.EncryptedSecretCleared() {
		_spec.ClearField(oauthprovider.FieldEncryptedSecret, field.TypeString)
	}
	if value, ok := _u.mutation.EncryptionKeyID(); ok {
		_spec.SetField(oauthprovider.FieldEncryptionKeyID, field.TypeString, value)
	}
	if _u.mutation.EncryptionKeyIDCleared() {
		_spec.ClearField(oauthprovider.FieldEncryptionKeyID, field.TypeString)
	}
	if value, ok := _u.mutation.RedirectURL(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeString, value)
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(oauthprovider.FieldScopes, field.TypeString)
	}
	if value, ok := _u.mutation.AuthURL(); ok {
		_spec.SetField(oauthprovider.FieldAuthURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.TokenURL(); ok {
		_spec.SetField(oauthprovider.FieldTokenURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.InfoURL(); ok {
		_spec.SetField(oauthprovider.FieldInfoURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthStyle(); ok {
		_spec.SetField(oauthprovider.FieldAuthStyle, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAuthStyle(); ok {
		_spec.AddField(oauthprovider.FieldAuthStyle, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExtraConfig(); ok {
		_spec.SetField(oauthprovider.FieldExtraConfig, field.TypeJSON, value)
	}
	if _u.mutation.ExtraConfigCleared() {
		_spec.ClearField(oauthprovider.FieldExtraConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(oauthprovider.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(oauthprovider.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(oauthprovider.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(oauthprovider.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(oauthprovider.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.SupportPkce(); ok {
		_spec.SetField(oauthprovider.FieldSupportPkce, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IconURL(); ok {
		_spec.SetField(oauthprovider.FieldIconURL, field.TypeString, value)
	}
	if _u.mutation.IconURLCleared() {
		_spec.ClearField(oauthprovider.FieldIconURL, field.TypeString)
	}
	if value, ok := _u.mutation.CacheTTL(); ok {
		_spec.SetField(oauthprovider.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCacheTTL(); ok {
		_spec.AddField(oauthprovider.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WebhookURL(); ok {
		_spec.SetField(oauthprovider.FieldWebhookURL, field.TypeString, value)
	}
	if _u.mutation.WebhookURLCleared() {
		_spec.ClearField(oauthprovider.FieldWebhookURL, field.TypeString)
	}
	if value, ok := _u.mutation.SuccessCount(); ok {
		_spec.SetField(oauthprovider.FieldSuccessCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSuccessCount(); ok {
		_spec.AddField(oauthprovider.FieldSuccessCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.FailureCount(); ok {
		_spec.SetField(oauthprovider.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFailureCount(); ok {
		_spec.AddField(oauthprovider.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(oauthprovider.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(oauthprovider.FieldLastUsedAt, field.TypeTime)
	}
	if _u.mutation.OauthAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthAccountsTable,
			Columns: []string{oauthprovider.OauthAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthAccountsIDs(); len(nodes) > 0 && !_u.mutation.OauthAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthAccountsTable,
			Columns: []string{oauthprovider.OauthAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthAccountsTable,
			Columns: []string{oauthprovider.OauthAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OauthSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthSessionsTable,
			Columns: []string{oauthprovider.OauthSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthSessionsIDs(); len(nodes) > 0 && !_u.mutation.OauthSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthSessionsTable,
			Columns: []string{oauthprovider.OauthSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthSessionsTable,
			Columns: []string{oauthprovider.OauthSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthProviderUpdateOne is the builder for updating a single OauthProvider entity.
type OauthProviderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OauthProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OauthProviderUpdateOne) SetUpdatedAt(v time.Time) *OauthProviderUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *OauthProviderUpdateOne) SetStatus(v uint8) *OauthProviderUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableStatus(v *uint8) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *OauthProviderUpdateOne) AddStatus(v int8) *OauthProviderUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OauthProviderUpdateOne) ClearStatus() *OauthProviderUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *OauthProviderUpdateOne) SetName(v string) *OauthProviderUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableName(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *OauthProviderUpdateOne) SetDisplayName(v string) *OauthProviderUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableDisplayName(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *OauthProviderUpdateOne) ClearDisplayName() *OauthProviderUpdateOne {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetType sets the "type" field.
func (_u *OauthProviderUpdateOne) SetType(v string) *OauthProviderUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableType(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetProviderType sets the "provider_type" field.
func (_u *OauthProviderUpdateOne) SetProviderType(v string) *OauthProviderUpdateOne {
	_u.mutation.SetProviderType(v)
	return _u
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableProviderType(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetProviderType(*v)
	}
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *OauthProviderUpdateOne) SetClientID(v string) *OauthProviderUpdateOne {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableClientID(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *OauthProviderUpdateOne) SetClientSecret(v string) *OauthProviderUpdateOne {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableClientSecret(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetEncryptedSecret sets the "encrypted_secret" field.
func (_u *OauthProviderUpdateOne) SetEncryptedSecret(v string) *OauthProviderUpdateOne {
	_u.mutation.SetEncryptedSecret(v)
	return _u
}

// SetNillableEncryptedSecret sets the "encrypted_secret" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableEncryptedSecret(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetEncryptedSecret(*v)
	}
	return _u
}

// ClearEncryptedSecret clears the value of the "encrypted_secret" field.
func (_u *OauthProviderUpdateOne) ClearEncryptedSecret() *OauthProviderUpdateOne {
	_u.mutation.ClearEncryptedSecret()
	return _u
}

// SetEncryptionKeyID sets the "encryption_key_id" field.
func (_u *OauthProviderUpdateOne) SetEncryptionKeyID(v string) *OauthProviderUpdateOne {
	_u.mutation.SetEncryptionKeyID(v)
	return _u
}

// SetNillableEncryptionKeyID sets the "encryption_key_id" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableEncryptionKeyID(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetEncryptionKeyID(*v)
	}
	return _u
}

// ClearEncryptionKeyID clears the value of the "encryption_key_id" field.
func (_u *OauthProviderUpdateOne) ClearEncryptionKeyID() *OauthProviderUpdateOne {
	_u.mutation.ClearEncryptionKeyID()
	return _u
}

// SetRedirectURL sets the "redirect_url" field.
func (_u *OauthProviderUpdateOne) SetRedirectURL(v string) *OauthProviderUpdateOne {
	_u.mutation.SetRedirectURL(v)
	return _u
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableRedirectURL(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetRedirectURL(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *OauthProviderUpdateOne) SetScopes(v string) *OauthProviderUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableScopes(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetScopes(*v)
	}
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *OauthProviderUpdateOne) ClearScopes() *OauthProviderUpdateOne {
	_u.mutation.ClearScopes()
	return _u
}

// SetAuthURL sets the "auth_url" field.
func (_u *OauthProviderUpdateOne) SetAuthURL(v string) *OauthProviderUpdateOne {
	_u.mutation.SetAuthURL(v)
	return _u
}

// SetNillableAuthURL sets the "auth_url" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableAuthURL(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetAuthURL(*v)
	}
	return _u
}

// SetTokenURL sets the "token_url" field.
func (_u *OauthProviderUpdateOne) SetTokenURL(v string) *OauthProviderUpdateOne {
	_u.mutation.SetTokenURL(v)
	return _u
}

// SetNillableTokenURL sets the "token_url" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableTokenURL(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetTokenURL(*v)
	}
	return _u
}

// SetInfoURL sets the "info_url" field.
func (_u *OauthProviderUpdateOne) SetInfoURL(v string) *OauthProviderUpdateOne {
	_u.mutation.SetInfoURL(v)
	return _u
}

// SetNillableInfoURL sets the "info_url" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableInfoURL(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetInfoURL(*v)
	}
	return _u
}

// SetAuthStyle sets the "auth_style" field.
func (_u *OauthProviderUpdateOne) SetAuthStyle(v int) *OauthProviderUpdateOne {
	_u.mutation.ResetAuthStyle()
	_u.mutation.SetAuthStyle(v)
	return _u
}

// SetNillableAuthStyle sets the "auth_style" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableAuthStyle(v *int) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetAuthStyle(*v)
	}
	return _u
}

// AddAuthStyle adds value to the "auth_style" field.
func (_u *OauthProviderUpdateOne) AddAuthStyle(v int) *OauthProviderUpdateOne {
	_u.mutation.AddAuthStyle(v)
	return _u
}

// SetExtraConfig sets the "extra_config" field.
func (_u *OauthProviderUpdateOne) SetExtraConfig(v map[string]interface{}) *OauthProviderUpdateOne {
	_u.mutation.SetExtraConfig(v)
	return _u
}

// ClearExtraConfig clears the value of the "extra_config" field.
func (_u *OauthProviderUpdateOne) ClearExtraConfig() *OauthProviderUpdateOne {
	_u.mutation.ClearExtraConfig()
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *OauthProviderUpdateOne) SetEnabled(v bool) *OauthProviderUpdateOne {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableEnabled(v *bool) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *OauthProviderUpdateOne) SetSort(v uint32) *OauthProviderUpdateOne {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableSort(v *uint32) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *OauthProviderUpdateOne) AddSort(v int32) *OauthProviderUpdateOne {
	_u.mutation.AddSort(v)
	return _u
}

// SetRemark sets the "remark" field.
func (_u *OauthProviderUpdateOne) SetRemark(v string) *OauthProviderUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableRemark(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *OauthProviderUpdateOne) ClearRemark() *OauthProviderUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetSupportPkce sets the "support_pkce" field.
func (_u *OauthProviderUpdateOne) SetSupportPkce(v bool) *OauthProviderUpdateOne {
	_u.mutation.SetSupportPkce(v)
	return _u
}

// SetNillableSupportPkce sets the "support_pkce" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableSupportPkce(v *bool) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetSupportPkce(*v)
	}
	return _u
}

// SetIconURL sets the "icon_url" field.
func (_u *OauthProviderUpdateOne) SetIconURL(v string) *OauthProviderUpdateOne {
	_u.mutation.SetIconURL(v)
	return _u
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableIconURL(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetIconURL(*v)
	}
	return _u
}

// ClearIconURL clears the value of the "icon_url" field.
func (_u *OauthProviderUpdateOne) ClearIconURL() *OauthProviderUpdateOne {
	_u.mutation.ClearIconURL()
	return _u
}

// SetCacheTTL sets the "cache_ttl" field.
func (_u *OauthProviderUpdateOne) SetCacheTTL(v int) *OauthProviderUpdateOne {
	_u.mutation.ResetCacheTTL()
	_u.mutation.SetCacheTTL(v)
	return _u
}

// SetNillableCacheTTL sets the "cache_ttl" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableCacheTTL(v *int) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetCacheTTL(*v)
	}
	return _u
}

// AddCacheTTL adds value to the "cache_ttl" field.
func (_u *OauthProviderUpdateOne) AddCacheTTL(v int) *OauthProviderUpdateOne {
	_u.mutation.AddCacheTTL(v)
	return _u
}

// SetWebhookURL sets the "webhook_url" field.
func (_u *OauthProviderUpdateOne) SetWebhookURL(v string) *OauthProviderUpdateOne {
	_u.mutation.SetWebhookURL(v)
	return _u
}

// SetNillableWebhookURL sets the "webhook_url" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableWebhookURL(v *string) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetWebhookURL(*v)
	}
	return _u
}

// ClearWebhookURL clears the value of the "webhook_url" field.
func (_u *OauthProviderUpdateOne) ClearWebhookURL() *OauthProviderUpdateOne {
	_u.mutation.ClearWebhookURL()
	return _u
}

// SetSuccessCount sets the "success_count" field.
func (_u *OauthProviderUpdateOne) SetSuccessCount(v int) *OauthProviderUpdateOne {
	_u.mutation.ResetSuccessCount()
	_u.mutation.SetSuccessCount(v)
	return _u
}

// SetNillableSuccessCount sets the "success_count" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableSuccessCount(v *int) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetSuccessCount(*v)
	}
	return _u
}

// AddSuccessCount adds value to the "success_count" field.
func (_u *OauthProviderUpdateOne) AddSuccessCount(v int) *OauthProviderUpdateOne {
	_u.mutation.AddSuccessCount(v)
	return _u
}

// SetFailureCount sets the "failure_count" field.
func (_u *OauthProviderUpdateOne) SetFailureCount(v int) *OauthProviderUpdateOne {
	_u.mutation.ResetFailureCount()
	_u.mutation.SetFailureCount(v)
	return _u
}

// SetNillableFailureCount sets the "failure_count" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableFailureCount(v *int) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetFailureCount(*v)
	}
	return _u
}

// AddFailureCount adds value to the "failure_count" field.
func (_u *OauthProviderUpdateOne) AddFailureCount(v int) *OauthProviderUpdateOne {
	_u.mutation.AddFailureCount(v)
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *OauthProviderUpdateOne) SetLastUsedAt(v time.Time) *OauthProviderUpdateOne {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *OauthProviderUpdateOne) SetNillableLastUsedAt(v *time.Time) *OauthProviderUpdateOne {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *OauthProviderUpdateOne) ClearLastUsedAt() *OauthProviderUpdateOne {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// AddOauthAccountIDs adds the "oauth_accounts" edge to the OauthAccount entity by IDs.
func (_u *OauthProviderUpdateOne) AddOauthAccountIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.AddOauthAccountIDs(ids...)
	return _u
}

// AddOauthAccounts adds the "oauth_accounts" edges to the OauthAccount entity.
func (_u *OauthProviderUpdateOne) AddOauthAccounts(v ...*OauthAccount) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthAccountIDs(ids...)
}

// AddOauthSessionIDs adds the "oauth_sessions" edge to the OauthSession entity by IDs.
func (_u *OauthProviderUpdateOne) AddOauthSessionIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.AddOauthSessionIDs(ids...)
	return _u
}

// AddOauthSessions adds the "oauth_sessions" edges to the OauthSession entity.
func (_u *OauthProviderUpdateOne) AddOauthSessions(v ...*OauthSession) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOauthSessionIDs(ids...)
}

// Mutation returns the OauthProviderMutation object of the builder.
func (_u *OauthProviderUpdateOne) Mutation() *OauthProviderMutation {
	return _u.mutation
}

// ClearOauthAccounts clears all "oauth_accounts" edges to the OauthAccount entity.
func (_u *OauthProviderUpdateOne) ClearOauthAccounts() *OauthProviderUpdateOne {
	_u.mutation.ClearOauthAccounts()
	return _u
}

// RemoveOauthAccountIDs removes the "oauth_accounts" edge to OauthAccount entities by IDs.
func (_u *OauthProviderUpdateOne) RemoveOauthAccountIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.RemoveOauthAccountIDs(ids...)
	return _u
}

// RemoveOauthAccounts removes "oauth_accounts" edges to OauthAccount entities.
func (_u *OauthProviderUpdateOne) RemoveOauthAccounts(v ...*OauthAccount) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthAccountIDs(ids...)
}

// ClearOauthSessions clears all "oauth_sessions" edges to the OauthSession entity.
func (_u *OauthProviderUpdateOne) ClearOauthSessions() *OauthProviderUpdateOne {
	_u.mutation.ClearOauthSessions()
	return _u
}

// RemoveOauthSessionIDs removes the "oauth_sessions" edge to OauthSession entities by IDs.
func (_u *OauthProviderUpdateOne) RemoveOauthSessionIDs(ids ...uint64) *OauthProviderUpdateOne {
	_u.mutation.RemoveOauthSessionIDs(ids...)
	return _u
}

// RemoveOauthSessions removes "oauth_sessions" edges to OauthSession entities.
func (_u *OauthProviderUpdateOne) RemoveOauthSessions(v ...*OauthSession) *OauthProviderUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOauthSessionIDs(ids...)
}

// Where appends a list predicates to the OauthProviderUpdate builder.
func (_u *OauthProviderUpdateOne) Where(ps ...predicate.OauthProvider) *OauthProviderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthProviderUpdateOne) Select(field string, fields ...string) *OauthProviderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthProvider entity.
func (_u *OauthProviderUpdateOne) Save(ctx context.Context) (*OauthProvider, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthProviderUpdateOne) SaveX(ctx context.Context) *OauthProvider {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthProviderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthProviderUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := oauthprovider.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthProviderUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := oauthprovider.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.display_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := oauthprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderType(); ok {
		if err := oauthprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.provider_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EncryptedSecret(); ok {
		if err := oauthprovider.EncryptedSecretValidator(v); err != nil {
			return &ValidationError{Name: "encrypted_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.encrypted_secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EncryptionKeyID(); ok {
		if err := oauthprovider.EncryptionKeyIDValidator(v); err != nil {
			return &ValidationError{Name: "encryption_key_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.encryption_key_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURL(); ok {
		if err := oauthprovider.RedirectURLValidator(v); err != nil {
			return &ValidationError{Name: "redirect_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.redirect_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Scopes(); ok {
		if err := oauthprovider.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.scopes": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AuthURL(); ok {
		if err := oauthprovider.AuthURLValidator(v); err != nil {
			return &ValidationError{Name: "auth_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.auth_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TokenURL(); ok {
		if err := oauthprovider.TokenURLValidator(v); err != nil {
			return &ValidationError{Name: "token_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.token_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InfoURL(); ok {
		if err := oauthprovider.InfoURLValidator(v); err != nil {
			return &ValidationError{Name: "info_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.info_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Remark(); ok {
		if err := oauthprovider.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.remark": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IconURL(); ok {
		if err := oauthprovider.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.icon_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.WebhookURL(); ok {
		if err := oauthprovider.WebhookURLValidator(v); err != nil {
			return &ValidationError{Name: "webhook_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.webhook_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OauthProviderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthProviderUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OauthProviderUpdateOne) sqlSave(ctx context.Context) (_node *OauthProvider, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthprovider.Table, oauthprovider.Columns, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthprovider.FieldID)
		for _, f := range fields {
			if !oauthprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(oauthprovider.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(oauthprovider.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(oauthprovider.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(oauthprovider.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(oauthprovider.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(oauthprovider.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderType(); ok {
		_spec.SetField(oauthprovider.FieldProviderType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.EncryptedSecret(); ok {
		_spec.SetField(oauthprovider.FieldEncryptedSecret, field.TypeString, value)
	}
	if _u.mutation.EncryptedSecretCleared() {
		_spec.ClearField(oauthprovider.FieldEncryptedSecret, field.TypeString)
	}
	if value, ok := _u.mutation.EncryptionKeyID(); ok {
		_spec.SetField(oauthprovider.FieldEncryptionKeyID, field.TypeString, value)
	}
	if _u.mutation.EncryptionKeyIDCleared() {
		_spec.ClearField(oauthprovider.FieldEncryptionKeyID, field.TypeString)
	}
	if value, ok := _u.mutation.RedirectURL(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeString, value)
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(oauthprovider.FieldScopes, field.TypeString)
	}
	if value, ok := _u.mutation.AuthURL(); ok {
		_spec.SetField(oauthprovider.FieldAuthURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.TokenURL(); ok {
		_spec.SetField(oauthprovider.FieldTokenURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.InfoURL(); ok {
		_spec.SetField(oauthprovider.FieldInfoURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthStyle(); ok {
		_spec.SetField(oauthprovider.FieldAuthStyle, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAuthStyle(); ok {
		_spec.AddField(oauthprovider.FieldAuthStyle, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExtraConfig(); ok {
		_spec.SetField(oauthprovider.FieldExtraConfig, field.TypeJSON, value)
	}
	if _u.mutation.ExtraConfigCleared() {
		_spec.ClearField(oauthprovider.FieldExtraConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(oauthprovider.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(oauthprovider.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(oauthprovider.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(oauthprovider.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(oauthprovider.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.SupportPkce(); ok {
		_spec.SetField(oauthprovider.FieldSupportPkce, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IconURL(); ok {
		_spec.SetField(oauthprovider.FieldIconURL, field.TypeString, value)
	}
	if _u.mutation.IconURLCleared() {
		_spec.ClearField(oauthprovider.FieldIconURL, field.TypeString)
	}
	if value, ok := _u.mutation.CacheTTL(); ok {
		_spec.SetField(oauthprovider.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCacheTTL(); ok {
		_spec.AddField(oauthprovider.FieldCacheTTL, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WebhookURL(); ok {
		_spec.SetField(oauthprovider.FieldWebhookURL, field.TypeString, value)
	}
	if _u.mutation.WebhookURLCleared() {
		_spec.ClearField(oauthprovider.FieldWebhookURL, field.TypeString)
	}
	if value, ok := _u.mutation.SuccessCount(); ok {
		_spec.SetField(oauthprovider.FieldSuccessCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSuccessCount(); ok {
		_spec.AddField(oauthprovider.FieldSuccessCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.FailureCount(); ok {
		_spec.SetField(oauthprovider.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFailureCount(); ok {
		_spec.AddField(oauthprovider.FieldFailureCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(oauthprovider.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(oauthprovider.FieldLastUsedAt, field.TypeTime)
	}
	if _u.mutation.OauthAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthAccountsTable,
			Columns: []string{oauthprovider.OauthAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthAccountsIDs(); len(nodes) > 0 && !_u.mutation.OauthAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthAccountsTable,
			Columns: []string{oauthprovider.OauthAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthAccountsTable,
			Columns: []string{oauthprovider.OauthAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OauthSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthSessionsTable,
			Columns: []string{oauthprovider.OauthSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOauthSessionsIDs(); len(nodes) > 0 && !_u.mutation.OauthSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthSessionsTable,
			Columns: []string{oauthprovider.OauthSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OauthSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthSessionsTable,
			Columns: []string{oauthprovider.OauthSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &OauthProvider{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
