// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/casbinrule"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
)

// CasbinRuleUpdate is the builder for updating CasbinRule entities.
type CasbinRuleUpdate struct {
	config
	hooks     []Hook
	mutation  *CasbinRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CasbinRuleUpdate builder.
func (_u *CasbinRuleUpdate) Where(ps ...predicate.CasbinRule) *CasbinRuleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CasbinRuleUpdate) SetUpdatedAt(v time.Time) *CasbinRuleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CasbinRuleUpdate) SetStatus(v uint8) *CasbinRuleUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableStatus(v *uint8) *CasbinRuleUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CasbinRuleUpdate) AddStatus(v int8) *CasbinRuleUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *CasbinRuleUpdate) ClearStatus() *CasbinRuleUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetPtype sets the "ptype" field.
func (_u *CasbinRuleUpdate) SetPtype(v string) *CasbinRuleUpdate {
	_u.mutation.SetPtype(v)
	return _u
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillablePtype(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetPtype(*v)
	}
	return _u
}

// SetV0 sets the "v0" field.
func (_u *CasbinRuleUpdate) SetV0(v string) *CasbinRuleUpdate {
	_u.mutation.SetV0(v)
	return _u
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV0(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV0(*v)
	}
	return _u
}

// ClearV0 clears the value of the "v0" field.
func (_u *CasbinRuleUpdate) ClearV0() *CasbinRuleUpdate {
	_u.mutation.ClearV0()
	return _u
}

// SetV1 sets the "v1" field.
func (_u *CasbinRuleUpdate) SetV1(v string) *CasbinRuleUpdate {
	_u.mutation.SetV1(v)
	return _u
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV1(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV1(*v)
	}
	return _u
}

// ClearV1 clears the value of the "v1" field.
func (_u *CasbinRuleUpdate) ClearV1() *CasbinRuleUpdate {
	_u.mutation.ClearV1()
	return _u
}

// SetV2 sets the "v2" field.
func (_u *CasbinRuleUpdate) SetV2(v string) *CasbinRuleUpdate {
	_u.mutation.SetV2(v)
	return _u
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV2(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV2(*v)
	}
	return _u
}

// ClearV2 clears the value of the "v2" field.
func (_u *CasbinRuleUpdate) ClearV2() *CasbinRuleUpdate {
	_u.mutation.ClearV2()
	return _u
}

// SetV3 sets the "v3" field.
func (_u *CasbinRuleUpdate) SetV3(v string) *CasbinRuleUpdate {
	_u.mutation.SetV3(v)
	return _u
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV3(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV3(*v)
	}
	return _u
}

// ClearV3 clears the value of the "v3" field.
func (_u *CasbinRuleUpdate) ClearV3() *CasbinRuleUpdate {
	_u.mutation.ClearV3()
	return _u
}

// SetV4 sets the "v4" field.
func (_u *CasbinRuleUpdate) SetV4(v string) *CasbinRuleUpdate {
	_u.mutation.SetV4(v)
	return _u
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV4(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV4(*v)
	}
	return _u
}

// ClearV4 clears the value of the "v4" field.
func (_u *CasbinRuleUpdate) ClearV4() *CasbinRuleUpdate {
	_u.mutation.ClearV4()
	return _u
}

// SetV5 sets the "v5" field.
func (_u *CasbinRuleUpdate) SetV5(v string) *CasbinRuleUpdate {
	_u.mutation.SetV5(v)
	return _u
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV5(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV5(*v)
	}
	return _u
}

// ClearV5 clears the value of the "v5" field.
func (_u *CasbinRuleUpdate) ClearV5() *CasbinRuleUpdate {
	_u.mutation.ClearV5()
	return _u
}

// SetServiceName sets the "service_name" field.
func (_u *CasbinRuleUpdate) SetServiceName(v string) *CasbinRuleUpdate {
	_u.mutation.SetServiceName(v)
	return _u
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableServiceName(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetServiceName(*v)
	}
	return _u
}

// SetRuleName sets the "rule_name" field.
func (_u *CasbinRuleUpdate) SetRuleName(v string) *CasbinRuleUpdate {
	_u.mutation.SetRuleName(v)
	return _u
}

// SetNillableRuleName sets the "rule_name" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableRuleName(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetRuleName(*v)
	}
	return _u
}

// ClearRuleName clears the value of the "rule_name" field.
func (_u *CasbinRuleUpdate) ClearRuleName() *CasbinRuleUpdate {
	_u.mutation.ClearRuleName()
	return _u
}

// SetDescription sets the "description" field.
func (_u *CasbinRuleUpdate) SetDescription(v string) *CasbinRuleUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableDescription(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CasbinRuleUpdate) ClearDescription() *CasbinRuleUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *CasbinRuleUpdate) SetCategory(v string) *CasbinRuleUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableCategory(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetVersion sets the "version" field.
func (_u *CasbinRuleUpdate) SetVersion(v string) *CasbinRuleUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableVersion(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetRequireApproval sets the "require_approval" field.
func (_u *CasbinRuleUpdate) SetRequireApproval(v bool) *CasbinRuleUpdate {
	_u.mutation.SetRequireApproval(v)
	return _u
}

// SetNillableRequireApproval sets the "require_approval" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableRequireApproval(v *bool) *CasbinRuleUpdate {
	if v != nil {
		_u.SetRequireApproval(*v)
	}
	return _u
}

// SetApprovalStatus sets the "approval_status" field.
func (_u *CasbinRuleUpdate) SetApprovalStatus(v casbinrule.ApprovalStatus) *CasbinRuleUpdate {
	_u.mutation.SetApprovalStatus(v)
	return _u
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableApprovalStatus(v *casbinrule.ApprovalStatus) *CasbinRuleUpdate {
	if v != nil {
		_u.SetApprovalStatus(*v)
	}
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *CasbinRuleUpdate) SetApprovedBy(v uint64) *CasbinRuleUpdate {
	_u.mutation.ResetApprovedBy()
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableApprovedBy(v *uint64) *CasbinRuleUpdate {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// AddApprovedBy adds value to the "approved_by" field.
func (_u *CasbinRuleUpdate) AddApprovedBy(v int64) *CasbinRuleUpdate {
	_u.mutation.AddApprovedBy(v)
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *CasbinRuleUpdate) ClearApprovedBy() *CasbinRuleUpdate {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *CasbinRuleUpdate) SetApprovedAt(v time.Time) *CasbinRuleUpdate {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableApprovedAt(v *time.Time) *CasbinRuleUpdate {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *CasbinRuleUpdate) ClearApprovedAt() *CasbinRuleUpdate {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetEffectiveFrom sets the "effective_from" field.
func (_u *CasbinRuleUpdate) SetEffectiveFrom(v time.Time) *CasbinRuleUpdate {
	_u.mutation.SetEffectiveFrom(v)
	return _u
}

// SetNillableEffectiveFrom sets the "effective_from" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableEffectiveFrom(v *time.Time) *CasbinRuleUpdate {
	if v != nil {
		_u.SetEffectiveFrom(*v)
	}
	return _u
}

// ClearEffectiveFrom clears the value of the "effective_from" field.
func (_u *CasbinRuleUpdate) ClearEffectiveFrom() *CasbinRuleUpdate {
	_u.mutation.ClearEffectiveFrom()
	return _u
}

// SetEffectiveTo sets the "effective_to" field.
func (_u *CasbinRuleUpdate) SetEffectiveTo(v time.Time) *CasbinRuleUpdate {
	_u.mutation.SetEffectiveTo(v)
	return _u
}

// SetNillableEffectiveTo sets the "effective_to" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableEffectiveTo(v *time.Time) *CasbinRuleUpdate {
	if v != nil {
		_u.SetEffectiveTo(*v)
	}
	return _u
}

// ClearEffectiveTo clears the value of the "effective_to" field.
func (_u *CasbinRuleUpdate) ClearEffectiveTo() *CasbinRuleUpdate {
	_u.mutation.ClearEffectiveTo()
	return _u
}

// SetIsTemporary sets the "is_temporary" field.
func (_u *CasbinRuleUpdate) SetIsTemporary(v bool) *CasbinRuleUpdate {
	_u.mutation.SetIsTemporary(v)
	return _u
}

// SetNillableIsTemporary sets the "is_temporary" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableIsTemporary(v *bool) *CasbinRuleUpdate {
	if v != nil {
		_u.SetIsTemporary(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *CasbinRuleUpdate) SetMetadata(v string) *CasbinRuleUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableMetadata(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CasbinRuleUpdate) ClearMetadata() *CasbinRuleUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetTags sets the "tags" field.
func (_u *CasbinRuleUpdate) SetTags(v string) *CasbinRuleUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableTags(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetTags(*v)
	}
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *CasbinRuleUpdate) ClearTags() *CasbinRuleUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetUsageCount sets the "usage_count" field.
func (_u *CasbinRuleUpdate) SetUsageCount(v int64) *CasbinRuleUpdate {
	_u.mutation.ResetUsageCount()
	_u.mutation.SetUsageCount(v)
	return _u
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableUsageCount(v *int64) *CasbinRuleUpdate {
	if v != nil {
		_u.SetUsageCount(*v)
	}
	return _u
}

// AddUsageCount adds value to the "usage_count" field.
func (_u *CasbinRuleUpdate) AddUsageCount(v int64) *CasbinRuleUpdate {
	_u.mutation.AddUsageCount(v)
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *CasbinRuleUpdate) SetLastUsedAt(v time.Time) *CasbinRuleUpdate {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableLastUsedAt(v *time.Time) *CasbinRuleUpdate {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *CasbinRuleUpdate) ClearLastUsedAt() *CasbinRuleUpdate {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (_u *CasbinRuleUpdate) Mutation() *CasbinRuleMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CasbinRuleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CasbinRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CasbinRuleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CasbinRuleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CasbinRuleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := casbinrule.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CasbinRuleUpdate) check() error {
	if v, ok := _u.mutation.ApprovalStatus(); ok {
		if err := casbinrule.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "CasbinRule.approval_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CasbinRuleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CasbinRuleUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CasbinRuleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(casbinrule.Table, casbinrule.Columns, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(casbinrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(casbinrule.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(casbinrule.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(casbinrule.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Ptype(); ok {
		_spec.SetField(casbinrule.FieldPtype, field.TypeString, value)
	}
	if value, ok := _u.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
	}
	if _u.mutation.V0Cleared() {
		_spec.ClearField(casbinrule.FieldV0, field.TypeString)
	}
	if value, ok := _u.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
	}
	if _u.mutation.V1Cleared() {
		_spec.ClearField(casbinrule.FieldV1, field.TypeString)
	}
	if value, ok := _u.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
	}
	if _u.mutation.V2Cleared() {
		_spec.ClearField(casbinrule.FieldV2, field.TypeString)
	}
	if value, ok := _u.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
	}
	if _u.mutation.V3Cleared() {
		_spec.ClearField(casbinrule.FieldV3, field.TypeString)
	}
	if value, ok := _u.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
	}
	if _u.mutation.V4Cleared() {
		_spec.ClearField(casbinrule.FieldV4, field.TypeString)
	}
	if value, ok := _u.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
	}
	if _u.mutation.V5Cleared() {
		_spec.ClearField(casbinrule.FieldV5, field.TypeString)
	}
	if value, ok := _u.mutation.ServiceName(); ok {
		_spec.SetField(casbinrule.FieldServiceName, field.TypeString, value)
	}
	if value, ok := _u.mutation.RuleName(); ok {
		_spec.SetField(casbinrule.FieldRuleName, field.TypeString, value)
	}
	if _u.mutation.RuleNameCleared() {
		_spec.ClearField(casbinrule.FieldRuleName, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(casbinrule.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(casbinrule.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(casbinrule.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(casbinrule.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.RequireApproval(); ok {
		_spec.SetField(casbinrule.FieldRequireApproval, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ApprovalStatus(); ok {
		_spec.SetField(casbinrule.FieldApprovalStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(casbinrule.FieldApprovedBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedApprovedBy(); ok {
		_spec.AddField(casbinrule.FieldApprovedBy, field.TypeUint64, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(casbinrule.FieldApprovedBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(casbinrule.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(casbinrule.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.EffectiveFrom(); ok {
		_spec.SetField(casbinrule.FieldEffectiveFrom, field.TypeTime, value)
	}
	if _u.mutation.EffectiveFromCleared() {
		_spec.ClearField(casbinrule.FieldEffectiveFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.EffectiveTo(); ok {
		_spec.SetField(casbinrule.FieldEffectiveTo, field.TypeTime, value)
	}
	if _u.mutation.EffectiveToCleared() {
		_spec.ClearField(casbinrule.FieldEffectiveTo, field.TypeTime)
	}
	if value, ok := _u.mutation.IsTemporary(); ok {
		_spec.SetField(casbinrule.FieldIsTemporary, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(casbinrule.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(casbinrule.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(casbinrule.FieldTags, field.TypeString, value)
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(casbinrule.FieldTags, field.TypeString)
	}
	if value, ok := _u.mutation.UsageCount(); ok {
		_spec.SetField(casbinrule.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUsageCount(); ok {
		_spec.AddField(casbinrule.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(casbinrule.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(casbinrule.FieldLastUsedAt, field.TypeTime)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CasbinRuleUpdateOne is the builder for updating a single CasbinRule entity.
type CasbinRuleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CasbinRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CasbinRuleUpdateOne) SetUpdatedAt(v time.Time) *CasbinRuleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CasbinRuleUpdateOne) SetStatus(v uint8) *CasbinRuleUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableStatus(v *uint8) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CasbinRuleUpdateOne) AddStatus(v int8) *CasbinRuleUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *CasbinRuleUpdateOne) ClearStatus() *CasbinRuleUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetPtype sets the "ptype" field.
func (_u *CasbinRuleUpdateOne) SetPtype(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetPtype(v)
	return _u
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillablePtype(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetPtype(*v)
	}
	return _u
}

// SetV0 sets the "v0" field.
func (_u *CasbinRuleUpdateOne) SetV0(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV0(v)
	return _u
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV0(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV0(*v)
	}
	return _u
}

// ClearV0 clears the value of the "v0" field.
func (_u *CasbinRuleUpdateOne) ClearV0() *CasbinRuleUpdateOne {
	_u.mutation.ClearV0()
	return _u
}

// SetV1 sets the "v1" field.
func (_u *CasbinRuleUpdateOne) SetV1(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV1(v)
	return _u
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV1(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV1(*v)
	}
	return _u
}

// ClearV1 clears the value of the "v1" field.
func (_u *CasbinRuleUpdateOne) ClearV1() *CasbinRuleUpdateOne {
	_u.mutation.ClearV1()
	return _u
}

// SetV2 sets the "v2" field.
func (_u *CasbinRuleUpdateOne) SetV2(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV2(v)
	return _u
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV2(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV2(*v)
	}
	return _u
}

// ClearV2 clears the value of the "v2" field.
func (_u *CasbinRuleUpdateOne) ClearV2() *CasbinRuleUpdateOne {
	_u.mutation.ClearV2()
	return _u
}

// SetV3 sets the "v3" field.
func (_u *CasbinRuleUpdateOne) SetV3(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV3(v)
	return _u
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV3(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV3(*v)
	}
	return _u
}

// ClearV3 clears the value of the "v3" field.
func (_u *CasbinRuleUpdateOne) ClearV3() *CasbinRuleUpdateOne {
	_u.mutation.ClearV3()
	return _u
}

// SetV4 sets the "v4" field.
func (_u *CasbinRuleUpdateOne) SetV4(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV4(v)
	return _u
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV4(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV4(*v)
	}
	return _u
}

// ClearV4 clears the value of the "v4" field.
func (_u *CasbinRuleUpdateOne) ClearV4() *CasbinRuleUpdateOne {
	_u.mutation.ClearV4()
	return _u
}

// SetV5 sets the "v5" field.
func (_u *CasbinRuleUpdateOne) SetV5(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV5(v)
	return _u
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV5(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV5(*v)
	}
	return _u
}

// ClearV5 clears the value of the "v5" field.
func (_u *CasbinRuleUpdateOne) ClearV5() *CasbinRuleUpdateOne {
	_u.mutation.ClearV5()
	return _u
}

// SetServiceName sets the "service_name" field.
func (_u *CasbinRuleUpdateOne) SetServiceName(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetServiceName(v)
	return _u
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableServiceName(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetServiceName(*v)
	}
	return _u
}

// SetRuleName sets the "rule_name" field.
func (_u *CasbinRuleUpdateOne) SetRuleName(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetRuleName(v)
	return _u
}

// SetNillableRuleName sets the "rule_name" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableRuleName(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetRuleName(*v)
	}
	return _u
}

// ClearRuleName clears the value of the "rule_name" field.
func (_u *CasbinRuleUpdateOne) ClearRuleName() *CasbinRuleUpdateOne {
	_u.mutation.ClearRuleName()
	return _u
}

// SetDescription sets the "description" field.
func (_u *CasbinRuleUpdateOne) SetDescription(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableDescription(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CasbinRuleUpdateOne) ClearDescription() *CasbinRuleUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *CasbinRuleUpdateOne) SetCategory(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableCategory(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetVersion sets the "version" field.
func (_u *CasbinRuleUpdateOne) SetVersion(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableVersion(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetRequireApproval sets the "require_approval" field.
func (_u *CasbinRuleUpdateOne) SetRequireApproval(v bool) *CasbinRuleUpdateOne {
	_u.mutation.SetRequireApproval(v)
	return _u
}

// SetNillableRequireApproval sets the "require_approval" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableRequireApproval(v *bool) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetRequireApproval(*v)
	}
	return _u
}

// SetApprovalStatus sets the "approval_status" field.
func (_u *CasbinRuleUpdateOne) SetApprovalStatus(v casbinrule.ApprovalStatus) *CasbinRuleUpdateOne {
	_u.mutation.SetApprovalStatus(v)
	return _u
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableApprovalStatus(v *casbinrule.ApprovalStatus) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetApprovalStatus(*v)
	}
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *CasbinRuleUpdateOne) SetApprovedBy(v uint64) *CasbinRuleUpdateOne {
	_u.mutation.ResetApprovedBy()
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableApprovedBy(v *uint64) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// AddApprovedBy adds value to the "approved_by" field.
func (_u *CasbinRuleUpdateOne) AddApprovedBy(v int64) *CasbinRuleUpdateOne {
	_u.mutation.AddApprovedBy(v)
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *CasbinRuleUpdateOne) ClearApprovedBy() *CasbinRuleUpdateOne {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *CasbinRuleUpdateOne) SetApprovedAt(v time.Time) *CasbinRuleUpdateOne {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableApprovedAt(v *time.Time) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *CasbinRuleUpdateOne) ClearApprovedAt() *CasbinRuleUpdateOne {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetEffectiveFrom sets the "effective_from" field.
func (_u *CasbinRuleUpdateOne) SetEffectiveFrom(v time.Time) *CasbinRuleUpdateOne {
	_u.mutation.SetEffectiveFrom(v)
	return _u
}

// SetNillableEffectiveFrom sets the "effective_from" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableEffectiveFrom(v *time.Time) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetEffectiveFrom(*v)
	}
	return _u
}

// ClearEffectiveFrom clears the value of the "effective_from" field.
func (_u *CasbinRuleUpdateOne) ClearEffectiveFrom() *CasbinRuleUpdateOne {
	_u.mutation.ClearEffectiveFrom()
	return _u
}

// SetEffectiveTo sets the "effective_to" field.
func (_u *CasbinRuleUpdateOne) SetEffectiveTo(v time.Time) *CasbinRuleUpdateOne {
	_u.mutation.SetEffectiveTo(v)
	return _u
}

// SetNillableEffectiveTo sets the "effective_to" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableEffectiveTo(v *time.Time) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetEffectiveTo(*v)
	}
	return _u
}

// ClearEffectiveTo clears the value of the "effective_to" field.
func (_u *CasbinRuleUpdateOne) ClearEffectiveTo() *CasbinRuleUpdateOne {
	_u.mutation.ClearEffectiveTo()
	return _u
}

// SetIsTemporary sets the "is_temporary" field.
func (_u *CasbinRuleUpdateOne) SetIsTemporary(v bool) *CasbinRuleUpdateOne {
	_u.mutation.SetIsTemporary(v)
	return _u
}

// SetNillableIsTemporary sets the "is_temporary" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableIsTemporary(v *bool) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetIsTemporary(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *CasbinRuleUpdateOne) SetMetadata(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableMetadata(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CasbinRuleUpdateOne) ClearMetadata() *CasbinRuleUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetTags sets the "tags" field.
func (_u *CasbinRuleUpdateOne) SetTags(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableTags(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetTags(*v)
	}
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *CasbinRuleUpdateOne) ClearTags() *CasbinRuleUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetUsageCount sets the "usage_count" field.
func (_u *CasbinRuleUpdateOne) SetUsageCount(v int64) *CasbinRuleUpdateOne {
	_u.mutation.ResetUsageCount()
	_u.mutation.SetUsageCount(v)
	return _u
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableUsageCount(v *int64) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetUsageCount(*v)
	}
	return _u
}

// AddUsageCount adds value to the "usage_count" field.
func (_u *CasbinRuleUpdateOne) AddUsageCount(v int64) *CasbinRuleUpdateOne {
	_u.mutation.AddUsageCount(v)
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *CasbinRuleUpdateOne) SetLastUsedAt(v time.Time) *CasbinRuleUpdateOne {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableLastUsedAt(v *time.Time) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *CasbinRuleUpdateOne) ClearLastUsedAt() *CasbinRuleUpdateOne {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (_u *CasbinRuleUpdateOne) Mutation() *CasbinRuleMutation {
	return _u.mutation
}

// Where appends a list predicates to the CasbinRuleUpdate builder.
func (_u *CasbinRuleUpdateOne) Where(ps ...predicate.CasbinRule) *CasbinRuleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CasbinRuleUpdateOne) Select(field string, fields ...string) *CasbinRuleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CasbinRule entity.
func (_u *CasbinRuleUpdateOne) Save(ctx context.Context) (*CasbinRule, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CasbinRuleUpdateOne) SaveX(ctx context.Context) *CasbinRule {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CasbinRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CasbinRuleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CasbinRuleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := casbinrule.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CasbinRuleUpdateOne) check() error {
	if v, ok := _u.mutation.ApprovalStatus(); ok {
		if err := casbinrule.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "CasbinRule.approval_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CasbinRuleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CasbinRuleUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CasbinRuleUpdateOne) sqlSave(ctx context.Context) (_node *CasbinRule, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(casbinrule.Table, casbinrule.Columns, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CasbinRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, casbinrule.FieldID)
		for _, f := range fields {
			if !casbinrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != casbinrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(casbinrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(casbinrule.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(casbinrule.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(casbinrule.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Ptype(); ok {
		_spec.SetField(casbinrule.FieldPtype, field.TypeString, value)
	}
	if value, ok := _u.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
	}
	if _u.mutation.V0Cleared() {
		_spec.ClearField(casbinrule.FieldV0, field.TypeString)
	}
	if value, ok := _u.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
	}
	if _u.mutation.V1Cleared() {
		_spec.ClearField(casbinrule.FieldV1, field.TypeString)
	}
	if value, ok := _u.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
	}
	if _u.mutation.V2Cleared() {
		_spec.ClearField(casbinrule.FieldV2, field.TypeString)
	}
	if value, ok := _u.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
	}
	if _u.mutation.V3Cleared() {
		_spec.ClearField(casbinrule.FieldV3, field.TypeString)
	}
	if value, ok := _u.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
	}
	if _u.mutation.V4Cleared() {
		_spec.ClearField(casbinrule.FieldV4, field.TypeString)
	}
	if value, ok := _u.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
	}
	if _u.mutation.V5Cleared() {
		_spec.ClearField(casbinrule.FieldV5, field.TypeString)
	}
	if value, ok := _u.mutation.ServiceName(); ok {
		_spec.SetField(casbinrule.FieldServiceName, field.TypeString, value)
	}
	if value, ok := _u.mutation.RuleName(); ok {
		_spec.SetField(casbinrule.FieldRuleName, field.TypeString, value)
	}
	if _u.mutation.RuleNameCleared() {
		_spec.ClearField(casbinrule.FieldRuleName, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(casbinrule.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(casbinrule.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(casbinrule.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(casbinrule.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.RequireApproval(); ok {
		_spec.SetField(casbinrule.FieldRequireApproval, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ApprovalStatus(); ok {
		_spec.SetField(casbinrule.FieldApprovalStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(casbinrule.FieldApprovedBy, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedApprovedBy(); ok {
		_spec.AddField(casbinrule.FieldApprovedBy, field.TypeUint64, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(casbinrule.FieldApprovedBy, field.TypeUint64)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(casbinrule.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(casbinrule.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.EffectiveFrom(); ok {
		_spec.SetField(casbinrule.FieldEffectiveFrom, field.TypeTime, value)
	}
	if _u.mutation.EffectiveFromCleared() {
		_spec.ClearField(casbinrule.FieldEffectiveFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.EffectiveTo(); ok {
		_spec.SetField(casbinrule.FieldEffectiveTo, field.TypeTime, value)
	}
	if _u.mutation.EffectiveToCleared() {
		_spec.ClearField(casbinrule.FieldEffectiveTo, field.TypeTime)
	}
	if value, ok := _u.mutation.IsTemporary(); ok {
		_spec.SetField(casbinrule.FieldIsTemporary, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(casbinrule.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(casbinrule.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(casbinrule.FieldTags, field.TypeString, value)
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(casbinrule.FieldTags, field.TypeString)
	}
	if value, ok := _u.mutation.UsageCount(); ok {
		_spec.SetField(casbinrule.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUsageCount(); ok {
		_spec.AddField(casbinrule.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(casbinrule.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(casbinrule.FieldLastUsedAt, field.TypeTime)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &CasbinRule{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
