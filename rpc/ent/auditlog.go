// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/coder-lulu/newbee-core/rpc/ent/auditlog"
	uuid "github.com/gofrs/uuid/v5"
)

// Audit Log Table | 审计日志表
type AuditLog struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Tenant ID | 租户ID
	TenantID string `json:"tenant_id,omitempty"`
	// User ID who performed the operation | 执行操作的用户ID
	UserID string `json:"user_id,omitempty"`
	// User name who performed the operation | 执行操作的用户名
	UserName string `json:"user_name,omitempty"`
	// Operation type | 操作类型
	OperationType auditlog.OperationType `json:"operation_type,omitempty"`
	// Resource type that was operated on | 被操作的资源类型
	ResourceType string `json:"resource_type,omitempty"`
	// Resource ID that was operated on | 被操作的资源ID
	ResourceID string `json:"resource_id,omitempty"`
	// HTTP request method | HTTP请求方法
	RequestMethod string `json:"request_method,omitempty"`
	// HTTP request path | HTTP请求路径
	RequestPath string `json:"request_path,omitempty"`
	// Request data (JSON format, sensitive data filtered) | 请求数据(JSON格式，已过滤敏感数据)
	RequestData string `json:"request_data,omitempty"`
	// HTTP response status code | HTTP响应状态码
	ResponseStatus int `json:"response_status,omitempty"`
	// Response data (JSON format, optional) | 响应数据(JSON格式，可选)
	ResponseData string `json:"response_data,omitempty"`
	// Client IP address | 客户端IP地址
	IPAddress string `json:"ip_address,omitempty"`
	// User agent string | 用户代理字符串
	UserAgent string `json:"user_agent,omitempty"`
	// Request processing duration in milliseconds | 请求处理耗时(毫秒)
	DurationMs int64 `json:"duration_ms,omitempty"`
	// Error message if operation failed | 操作失败时的错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// Additional metadata in JSON format | 额外的元数据(JSON格式)
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldMetadata:
			values[i] = new([]byte)
		case auditlog.FieldStatus, auditlog.FieldResponseStatus, auditlog.FieldDurationMs:
			values[i] = new(sql.NullInt64)
		case auditlog.FieldTenantID, auditlog.FieldUserID, auditlog.FieldUserName, auditlog.FieldOperationType, auditlog.FieldResourceType, auditlog.FieldResourceID, auditlog.FieldRequestMethod, auditlog.FieldRequestPath, auditlog.FieldRequestData, auditlog.FieldResponseData, auditlog.FieldIPAddress, auditlog.FieldUserAgent, auditlog.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case auditlog.FieldCreatedAt, auditlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case auditlog.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLog fields.
func (_m *AuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case auditlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case auditlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case auditlog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = uint8(value.Int64)
			}
		case auditlog.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case auditlog.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case auditlog.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				_m.UserName = value.String
			}
		case auditlog.FieldOperationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation_type", values[i])
			} else if value.Valid {
				_m.OperationType = auditlog.OperationType(value.String)
			}
		case auditlog.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				_m.ResourceType = value.String
			}
		case auditlog.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case auditlog.FieldRequestMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_method", values[i])
			} else if value.Valid {
				_m.RequestMethod = value.String
			}
		case auditlog.FieldRequestPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_path", values[i])
			} else if value.Valid {
				_m.RequestPath = value.String
			}
		case auditlog.FieldRequestData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_data", values[i])
			} else if value.Valid {
				_m.RequestData = value.String
			}
		case auditlog.FieldResponseStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_status", values[i])
			} else if value.Valid {
				_m.ResponseStatus = int(value.Int64)
			}
		case auditlog.FieldResponseData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_data", values[i])
			} else if value.Valid {
				_m.ResponseData = value.String
			}
		case auditlog.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case auditlog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case auditlog.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				_m.DurationMs = value.Int64
			}
		case auditlog.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				_m.ErrorMessage = value.String
			}
		case auditlog.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLog.
// This includes values selected through modifiers, order, etc.
func (_m *AuditLog) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this AuditLog.
// Note that you need to call AuditLog.Unwrap() before calling this method if this AuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AuditLog) Update() *AuditLogUpdateOne {
	return NewAuditLogClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AuditLog) Unwrap() *AuditLog {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuditLog is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(_m.UserName)
	builder.WriteString(", ")
	builder.WriteString("operation_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.OperationType))
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(_m.ResourceType)
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("request_method=")
	builder.WriteString(_m.RequestMethod)
	builder.WriteString(", ")
	builder.WriteString("request_path=")
	builder.WriteString(_m.RequestPath)
	builder.WriteString(", ")
	builder.WriteString("request_data=")
	builder.WriteString(_m.RequestData)
	builder.WriteString(", ")
	builder.WriteString("response_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.ResponseStatus))
	builder.WriteString(", ")
	builder.WriteString("response_data=")
	builder.WriteString(_m.ResponseData)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", _m.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(_m.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogs is a parsable slice of AuditLog.
type AuditLogs []*AuditLog
