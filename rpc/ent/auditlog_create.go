// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/auditlog"
	uuid "github.com/gofrs/uuid/v5"
)

// AuditLogCreate is the builder for creating a AuditLog entity.
type AuditLogCreate struct {
	config
	mutation *AuditLogMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *AuditLogCreate) SetCreatedAt(v time.Time) *AuditLogCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableCreatedAt(v *time.Time) *AuditLogCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AuditLogCreate) SetUpdatedAt(v time.Time) *AuditLogCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableUpdatedAt(v *time.Time) *AuditLogCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *AuditLogCreate) SetStatus(v uint8) *AuditLogCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableStatus(v *uint8) *AuditLogCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *AuditLogCreate) SetTenantID(v string) *AuditLogCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *AuditLogCreate) SetUserID(v string) *AuditLogCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetUserName sets the "user_name" field.
func (_c *AuditLogCreate) SetUserName(v string) *AuditLogCreate {
	_c.mutation.SetUserName(v)
	return _c
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableUserName(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetUserName(*v)
	}
	return _c
}

// SetOperationType sets the "operation_type" field.
func (_c *AuditLogCreate) SetOperationType(v auditlog.OperationType) *AuditLogCreate {
	_c.mutation.SetOperationType(v)
	return _c
}

// SetResourceType sets the "resource_type" field.
func (_c *AuditLogCreate) SetResourceType(v string) *AuditLogCreate {
	_c.mutation.SetResourceType(v)
	return _c
}

// SetResourceID sets the "resource_id" field.
func (_c *AuditLogCreate) SetResourceID(v string) *AuditLogCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableResourceID(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetResourceID(*v)
	}
	return _c
}

// SetRequestMethod sets the "request_method" field.
func (_c *AuditLogCreate) SetRequestMethod(v string) *AuditLogCreate {
	_c.mutation.SetRequestMethod(v)
	return _c
}

// SetRequestPath sets the "request_path" field.
func (_c *AuditLogCreate) SetRequestPath(v string) *AuditLogCreate {
	_c.mutation.SetRequestPath(v)
	return _c
}

// SetRequestData sets the "request_data" field.
func (_c *AuditLogCreate) SetRequestData(v string) *AuditLogCreate {
	_c.mutation.SetRequestData(v)
	return _c
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableRequestData(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetRequestData(*v)
	}
	return _c
}

// SetResponseStatus sets the "response_status" field.
func (_c *AuditLogCreate) SetResponseStatus(v int) *AuditLogCreate {
	_c.mutation.SetResponseStatus(v)
	return _c
}

// SetResponseData sets the "response_data" field.
func (_c *AuditLogCreate) SetResponseData(v string) *AuditLogCreate {
	_c.mutation.SetResponseData(v)
	return _c
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableResponseData(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetResponseData(*v)
	}
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *AuditLogCreate) SetIPAddress(v string) *AuditLogCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *AuditLogCreate) SetUserAgent(v string) *AuditLogCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableUserAgent(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetDurationMs sets the "duration_ms" field.
func (_c *AuditLogCreate) SetDurationMs(v int64) *AuditLogCreate {
	_c.mutation.SetDurationMs(v)
	return _c
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableDurationMs(v *int64) *AuditLogCreate {
	if v != nil {
		_c.SetDurationMs(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *AuditLogCreate) SetErrorMessage(v string) *AuditLogCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableErrorMessage(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *AuditLogCreate) SetMetadata(v map[string]interface{}) *AuditLogCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetID sets the "id" field.
func (_c *AuditLogCreate) SetID(v uuid.UUID) *AuditLogCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableID(v *uuid.UUID) *AuditLogCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the AuditLogMutation object of the builder.
func (_c *AuditLogCreate) Mutation() *AuditLogMutation {
	return _c.mutation
}

// Save creates the AuditLog in the database.
func (_c *AuditLogCreate) Save(ctx context.Context) (*AuditLog, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AuditLogCreate) SaveX(ctx context.Context) *AuditLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuditLogCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuditLogCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AuditLogCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := auditlog.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := auditlog.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := auditlog.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.DurationMs(); !ok {
		v := auditlog.DefaultDurationMs
		_c.mutation.SetDurationMs(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := auditlog.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AuditLogCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuditLog.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AuditLog.updated_at"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "AuditLog.tenant_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AuditLog.user_id"`)}
	}
	if _, ok := _c.mutation.OperationType(); !ok {
		return &ValidationError{Name: "operation_type", err: errors.New(`ent: missing required field "AuditLog.operation_type"`)}
	}
	if v, ok := _c.mutation.OperationType(); ok {
		if err := auditlog.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`ent: validator failed for field "AuditLog.operation_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`ent: missing required field "AuditLog.resource_type"`)}
	}
	if _, ok := _c.mutation.RequestMethod(); !ok {
		return &ValidationError{Name: "request_method", err: errors.New(`ent: missing required field "AuditLog.request_method"`)}
	}
	if _, ok := _c.mutation.RequestPath(); !ok {
		return &ValidationError{Name: "request_path", err: errors.New(`ent: missing required field "AuditLog.request_path"`)}
	}
	if _, ok := _c.mutation.ResponseStatus(); !ok {
		return &ValidationError{Name: "response_status", err: errors.New(`ent: missing required field "AuditLog.response_status"`)}
	}
	if _, ok := _c.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "AuditLog.ip_address"`)}
	}
	if _, ok := _c.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`ent: missing required field "AuditLog.duration_ms"`)}
	}
	return nil
}

func (_c *AuditLogCreate) sqlSave(ctx context.Context) (*AuditLog, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AuditLogCreate) createSpec() (*AuditLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AuditLog{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(auditlog.Table, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(auditlog.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(auditlog.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(auditlog.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.UserName(); ok {
		_spec.SetField(auditlog.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := _c.mutation.OperationType(); ok {
		_spec.SetField(auditlog.FieldOperationType, field.TypeEnum, value)
		_node.OperationType = value
	}
	if value, ok := _c.mutation.ResourceType(); ok {
		_spec.SetField(auditlog.FieldResourceType, field.TypeString, value)
		_node.ResourceType = value
	}
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(auditlog.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := _c.mutation.RequestMethod(); ok {
		_spec.SetField(auditlog.FieldRequestMethod, field.TypeString, value)
		_node.RequestMethod = value
	}
	if value, ok := _c.mutation.RequestPath(); ok {
		_spec.SetField(auditlog.FieldRequestPath, field.TypeString, value)
		_node.RequestPath = value
	}
	if value, ok := _c.mutation.RequestData(); ok {
		_spec.SetField(auditlog.FieldRequestData, field.TypeString, value)
		_node.RequestData = value
	}
	if value, ok := _c.mutation.ResponseStatus(); ok {
		_spec.SetField(auditlog.FieldResponseStatus, field.TypeInt, value)
		_node.ResponseStatus = value
	}
	if value, ok := _c.mutation.ResponseData(); ok {
		_spec.SetField(auditlog.FieldResponseData, field.TypeString, value)
		_node.ResponseData = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(auditlog.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(auditlog.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.DurationMs(); ok {
		_spec.SetField(auditlog.FieldDurationMs, field.TypeInt64, value)
		_node.DurationMs = value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(auditlog.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(auditlog.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// AuditLogCreateBulk is the builder for creating many AuditLog entities in bulk.
type AuditLogCreateBulk struct {
	config
	err      error
	builders []*AuditLogCreate
}

// Save creates the AuditLog entities in the database.
func (_c *AuditLogCreateBulk) Save(ctx context.Context) ([]*AuditLog, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AuditLog, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AuditLogCreateBulk) SaveX(ctx context.Context) []*AuditLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuditLogCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuditLogCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
