// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthaccount"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
	"github.com/coder-lulu/newbee-core/rpc/ent/user"
	uuid "github.com/gofrs/uuid/v5"
)

// OAuth Account Binding Table | OAuth账户绑定表
type OauthAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Tenant ID | 租户 ID
	TenantID uint64 `json:"tenant_id,omitempty"`
	// Associated user ID | 关联的用户ID
	UserID uuid.UUID `json:"user_id,omitempty"`
	// OAuth provider ID | OAuth提供商ID
	ProviderID uint64 `json:"provider_id,omitempty"`
	// Provider type (wechat, qq, github, google, facebook) | 提供商类型
	ProviderType string `json:"provider_type,omitempty"`
	// User ID from OAuth provider | 第三方平台的用户ID
	ProviderUserID string `json:"provider_user_id,omitempty"`
	// Username from OAuth provider | 第三方平台的用户名
	ProviderUsername string `json:"provider_username,omitempty"`
	// Nickname from OAuth provider | 第三方平台的昵称
	ProviderNickname string `json:"provider_nickname,omitempty"`
	// Email from OAuth provider | 第三方平台的邮箱
	ProviderEmail string `json:"provider_email,omitempty"`
	// Avatar URL from OAuth provider | 第三方平台的头像URL
	ProviderAvatar string `json:"provider_avatar,omitempty"`
	// Access token (encrypted) | 访问令牌（加密存储）
	AccessToken string `json:"access_token,omitempty"`
	// Refresh token (encrypted) | 刷新令牌（加密存储）
	RefreshToken string `json:"refresh_token,omitempty"`
	// Token expiration time | 令牌过期时间
	TokenExpiresAt time.Time `json:"token_expires_at,omitempty"`
	// Extra data from provider | 第三方平台的额外数据
	ExtraData map[string]interface{} `json:"extra_data,omitempty"`
	// Last login time | 最后登录时间
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// Last login IP address | 最后登录IP地址
	LastLoginIP string `json:"last_login_ip,omitempty"`
	// Login count | 登录次数
	LoginCount uint32 `json:"login_count,omitempty"`
	// Department ID of the bound user | 绑定用户的部门ID
	DepartmentID uint64 `json:"department_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthAccountQuery when eager-loading is set.
	Edges        OauthAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OauthAccountEdges holds the relations/edges for other nodes in the graph.
type OauthAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *OauthProvider `json:"provider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthAccountEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthAccountEdges) ProviderOrErr() (*OauthProvider, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: oauthprovider.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthaccount.FieldExtraData:
			values[i] = new([]byte)
		case oauthaccount.FieldID, oauthaccount.FieldStatus, oauthaccount.FieldTenantID, oauthaccount.FieldProviderID, oauthaccount.FieldLoginCount, oauthaccount.FieldDepartmentID:
			values[i] = new(sql.NullInt64)
		case oauthaccount.FieldProviderType, oauthaccount.FieldProviderUserID, oauthaccount.FieldProviderUsername, oauthaccount.FieldProviderNickname, oauthaccount.FieldProviderEmail, oauthaccount.FieldProviderAvatar, oauthaccount.FieldAccessToken, oauthaccount.FieldRefreshToken, oauthaccount.FieldLastLoginIP:
			values[i] = new(sql.NullString)
		case oauthaccount.FieldCreatedAt, oauthaccount.FieldUpdatedAt, oauthaccount.FieldTokenExpiresAt, oauthaccount.FieldLastLoginAt:
			values[i] = new(sql.NullTime)
		case oauthaccount.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthAccount fields.
func (_m *OauthAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case oauthaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case oauthaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case oauthaccount.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = uint8(value.Int64)
			}
		case oauthaccount.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = uint64(value.Int64)
			}
		case oauthaccount.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case oauthaccount.FieldProviderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				_m.ProviderID = uint64(value.Int64)
			}
		case oauthaccount.FieldProviderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_type", values[i])
			} else if value.Valid {
				_m.ProviderType = value.String
			}
		case oauthaccount.FieldProviderUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_user_id", values[i])
			} else if value.Valid {
				_m.ProviderUserID = value.String
			}
		case oauthaccount.FieldProviderUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_username", values[i])
			} else if value.Valid {
				_m.ProviderUsername = value.String
			}
		case oauthaccount.FieldProviderNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_nickname", values[i])
			} else if value.Valid {
				_m.ProviderNickname = value.String
			}
		case oauthaccount.FieldProviderEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_email", values[i])
			} else if value.Valid {
				_m.ProviderEmail = value.String
			}
		case oauthaccount.FieldProviderAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_avatar", values[i])
			} else if value.Valid {
				_m.ProviderAvatar = value.String
			}
		case oauthaccount.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				_m.AccessToken = value.String
			}
		case oauthaccount.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				_m.RefreshToken = value.String
			}
		case oauthaccount.FieldTokenExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field token_expires_at", values[i])
			} else if value.Valid {
				_m.TokenExpiresAt = value.Time
			}
		case oauthaccount.FieldExtraData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ExtraData); err != nil {
					return fmt.Errorf("unmarshal field extra_data: %w", err)
				}
			}
		case oauthaccount.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				_m.LastLoginAt = value.Time
			}
		case oauthaccount.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				_m.LastLoginIP = value.String
			}
		case oauthaccount.FieldLoginCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_count", values[i])
			} else if value.Valid {
				_m.LoginCount = uint32(value.Int64)
			}
		case oauthaccount.FieldDepartmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value.Valid {
				_m.DepartmentID = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthAccount.
// This includes values selected through modifiers, order, etc.
func (_m *OauthAccount) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the OauthAccount entity.
func (_m *OauthAccount) QueryUser() *UserQuery {
	return NewOauthAccountClient(_m.config).QueryUser(_m)
}

// QueryProvider queries the "provider" edge of the OauthAccount entity.
func (_m *OauthAccount) QueryProvider() *OauthProviderQuery {
	return NewOauthAccountClient(_m.config).QueryProvider(_m)
}

// Update returns a builder for updating this OauthAccount.
// Note that you need to call OauthAccount.Unwrap() before calling this method if this OauthAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthAccount) Update() *OauthAccountUpdateOne {
	return NewOauthAccountClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthAccount) Unwrap() *OauthAccount {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthAccount is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthAccount) String() string {
	var builder strings.Builder
	builder.WriteString("OauthAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProviderID))
	builder.WriteString(", ")
	builder.WriteString("provider_type=")
	builder.WriteString(_m.ProviderType)
	builder.WriteString(", ")
	builder.WriteString("provider_user_id=")
	builder.WriteString(_m.ProviderUserID)
	builder.WriteString(", ")
	builder.WriteString("provider_username=")
	builder.WriteString(_m.ProviderUsername)
	builder.WriteString(", ")
	builder.WriteString("provider_nickname=")
	builder.WriteString(_m.ProviderNickname)
	builder.WriteString(", ")
	builder.WriteString("provider_email=")
	builder.WriteString(_m.ProviderEmail)
	builder.WriteString(", ")
	builder.WriteString("provider_avatar=")
	builder.WriteString(_m.ProviderAvatar)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(_m.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(_m.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("token_expires_at=")
	builder.WriteString(_m.TokenExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("extra_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExtraData))
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(_m.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_login_ip=")
	builder.WriteString(_m.LastLoginIP)
	builder.WriteString(", ")
	builder.WriteString("login_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LoginCount))
	builder.WriteString(", ")
	builder.WriteString("department_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.DepartmentID))
	builder.WriteByte(')')
	return builder.String()
}

// OauthAccounts is a parsable slice of OauthAccount.
type OauthAccounts []*OauthAccount
