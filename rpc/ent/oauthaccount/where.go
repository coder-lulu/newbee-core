// Code generated by ent, DO NOT EDIT.

package oauthaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
	uuid "github.com/gofrs/uuid/v5"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldStatus, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldTenantID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldUserID, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderID, v))
}

// ProviderType applies equality check predicate on the "provider_type" field. It's identical to ProviderTypeEQ.
func ProviderType(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderType, v))
}

// ProviderUserID applies equality check predicate on the "provider_user_id" field. It's identical to ProviderUserIDEQ.
func ProviderUserID(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUsername applies equality check predicate on the "provider_username" field. It's identical to ProviderUsernameEQ.
func ProviderUsername(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderUsername, v))
}

// ProviderNickname applies equality check predicate on the "provider_nickname" field. It's identical to ProviderNicknameEQ.
func ProviderNickname(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderNickname, v))
}

// ProviderEmail applies equality check predicate on the "provider_email" field. It's identical to ProviderEmailEQ.
func ProviderEmail(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderEmail, v))
}

// ProviderAvatar applies equality check predicate on the "provider_avatar" field. It's identical to ProviderAvatarEQ.
func ProviderAvatar(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderAvatar, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldRefreshToken, v))
}

// TokenExpiresAt applies equality check predicate on the "token_expires_at" field. It's identical to TokenExpiresAtEQ.
func TokenExpiresAt(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldTokenExpiresAt, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginIP applies equality check predicate on the "last_login_ip" field. It's identical to LastLoginIPEQ.
func LastLoginIP(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldLastLoginIP, v))
}

// LoginCount applies equality check predicate on the "login_count" field. It's identical to LoginCountEQ.
func LoginCount(v uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldLoginCount, v))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldDepartmentID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldStatus))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldTenantID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldUserID, vs...))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderTypeEQ applies the EQ predicate on the "provider_type" field.
func ProviderTypeEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderType, v))
}

// ProviderTypeNEQ applies the NEQ predicate on the "provider_type" field.
func ProviderTypeNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldProviderType, v))
}

// ProviderTypeIn applies the In predicate on the "provider_type" field.
func ProviderTypeIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldProviderType, vs...))
}

// ProviderTypeNotIn applies the NotIn predicate on the "provider_type" field.
func ProviderTypeNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldProviderType, vs...))
}

// ProviderTypeGT applies the GT predicate on the "provider_type" field.
func ProviderTypeGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldProviderType, v))
}

// ProviderTypeGTE applies the GTE predicate on the "provider_type" field.
func ProviderTypeGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldProviderType, v))
}

// ProviderTypeLT applies the LT predicate on the "provider_type" field.
func ProviderTypeLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldProviderType, v))
}

// ProviderTypeLTE applies the LTE predicate on the "provider_type" field.
func ProviderTypeLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldProviderType, v))
}

// ProviderTypeContains applies the Contains predicate on the "provider_type" field.
func ProviderTypeContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldProviderType, v))
}

// ProviderTypeHasPrefix applies the HasPrefix predicate on the "provider_type" field.
func ProviderTypeHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldProviderType, v))
}

// ProviderTypeHasSuffix applies the HasSuffix predicate on the "provider_type" field.
func ProviderTypeHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldProviderType, v))
}

// ProviderTypeEqualFold applies the EqualFold predicate on the "provider_type" field.
func ProviderTypeEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldProviderType, v))
}

// ProviderTypeContainsFold applies the ContainsFold predicate on the "provider_type" field.
func ProviderTypeContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldProviderType, v))
}

// ProviderUserIDEQ applies the EQ predicate on the "provider_user_id" field.
func ProviderUserIDEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUserIDNEQ applies the NEQ predicate on the "provider_user_id" field.
func ProviderUserIDNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldProviderUserID, v))
}

// ProviderUserIDIn applies the In predicate on the "provider_user_id" field.
func ProviderUserIDIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldProviderUserID, vs...))
}

// ProviderUserIDNotIn applies the NotIn predicate on the "provider_user_id" field.
func ProviderUserIDNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldProviderUserID, vs...))
}

// ProviderUserIDGT applies the GT predicate on the "provider_user_id" field.
func ProviderUserIDGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldProviderUserID, v))
}

// ProviderUserIDGTE applies the GTE predicate on the "provider_user_id" field.
func ProviderUserIDGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldProviderUserID, v))
}

// ProviderUserIDLT applies the LT predicate on the "provider_user_id" field.
func ProviderUserIDLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldProviderUserID, v))
}

// ProviderUserIDLTE applies the LTE predicate on the "provider_user_id" field.
func ProviderUserIDLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldProviderUserID, v))
}

// ProviderUserIDContains applies the Contains predicate on the "provider_user_id" field.
func ProviderUserIDContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldProviderUserID, v))
}

// ProviderUserIDHasPrefix applies the HasPrefix predicate on the "provider_user_id" field.
func ProviderUserIDHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldProviderUserID, v))
}

// ProviderUserIDHasSuffix applies the HasSuffix predicate on the "provider_user_id" field.
func ProviderUserIDHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldProviderUserID, v))
}

// ProviderUserIDEqualFold applies the EqualFold predicate on the "provider_user_id" field.
func ProviderUserIDEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldProviderUserID, v))
}

// ProviderUserIDContainsFold applies the ContainsFold predicate on the "provider_user_id" field.
func ProviderUserIDContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldProviderUserID, v))
}

// ProviderUsernameEQ applies the EQ predicate on the "provider_username" field.
func ProviderUsernameEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderUsername, v))
}

// ProviderUsernameNEQ applies the NEQ predicate on the "provider_username" field.
func ProviderUsernameNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldProviderUsername, v))
}

// ProviderUsernameIn applies the In predicate on the "provider_username" field.
func ProviderUsernameIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldProviderUsername, vs...))
}

// ProviderUsernameNotIn applies the NotIn predicate on the "provider_username" field.
func ProviderUsernameNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldProviderUsername, vs...))
}

// ProviderUsernameGT applies the GT predicate on the "provider_username" field.
func ProviderUsernameGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldProviderUsername, v))
}

// ProviderUsernameGTE applies the GTE predicate on the "provider_username" field.
func ProviderUsernameGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldProviderUsername, v))
}

// ProviderUsernameLT applies the LT predicate on the "provider_username" field.
func ProviderUsernameLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldProviderUsername, v))
}

// ProviderUsernameLTE applies the LTE predicate on the "provider_username" field.
func ProviderUsernameLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldProviderUsername, v))
}

// ProviderUsernameContains applies the Contains predicate on the "provider_username" field.
func ProviderUsernameContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldProviderUsername, v))
}

// ProviderUsernameHasPrefix applies the HasPrefix predicate on the "provider_username" field.
func ProviderUsernameHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldProviderUsername, v))
}

// ProviderUsernameHasSuffix applies the HasSuffix predicate on the "provider_username" field.
func ProviderUsernameHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldProviderUsername, v))
}

// ProviderUsernameIsNil applies the IsNil predicate on the "provider_username" field.
func ProviderUsernameIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldProviderUsername))
}

// ProviderUsernameNotNil applies the NotNil predicate on the "provider_username" field.
func ProviderUsernameNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldProviderUsername))
}

// ProviderUsernameEqualFold applies the EqualFold predicate on the "provider_username" field.
func ProviderUsernameEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldProviderUsername, v))
}

// ProviderUsernameContainsFold applies the ContainsFold predicate on the "provider_username" field.
func ProviderUsernameContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldProviderUsername, v))
}

// ProviderNicknameEQ applies the EQ predicate on the "provider_nickname" field.
func ProviderNicknameEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderNickname, v))
}

// ProviderNicknameNEQ applies the NEQ predicate on the "provider_nickname" field.
func ProviderNicknameNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldProviderNickname, v))
}

// ProviderNicknameIn applies the In predicate on the "provider_nickname" field.
func ProviderNicknameIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldProviderNickname, vs...))
}

// ProviderNicknameNotIn applies the NotIn predicate on the "provider_nickname" field.
func ProviderNicknameNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldProviderNickname, vs...))
}

// ProviderNicknameGT applies the GT predicate on the "provider_nickname" field.
func ProviderNicknameGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldProviderNickname, v))
}

// ProviderNicknameGTE applies the GTE predicate on the "provider_nickname" field.
func ProviderNicknameGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldProviderNickname, v))
}

// ProviderNicknameLT applies the LT predicate on the "provider_nickname" field.
func ProviderNicknameLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldProviderNickname, v))
}

// ProviderNicknameLTE applies the LTE predicate on the "provider_nickname" field.
func ProviderNicknameLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldProviderNickname, v))
}

// ProviderNicknameContains applies the Contains predicate on the "provider_nickname" field.
func ProviderNicknameContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldProviderNickname, v))
}

// ProviderNicknameHasPrefix applies the HasPrefix predicate on the "provider_nickname" field.
func ProviderNicknameHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldProviderNickname, v))
}

// ProviderNicknameHasSuffix applies the HasSuffix predicate on the "provider_nickname" field.
func ProviderNicknameHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldProviderNickname, v))
}

// ProviderNicknameIsNil applies the IsNil predicate on the "provider_nickname" field.
func ProviderNicknameIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldProviderNickname))
}

// ProviderNicknameNotNil applies the NotNil predicate on the "provider_nickname" field.
func ProviderNicknameNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldProviderNickname))
}

// ProviderNicknameEqualFold applies the EqualFold predicate on the "provider_nickname" field.
func ProviderNicknameEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldProviderNickname, v))
}

// ProviderNicknameContainsFold applies the ContainsFold predicate on the "provider_nickname" field.
func ProviderNicknameContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldProviderNickname, v))
}

// ProviderEmailEQ applies the EQ predicate on the "provider_email" field.
func ProviderEmailEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderEmail, v))
}

// ProviderEmailNEQ applies the NEQ predicate on the "provider_email" field.
func ProviderEmailNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldProviderEmail, v))
}

// ProviderEmailIn applies the In predicate on the "provider_email" field.
func ProviderEmailIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldProviderEmail, vs...))
}

// ProviderEmailNotIn applies the NotIn predicate on the "provider_email" field.
func ProviderEmailNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldProviderEmail, vs...))
}

// ProviderEmailGT applies the GT predicate on the "provider_email" field.
func ProviderEmailGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldProviderEmail, v))
}

// ProviderEmailGTE applies the GTE predicate on the "provider_email" field.
func ProviderEmailGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldProviderEmail, v))
}

// ProviderEmailLT applies the LT predicate on the "provider_email" field.
func ProviderEmailLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldProviderEmail, v))
}

// ProviderEmailLTE applies the LTE predicate on the "provider_email" field.
func ProviderEmailLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldProviderEmail, v))
}

// ProviderEmailContains applies the Contains predicate on the "provider_email" field.
func ProviderEmailContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldProviderEmail, v))
}

// ProviderEmailHasPrefix applies the HasPrefix predicate on the "provider_email" field.
func ProviderEmailHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldProviderEmail, v))
}

// ProviderEmailHasSuffix applies the HasSuffix predicate on the "provider_email" field.
func ProviderEmailHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldProviderEmail, v))
}

// ProviderEmailIsNil applies the IsNil predicate on the "provider_email" field.
func ProviderEmailIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldProviderEmail))
}

// ProviderEmailNotNil applies the NotNil predicate on the "provider_email" field.
func ProviderEmailNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldProviderEmail))
}

// ProviderEmailEqualFold applies the EqualFold predicate on the "provider_email" field.
func ProviderEmailEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldProviderEmail, v))
}

// ProviderEmailContainsFold applies the ContainsFold predicate on the "provider_email" field.
func ProviderEmailContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldProviderEmail, v))
}

// ProviderAvatarEQ applies the EQ predicate on the "provider_avatar" field.
func ProviderAvatarEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldProviderAvatar, v))
}

// ProviderAvatarNEQ applies the NEQ predicate on the "provider_avatar" field.
func ProviderAvatarNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldProviderAvatar, v))
}

// ProviderAvatarIn applies the In predicate on the "provider_avatar" field.
func ProviderAvatarIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldProviderAvatar, vs...))
}

// ProviderAvatarNotIn applies the NotIn predicate on the "provider_avatar" field.
func ProviderAvatarNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldProviderAvatar, vs...))
}

// ProviderAvatarGT applies the GT predicate on the "provider_avatar" field.
func ProviderAvatarGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldProviderAvatar, v))
}

// ProviderAvatarGTE applies the GTE predicate on the "provider_avatar" field.
func ProviderAvatarGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldProviderAvatar, v))
}

// ProviderAvatarLT applies the LT predicate on the "provider_avatar" field.
func ProviderAvatarLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldProviderAvatar, v))
}

// ProviderAvatarLTE applies the LTE predicate on the "provider_avatar" field.
func ProviderAvatarLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldProviderAvatar, v))
}

// ProviderAvatarContains applies the Contains predicate on the "provider_avatar" field.
func ProviderAvatarContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldProviderAvatar, v))
}

// ProviderAvatarHasPrefix applies the HasPrefix predicate on the "provider_avatar" field.
func ProviderAvatarHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldProviderAvatar, v))
}

// ProviderAvatarHasSuffix applies the HasSuffix predicate on the "provider_avatar" field.
func ProviderAvatarHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldProviderAvatar, v))
}

// ProviderAvatarIsNil applies the IsNil predicate on the "provider_avatar" field.
func ProviderAvatarIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldProviderAvatar))
}

// ProviderAvatarNotNil applies the NotNil predicate on the "provider_avatar" field.
func ProviderAvatarNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldProviderAvatar))
}

// ProviderAvatarEqualFold applies the EqualFold predicate on the "provider_avatar" field.
func ProviderAvatarEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldProviderAvatar, v))
}

// ProviderAvatarContainsFold applies the ContainsFold predicate on the "provider_avatar" field.
func ProviderAvatarContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldProviderAvatar, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldRefreshToken, v))
}

// TokenExpiresAtEQ applies the EQ predicate on the "token_expires_at" field.
func TokenExpiresAtEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldTokenExpiresAt, v))
}

// TokenExpiresAtNEQ applies the NEQ predicate on the "token_expires_at" field.
func TokenExpiresAtNEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldTokenExpiresAt, v))
}

// TokenExpiresAtIn applies the In predicate on the "token_expires_at" field.
func TokenExpiresAtIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldTokenExpiresAt, vs...))
}

// TokenExpiresAtNotIn applies the NotIn predicate on the "token_expires_at" field.
func TokenExpiresAtNotIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldTokenExpiresAt, vs...))
}

// TokenExpiresAtGT applies the GT predicate on the "token_expires_at" field.
func TokenExpiresAtGT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldTokenExpiresAt, v))
}

// TokenExpiresAtGTE applies the GTE predicate on the "token_expires_at" field.
func TokenExpiresAtGTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldTokenExpiresAt, v))
}

// TokenExpiresAtLT applies the LT predicate on the "token_expires_at" field.
func TokenExpiresAtLT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldTokenExpiresAt, v))
}

// TokenExpiresAtLTE applies the LTE predicate on the "token_expires_at" field.
func TokenExpiresAtLTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldTokenExpiresAt, v))
}

// TokenExpiresAtIsNil applies the IsNil predicate on the "token_expires_at" field.
func TokenExpiresAtIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldTokenExpiresAt))
}

// TokenExpiresAtNotNil applies the NotNil predicate on the "token_expires_at" field.
func TokenExpiresAtNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldTokenExpiresAt))
}

// ExtraDataIsNil applies the IsNil predicate on the "extra_data" field.
func ExtraDataIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldExtraData))
}

// ExtraDataNotNil applies the NotNil predicate on the "extra_data" field.
func ExtraDataNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldExtraData))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldLastLoginAt))
}

// LastLoginIPEQ applies the EQ predicate on the "last_login_ip" field.
func LastLoginIPEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPNEQ applies the NEQ predicate on the "last_login_ip" field.
func LastLoginIPNEQ(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldLastLoginIP, v))
}

// LastLoginIPIn applies the In predicate on the "last_login_ip" field.
func LastLoginIPIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldLastLoginIP, vs...))
}

// LastLoginIPNotIn applies the NotIn predicate on the "last_login_ip" field.
func LastLoginIPNotIn(vs ...string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldLastLoginIP, vs...))
}

// LastLoginIPGT applies the GT predicate on the "last_login_ip" field.
func LastLoginIPGT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldLastLoginIP, v))
}

// LastLoginIPGTE applies the GTE predicate on the "last_login_ip" field.
func LastLoginIPGTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldLastLoginIP, v))
}

// LastLoginIPLT applies the LT predicate on the "last_login_ip" field.
func LastLoginIPLT(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldLastLoginIP, v))
}

// LastLoginIPLTE applies the LTE predicate on the "last_login_ip" field.
func LastLoginIPLTE(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldLastLoginIP, v))
}

// LastLoginIPContains applies the Contains predicate on the "last_login_ip" field.
func LastLoginIPContains(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContains(FieldLastLoginIP, v))
}

// LastLoginIPHasPrefix applies the HasPrefix predicate on the "last_login_ip" field.
func LastLoginIPHasPrefix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasPrefix(FieldLastLoginIP, v))
}

// LastLoginIPHasSuffix applies the HasSuffix predicate on the "last_login_ip" field.
func LastLoginIPHasSuffix(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldHasSuffix(FieldLastLoginIP, v))
}

// LastLoginIPIsNil applies the IsNil predicate on the "last_login_ip" field.
func LastLoginIPIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldLastLoginIP))
}

// LastLoginIPNotNil applies the NotNil predicate on the "last_login_ip" field.
func LastLoginIPNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldLastLoginIP))
}

// LastLoginIPEqualFold applies the EqualFold predicate on the "last_login_ip" field.
func LastLoginIPEqualFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEqualFold(FieldLastLoginIP, v))
}

// LastLoginIPContainsFold applies the ContainsFold predicate on the "last_login_ip" field.
func LastLoginIPContainsFold(v string) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldContainsFold(FieldLastLoginIP, v))
}

// LoginCountEQ applies the EQ predicate on the "login_count" field.
func LoginCountEQ(v uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldLoginCount, v))
}

// LoginCountNEQ applies the NEQ predicate on the "login_count" field.
func LoginCountNEQ(v uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldLoginCount, v))
}

// LoginCountIn applies the In predicate on the "login_count" field.
func LoginCountIn(vs ...uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldLoginCount, vs...))
}

// LoginCountNotIn applies the NotIn predicate on the "login_count" field.
func LoginCountNotIn(vs ...uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldLoginCount, vs...))
}

// LoginCountGT applies the GT predicate on the "login_count" field.
func LoginCountGT(v uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldLoginCount, v))
}

// LoginCountGTE applies the GTE predicate on the "login_count" field.
func LoginCountGTE(v uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldLoginCount, v))
}

// LoginCountLT applies the LT predicate on the "login_count" field.
func LoginCountLT(v uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldLoginCount, v))
}

// LoginCountLTE applies the LTE predicate on the "login_count" field.
func LoginCountLTE(v uint32) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldLoginCount, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// DepartmentIDGT applies the GT predicate on the "department_id" field.
func DepartmentIDGT(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGT(FieldDepartmentID, v))
}

// DepartmentIDGTE applies the GTE predicate on the "department_id" field.
func DepartmentIDGTE(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldGTE(FieldDepartmentID, v))
}

// DepartmentIDLT applies the LT predicate on the "department_id" field.
func DepartmentIDLT(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLT(FieldDepartmentID, v))
}

// DepartmentIDLTE applies the LTE predicate on the "department_id" field.
func DepartmentIDLTE(v uint64) predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldLTE(FieldDepartmentID, v))
}

// DepartmentIDIsNil applies the IsNil predicate on the "department_id" field.
func DepartmentIDIsNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldIsNull(FieldDepartmentID))
}

// DepartmentIDNotNil applies the NotNil predicate on the "department_id" field.
func DepartmentIDNotNil() predicate.OauthAccount {
	return predicate.OauthAccount(sql.FieldNotNull(FieldDepartmentID))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OauthAccount {
	return predicate.OauthAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OauthAccount {
	return predicate.OauthAccount(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.OauthAccount {
	return predicate.OauthAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.OauthProvider) predicate.OauthAccount {
	return predicate.OauthAccount(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthAccount) predicate.OauthAccount {
	return predicate.OauthAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthAccount) predicate.OauthAccount {
	return predicate.OauthAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthAccount) predicate.OauthAccount {
	return predicate.OauthAccount(sql.NotPredicates(p))
}
