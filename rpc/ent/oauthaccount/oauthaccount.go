// Code generated by ent, DO NOT EDIT.

package oauthaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthaccount type in the database.
	Label = "oauth_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldProviderType holds the string denoting the provider_type field in the database.
	FieldProviderType = "provider_type"
	// FieldProviderUserID holds the string denoting the provider_user_id field in the database.
	FieldProviderUserID = "provider_user_id"
	// FieldProviderUsername holds the string denoting the provider_username field in the database.
	FieldProviderUsername = "provider_username"
	// FieldProviderNickname holds the string denoting the provider_nickname field in the database.
	FieldProviderNickname = "provider_nickname"
	// FieldProviderEmail holds the string denoting the provider_email field in the database.
	FieldProviderEmail = "provider_email"
	// FieldProviderAvatar holds the string denoting the provider_avatar field in the database.
	FieldProviderAvatar = "provider_avatar"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldTokenExpiresAt holds the string denoting the token_expires_at field in the database.
	FieldTokenExpiresAt = "token_expires_at"
	// FieldExtraData holds the string denoting the extra_data field in the database.
	FieldExtraData = "extra_data"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldLastLoginIP holds the string denoting the last_login_ip field in the database.
	FieldLastLoginIP = "last_login_ip"
	// FieldLoginCount holds the string denoting the login_count field in the database.
	FieldLoginCount = "login_count"
	// FieldDepartmentID holds the string denoting the department_id field in the database.
	FieldDepartmentID = "department_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// Table holds the table name of the oauthaccount in the database.
	Table = "sys_oauth_accounts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "sys_oauth_accounts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "sys_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "sys_oauth_accounts"
	// ProviderInverseTable is the table name for the OauthProvider entity.
	// It exists in this package in order to avoid circular dependency with the "oauthprovider" package.
	ProviderInverseTable = "sys_oauth_providers"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "provider_id"
)

// Columns holds all SQL columns for oauthaccount fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldTenantID,
	FieldUserID,
	FieldProviderID,
	FieldProviderType,
	FieldProviderUserID,
	FieldProviderUsername,
	FieldProviderNickname,
	FieldProviderEmail,
	FieldProviderAvatar,
	FieldAccessToken,
	FieldRefreshToken,
	FieldTokenExpiresAt,
	FieldExtraData,
	FieldLastLoginAt,
	FieldLastLoginIP,
	FieldLoginCount,
	FieldDepartmentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID uint64
	// ProviderTypeValidator is a validator for the "provider_type" field. It is called by the builders before save.
	ProviderTypeValidator func(string) error
	// ProviderUserIDValidator is a validator for the "provider_user_id" field. It is called by the builders before save.
	ProviderUserIDValidator func(string) error
	// ProviderUsernameValidator is a validator for the "provider_username" field. It is called by the builders before save.
	ProviderUsernameValidator func(string) error
	// ProviderNicknameValidator is a validator for the "provider_nickname" field. It is called by the builders before save.
	ProviderNicknameValidator func(string) error
	// ProviderEmailValidator is a validator for the "provider_email" field. It is called by the builders before save.
	ProviderEmailValidator func(string) error
	// ProviderAvatarValidator is a validator for the "provider_avatar" field. It is called by the builders before save.
	ProviderAvatarValidator func(string) error
	// AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	AccessTokenValidator func(string) error
	// RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	RefreshTokenValidator func(string) error
	// LastLoginIPValidator is a validator for the "last_login_ip" field. It is called by the builders before save.
	LastLoginIPValidator func(string) error
	// DefaultLoginCount holds the default value on creation for the "login_count" field.
	DefaultLoginCount uint32
	// DefaultDepartmentID holds the default value on creation for the "department_id" field.
	DefaultDepartmentID uint64
)

// OrderOption defines the ordering options for the OauthAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByProviderType orders the results by the provider_type field.
func ByProviderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderType, opts...).ToFunc()
}

// ByProviderUserID orders the results by the provider_user_id field.
func ByProviderUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderUserID, opts...).ToFunc()
}

// ByProviderUsername orders the results by the provider_username field.
func ByProviderUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderUsername, opts...).ToFunc()
}

// ByProviderNickname orders the results by the provider_nickname field.
func ByProviderNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderNickname, opts...).ToFunc()
}

// ByProviderEmail orders the results by the provider_email field.
func ByProviderEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderEmail, opts...).ToFunc()
}

// ByProviderAvatar orders the results by the provider_avatar field.
func ByProviderAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderAvatar, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByTokenExpiresAt orders the results by the token_expires_at field.
func ByTokenExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenExpiresAt, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByLastLoginIP orders the results by the last_login_ip field.
func ByLastLoginIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginIP, opts...).ToFunc()
}

// ByLoginCount orders the results by the login_count field.
func ByLoginCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginCount, opts...).ToFunc()
}

// ByDepartmentID orders the results by the department_id field.
func ByDepartmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
	)
}
