// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthaccount"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
	"github.com/coder-lulu/newbee-core/rpc/ent/user"
	uuid "github.com/gofrs/uuid/v5"
)

// OauthAccountCreate is the builder for creating a OauthAccount entity.
type OauthAccountCreate struct {
	config
	mutation *OauthAccountMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *OauthAccountCreate) SetCreatedAt(v time.Time) *OauthAccountCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableCreatedAt(v *time.Time) *OauthAccountCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OauthAccountCreate) SetUpdatedAt(v time.Time) *OauthAccountCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableUpdatedAt(v *time.Time) *OauthAccountCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *OauthAccountCreate) SetStatus(v uint8) *OauthAccountCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableStatus(v *uint8) *OauthAccountCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *OauthAccountCreate) SetTenantID(v uint64) *OauthAccountCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableTenantID(v *uint64) *OauthAccountCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *OauthAccountCreate) SetUserID(v uuid.UUID) *OauthAccountCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetProviderID sets the "provider_id" field.
func (_c *OauthAccountCreate) SetProviderID(v uint64) *OauthAccountCreate {
	_c.mutation.SetProviderID(v)
	return _c
}

// SetProviderType sets the "provider_type" field.
func (_c *OauthAccountCreate) SetProviderType(v string) *OauthAccountCreate {
	_c.mutation.SetProviderType(v)
	return _c
}

// SetProviderUserID sets the "provider_user_id" field.
func (_c *OauthAccountCreate) SetProviderUserID(v string) *OauthAccountCreate {
	_c.mutation.SetProviderUserID(v)
	return _c
}

// SetProviderUsername sets the "provider_username" field.
func (_c *OauthAccountCreate) SetProviderUsername(v string) *OauthAccountCreate {
	_c.mutation.SetProviderUsername(v)
	return _c
}

// SetNillableProviderUsername sets the "provider_username" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableProviderUsername(v *string) *OauthAccountCreate {
	if v != nil {
		_c.SetProviderUsername(*v)
	}
	return _c
}

// SetProviderNickname sets the "provider_nickname" field.
func (_c *OauthAccountCreate) SetProviderNickname(v string) *OauthAccountCreate {
	_c.mutation.SetProviderNickname(v)
	return _c
}

// SetNillableProviderNickname sets the "provider_nickname" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableProviderNickname(v *string) *OauthAccountCreate {
	if v != nil {
		_c.SetProviderNickname(*v)
	}
	return _c
}

// SetProviderEmail sets the "provider_email" field.
func (_c *OauthAccountCreate) SetProviderEmail(v string) *OauthAccountCreate {
	_c.mutation.SetProviderEmail(v)
	return _c
}

// SetNillableProviderEmail sets the "provider_email" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableProviderEmail(v *string) *OauthAccountCreate {
	if v != nil {
		_c.SetProviderEmail(*v)
	}
	return _c
}

// SetProviderAvatar sets the "provider_avatar" field.
func (_c *OauthAccountCreate) SetProviderAvatar(v string) *OauthAccountCreate {
	_c.mutation.SetProviderAvatar(v)
	return _c
}

// SetNillableProviderAvatar sets the "provider_avatar" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableProviderAvatar(v *string) *OauthAccountCreate {
	if v != nil {
		_c.SetProviderAvatar(*v)
	}
	return _c
}

// SetAccessToken sets the "access_token" field.
func (_c *OauthAccountCreate) SetAccessToken(v string) *OauthAccountCreate {
	_c.mutation.SetAccessToken(v)
	return _c
}

// SetRefreshToken sets the "refresh_token" field.
func (_c *OauthAccountCreate) SetRefreshToken(v string) *OauthAccountCreate {
	_c.mutation.SetRefreshToken(v)
	return _c
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableRefreshToken(v *string) *OauthAccountCreate {
	if v != nil {
		_c.SetRefreshToken(*v)
	}
	return _c
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (_c *OauthAccountCreate) SetTokenExpiresAt(v time.Time) *OauthAccountCreate {
	_c.mutation.SetTokenExpiresAt(v)
	return _c
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableTokenExpiresAt(v *time.Time) *OauthAccountCreate {
	if v != nil {
		_c.SetTokenExpiresAt(*v)
	}
	return _c
}

// SetExtraData sets the "extra_data" field.
func (_c *OauthAccountCreate) SetExtraData(v map[string]interface{}) *OauthAccountCreate {
	_c.mutation.SetExtraData(v)
	return _c
}

// SetLastLoginAt sets the "last_login_at" field.
func (_c *OauthAccountCreate) SetLastLoginAt(v time.Time) *OauthAccountCreate {
	_c.mutation.SetLastLoginAt(v)
	return _c
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableLastLoginAt(v *time.Time) *OauthAccountCreate {
	if v != nil {
		_c.SetLastLoginAt(*v)
	}
	return _c
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_c *OauthAccountCreate) SetLastLoginIP(v string) *OauthAccountCreate {
	_c.mutation.SetLastLoginIP(v)
	return _c
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableLastLoginIP(v *string) *OauthAccountCreate {
	if v != nil {
		_c.SetLastLoginIP(*v)
	}
	return _c
}

// SetLoginCount sets the "login_count" field.
func (_c *OauthAccountCreate) SetLoginCount(v uint32) *OauthAccountCreate {
	_c.mutation.SetLoginCount(v)
	return _c
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableLoginCount(v *uint32) *OauthAccountCreate {
	if v != nil {
		_c.SetLoginCount(*v)
	}
	return _c
}

// SetDepartmentID sets the "department_id" field.
func (_c *OauthAccountCreate) SetDepartmentID(v uint64) *OauthAccountCreate {
	_c.mutation.SetDepartmentID(v)
	return _c
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_c *OauthAccountCreate) SetNillableDepartmentID(v *uint64) *OauthAccountCreate {
	if v != nil {
		_c.SetDepartmentID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OauthAccountCreate) SetID(v uint64) *OauthAccountCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *OauthAccountCreate) SetUser(v *User) *OauthAccountCreate {
	return _c.SetUserID(v.ID)
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_c *OauthAccountCreate) SetProvider(v *OauthProvider) *OauthAccountCreate {
	return _c.SetProviderID(v.ID)
}

// Mutation returns the OauthAccountMutation object of the builder.
func (_c *OauthAccountCreate) Mutation() *OauthAccountMutation {
	return _c.mutation
}

// Save creates the OauthAccount in the database.
func (_c *OauthAccountCreate) Save(ctx context.Context) (*OauthAccount, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OauthAccountCreate) SaveX(ctx context.Context) *OauthAccount {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthAccountCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthAccountCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OauthAccountCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := oauthaccount.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := oauthaccount.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := oauthaccount.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		v := oauthaccount.DefaultTenantID
		_c.mutation.SetTenantID(v)
	}
	if _, ok := _c.mutation.LoginCount(); !ok {
		v := oauthaccount.DefaultLoginCount
		_c.mutation.SetLoginCount(v)
	}
	if _, ok := _c.mutation.DepartmentID(); !ok {
		v := oauthaccount.DefaultDepartmentID
		_c.mutation.SetDepartmentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OauthAccountCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OauthAccount.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OauthAccount.updated_at"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OauthAccount.tenant_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OauthAccount.user_id"`)}
	}
	if _, ok := _c.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OauthAccount.provider_id"`)}
	}
	if _, ok := _c.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "OauthAccount.provider_type"`)}
	}
	if v, ok := _c.mutation.ProviderType(); ok {
		if err := oauthaccount.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProviderUserID(); !ok {
		return &ValidationError{Name: "provider_user_id", err: errors.New(`ent: missing required field "OauthAccount.provider_user_id"`)}
	}
	if v, ok := _c.mutation.ProviderUserID(); ok {
		if err := oauthaccount.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_user_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ProviderUsername(); ok {
		if err := oauthaccount.ProviderUsernameValidator(v); err != nil {
			return &ValidationError{Name: "provider_username", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_username": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ProviderNickname(); ok {
		if err := oauthaccount.ProviderNicknameValidator(v); err != nil {
			return &ValidationError{Name: "provider_nickname", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_nickname": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ProviderEmail(); ok {
		if err := oauthaccount.ProviderEmailValidator(v); err != nil {
			return &ValidationError{Name: "provider_email", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_email": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ProviderAvatar(); ok {
		if err := oauthaccount.ProviderAvatarValidator(v); err != nil {
			return &ValidationError{Name: "provider_avatar", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_avatar": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "OauthAccount.access_token"`)}
	}
	if v, ok := _c.mutation.AccessToken(); ok {
		if err := oauthaccount.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.access_token": %w`, err)}
		}
	}
	if v, ok := _c.mutation.RefreshToken(); ok {
		if err := oauthaccount.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.refresh_token": %w`, err)}
		}
	}
	if v, ok := _c.mutation.LastLoginIP(); ok {
		if err := oauthaccount.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.last_login_ip": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LoginCount(); !ok {
		return &ValidationError{Name: "login_count", err: errors.New(`ent: missing required field "OauthAccount.login_count"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OauthAccount.user"`)}
	}
	if len(_c.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "OauthAccount.provider"`)}
	}
	return nil
}

func (_c *OauthAccountCreate) sqlSave(ctx context.Context) (*OauthAccount, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OauthAccountCreate) createSpec() (*OauthAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthAccount{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(oauthaccount.Table, sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(oauthaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(oauthaccount.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(oauthaccount.FieldTenantID, field.TypeUint64, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.ProviderType(); ok {
		_spec.SetField(oauthaccount.FieldProviderType, field.TypeString, value)
		_node.ProviderType = value
	}
	if value, ok := _c.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthaccount.FieldProviderUserID, field.TypeString, value)
		_node.ProviderUserID = value
	}
	if value, ok := _c.mutation.ProviderUsername(); ok {
		_spec.SetField(oauthaccount.FieldProviderUsername, field.TypeString, value)
		_node.ProviderUsername = value
	}
	if value, ok := _c.mutation.ProviderNickname(); ok {
		_spec.SetField(oauthaccount.FieldProviderNickname, field.TypeString, value)
		_node.ProviderNickname = value
	}
	if value, ok := _c.mutation.ProviderEmail(); ok {
		_spec.SetField(oauthaccount.FieldProviderEmail, field.TypeString, value)
		_node.ProviderEmail = value
	}
	if value, ok := _c.mutation.ProviderAvatar(); ok {
		_spec.SetField(oauthaccount.FieldProviderAvatar, field.TypeString, value)
		_node.ProviderAvatar = value
	}
	if value, ok := _c.mutation.AccessToken(); ok {
		_spec.SetField(oauthaccount.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := _c.mutation.RefreshToken(); ok {
		_spec.SetField(oauthaccount.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := _c.mutation.TokenExpiresAt(); ok {
		_spec.SetField(oauthaccount.FieldTokenExpiresAt, field.TypeTime, value)
		_node.TokenExpiresAt = value
	}
	if value, ok := _c.mutation.ExtraData(); ok {
		_spec.SetField(oauthaccount.FieldExtraData, field.TypeJSON, value)
		_node.ExtraData = value
	}
	if value, ok := _c.mutation.LastLoginAt(); ok {
		_spec.SetField(oauthaccount.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = value
	}
	if value, ok := _c.mutation.LastLoginIP(); ok {
		_spec.SetField(oauthaccount.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = value
	}
	if value, ok := _c.mutation.LoginCount(); ok {
		_spec.SetField(oauthaccount.FieldLoginCount, field.TypeUint32, value)
		_node.LoginCount = value
	}
	if value, ok := _c.mutation.DepartmentID(); ok {
		_spec.SetField(oauthaccount.FieldDepartmentID, field.TypeUint64, value)
		_node.DepartmentID = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.ProviderTable,
			Columns: []string{oauthaccount.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthAccountCreateBulk is the builder for creating many OauthAccount entities in bulk.
type OauthAccountCreateBulk struct {
	config
	err      error
	builders []*OauthAccountCreate
}

// Save creates the OauthAccount entities in the database.
func (_c *OauthAccountCreateBulk) Save(ctx context.Context) ([]*OauthAccount, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OauthAccount, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OauthAccountCreateBulk) SaveX(ctx context.Context) []*OauthAccount {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthAccountCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
