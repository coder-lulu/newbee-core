// Code generated by ent, DO NOT EDIT.

package auditlog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
)

const (
	// Label holds the string label denoting the auditlog type in the database.
	Label = "audit_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldOperationType holds the string denoting the operation_type field in the database.
	FieldOperationType = "operation_type"
	// FieldResourceType holds the string denoting the resource_type field in the database.
	FieldResourceType = "resource_type"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldRequestMethod holds the string denoting the request_method field in the database.
	FieldRequestMethod = "request_method"
	// FieldRequestPath holds the string denoting the request_path field in the database.
	FieldRequestPath = "request_path"
	// FieldRequestData holds the string denoting the request_data field in the database.
	FieldRequestData = "request_data"
	// FieldResponseStatus holds the string denoting the response_status field in the database.
	FieldResponseStatus = "response_status"
	// FieldResponseData holds the string denoting the response_data field in the database.
	FieldResponseData = "response_data"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// Table holds the table name of the auditlog in the database.
	Table = "sys_audit_logs"
)

// Columns holds all SQL columns for auditlog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldTenantID,
	FieldUserID,
	FieldUserName,
	FieldOperationType,
	FieldResourceType,
	FieldResourceID,
	FieldRequestMethod,
	FieldRequestPath,
	FieldRequestData,
	FieldResponseStatus,
	FieldResponseData,
	FieldIPAddress,
	FieldUserAgent,
	FieldDurationMs,
	FieldErrorMessage,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultDurationMs holds the default value on creation for the "duration_ms" field.
	DefaultDurationMs int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OperationType defines the type for the "operation_type" enum field.
type OperationType string

// OperationType values.
const (
	OperationTypeCREATE OperationType = "CREATE"
	OperationTypeREAD   OperationType = "READ"
	OperationTypeUPDATE OperationType = "UPDATE"
	OperationTypeDELETE OperationType = "DELETE"
)

func (ot OperationType) String() string {
	return string(ot)
}

// OperationTypeValidator is a validator for the "operation_type" field enum values. It is called by the builders before save.
func OperationTypeValidator(ot OperationType) error {
	switch ot {
	case OperationTypeCREATE, OperationTypeREAD, OperationTypeUPDATE, OperationTypeDELETE:
		return nil
	default:
		return fmt.Errorf("auditlog: invalid enum value for operation_type field: %q", ot)
	}
}

// OrderOption defines the ordering options for the AuditLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByOperationType orders the results by the operation_type field.
func ByOperationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationType, opts...).ToFunc()
}

// ByResourceType orders the results by the resource_type field.
func ByResourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceType, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByRequestMethod orders the results by the request_method field.
func ByRequestMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestMethod, opts...).ToFunc()
}

// ByRequestPath orders the results by the request_path field.
func ByRequestPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestPath, opts...).ToFunc()
}

// ByRequestData orders the results by the request_data field.
func ByRequestData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestData, opts...).ToFunc()
}

// ByResponseStatus orders the results by the response_status field.
func ByResponseStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseStatus, opts...).ToFunc()
}

// ByResponseData orders the results by the response_data field.
func ByResponseData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseData, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}
