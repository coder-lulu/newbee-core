// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthsession"
	"github.com/coder-lulu/newbee-core/rpc/ent/user"
	uuid "github.com/gofrs/uuid/v5"
)

// OauthSessionCreate is the builder for creating a OauthSession entity.
type OauthSessionCreate struct {
	config
	mutation *OauthSessionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *OauthSessionCreate) SetCreatedAt(v time.Time) *OauthSessionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableCreatedAt(v *time.Time) *OauthSessionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OauthSessionCreate) SetUpdatedAt(v time.Time) *OauthSessionCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableUpdatedAt(v *time.Time) *OauthSessionCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *OauthSessionCreate) SetStatus(v uint8) *OauthSessionCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableStatus(v *uint8) *OauthSessionCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *OauthSessionCreate) SetTenantID(v uint64) *OauthSessionCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableTenantID(v *uint64) *OauthSessionCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetSessionID sets the "session_id" field.
func (_c *OauthSessionCreate) SetSessionID(v string) *OauthSessionCreate {
	_c.mutation.SetSessionID(v)
	return _c
}

// SetState sets the "state" field.
func (_c *OauthSessionCreate) SetState(v string) *OauthSessionCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetProviderID sets the "provider_id" field.
func (_c *OauthSessionCreate) SetProviderID(v uint64) *OauthSessionCreate {
	_c.mutation.SetProviderID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *OauthSessionCreate) SetUserID(v uuid.UUID) *OauthSessionCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableUserID(v *uuid.UUID) *OauthSessionCreate {
	if v != nil {
		_c.SetUserID(*v)
	}
	return _c
}

// SetRedirectURI sets the "redirect_uri" field.
func (_c *OauthSessionCreate) SetRedirectURI(v string) *OauthSessionCreate {
	_c.mutation.SetRedirectURI(v)
	return _c
}

// SetScope sets the "scope" field.
func (_c *OauthSessionCreate) SetScope(v string) *OauthSessionCreate {
	_c.mutation.SetScope(v)
	return _c
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableScope(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetScope(*v)
	}
	return _c
}

// SetCodeChallenge sets the "code_challenge" field.
func (_c *OauthSessionCreate) SetCodeChallenge(v string) *OauthSessionCreate {
	_c.mutation.SetCodeChallenge(v)
	return _c
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableCodeChallenge(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetCodeChallenge(*v)
	}
	return _c
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (_c *OauthSessionCreate) SetCodeChallengeMethod(v string) *OauthSessionCreate {
	_c.mutation.SetCodeChallengeMethod(v)
	return _c
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableCodeChallengeMethod(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetCodeChallengeMethod(*v)
	}
	return _c
}

// SetCodeVerifier sets the "code_verifier" field.
func (_c *OauthSessionCreate) SetCodeVerifier(v string) *OauthSessionCreate {
	_c.mutation.SetCodeVerifier(v)
	return _c
}

// SetNillableCodeVerifier sets the "code_verifier" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableCodeVerifier(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetCodeVerifier(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *OauthSessionCreate) SetExpiresAt(v time.Time) *OauthSessionCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetClientIP sets the "client_ip" field.
func (_c *OauthSessionCreate) SetClientIP(v string) *OauthSessionCreate {
	_c.mutation.SetClientIP(v)
	return _c
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableClientIP(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetClientIP(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *OauthSessionCreate) SetUserAgent(v string) *OauthSessionCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableUserAgent(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetAuthorizationCode sets the "authorization_code" field.
func (_c *OauthSessionCreate) SetAuthorizationCode(v string) *OauthSessionCreate {
	_c.mutation.SetAuthorizationCode(v)
	return _c
}

// SetNillableAuthorizationCode sets the "authorization_code" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableAuthorizationCode(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetAuthorizationCode(*v)
	}
	return _c
}

// SetCodeReceivedAt sets the "code_received_at" field.
func (_c *OauthSessionCreate) SetCodeReceivedAt(v time.Time) *OauthSessionCreate {
	_c.mutation.SetCodeReceivedAt(v)
	return _c
}

// SetNillableCodeReceivedAt sets the "code_received_at" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableCodeReceivedAt(v *time.Time) *OauthSessionCreate {
	if v != nil {
		_c.SetCodeReceivedAt(*v)
	}
	return _c
}

// SetCallbackData sets the "callback_data" field.
func (_c *OauthSessionCreate) SetCallbackData(v map[string]interface{}) *OauthSessionCreate {
	_c.mutation.SetCallbackData(v)
	return _c
}

// SetErrorCode sets the "error_code" field.
func (_c *OauthSessionCreate) SetErrorCode(v string) *OauthSessionCreate {
	_c.mutation.SetErrorCode(v)
	return _c
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableErrorCode(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetErrorCode(*v)
	}
	return _c
}

// SetErrorDescription sets the "error_description" field.
func (_c *OauthSessionCreate) SetErrorDescription(v string) *OauthSessionCreate {
	_c.mutation.SetErrorDescription(v)
	return _c
}

// SetNillableErrorDescription sets the "error_description" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableErrorDescription(v *string) *OauthSessionCreate {
	if v != nil {
		_c.SetErrorDescription(*v)
	}
	return _c
}

// SetRetryCount sets the "retry_count" field.
func (_c *OauthSessionCreate) SetRetryCount(v int) *OauthSessionCreate {
	_c.mutation.SetRetryCount(v)
	return _c
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableRetryCount(v *int) *OauthSessionCreate {
	if v != nil {
		_c.SetRetryCount(*v)
	}
	return _c
}

// SetDepartmentID sets the "department_id" field.
func (_c *OauthSessionCreate) SetDepartmentID(v uint64) *OauthSessionCreate {
	_c.mutation.SetDepartmentID(v)
	return _c
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_c *OauthSessionCreate) SetNillableDepartmentID(v *uint64) *OauthSessionCreate {
	if v != nil {
		_c.SetDepartmentID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OauthSessionCreate) SetID(v uint64) *OauthSessionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_c *OauthSessionCreate) SetProvider(v *OauthProvider) *OauthSessionCreate {
	return _c.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_c *OauthSessionCreate) SetUser(v *User) *OauthSessionCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the OauthSessionMutation object of the builder.
func (_c *OauthSessionCreate) Mutation() *OauthSessionMutation {
	return _c.mutation
}

// Save creates the OauthSession in the database.
func (_c *OauthSessionCreate) Save(ctx context.Context) (*OauthSession, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OauthSessionCreate) SaveX(ctx context.Context) *OauthSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthSessionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthSessionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OauthSessionCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := oauthsession.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := oauthsession.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := oauthsession.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		v := oauthsession.DefaultTenantID
		_c.mutation.SetTenantID(v)
	}
	if _, ok := _c.mutation.RetryCount(); !ok {
		v := oauthsession.DefaultRetryCount
		_c.mutation.SetRetryCount(v)
	}
	if _, ok := _c.mutation.DepartmentID(); !ok {
		v := oauthsession.DefaultDepartmentID
		_c.mutation.SetDepartmentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OauthSessionCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OauthSession.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OauthSession.updated_at"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OauthSession.tenant_id"`)}
	}
	if _, ok := _c.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "OauthSession.session_id"`)}
	}
	if v, ok := _c.mutation.SessionID(); ok {
		if err := oauthsession.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "OauthSession.session_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OauthSession.state"`)}
	}
	if v, ok := _c.mutation.State(); ok {
		if err := oauthsession.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "OauthSession.state": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OauthSession.provider_id"`)}
	}
	if _, ok := _c.mutation.RedirectURI(); !ok {
		return &ValidationError{Name: "redirect_uri", err: errors.New(`ent: missing required field "OauthSession.redirect_uri"`)}
	}
	if v, ok := _c.mutation.RedirectURI(); ok {
		if err := oauthsession.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OauthSession.redirect_uri": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Scope(); ok {
		if err := oauthsession.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "OauthSession.scope": %w`, err)}
		}
	}
	if v, ok := _c.mutation.CodeChallenge(); ok {
		if err := oauthsession.CodeChallengeValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_challenge": %w`, err)}
		}
	}
	if v, ok := _c.mutation.CodeChallengeMethod(); ok {
		if err := oauthsession.CodeChallengeMethodValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge_method", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_challenge_method": %w`, err)}
		}
	}
	if v, ok := _c.mutation.CodeVerifier(); ok {
		if err := oauthsession.CodeVerifierValidator(v); err != nil {
			return &ValidationError{Name: "code_verifier", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_verifier": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "OauthSession.expires_at"`)}
	}
	if v, ok := _c.mutation.ClientIP(); ok {
		if err := oauthsession.ClientIPValidator(v); err != nil {
			return &ValidationError{Name: "client_ip", err: fmt.Errorf(`ent: validator failed for field "OauthSession.client_ip": %w`, err)}
		}
	}
	if v, ok := _c.mutation.UserAgent(); ok {
		if err := oauthsession.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "OauthSession.user_agent": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AuthorizationCode(); ok {
		if err := oauthsession.AuthorizationCodeValidator(v); err != nil {
			return &ValidationError{Name: "authorization_code", err: fmt.Errorf(`ent: validator failed for field "OauthSession.authorization_code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ErrorCode(); ok {
		if err := oauthsession.ErrorCodeValidator(v); err != nil {
			return &ValidationError{Name: "error_code", err: fmt.Errorf(`ent: validator failed for field "OauthSession.error_code": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ErrorDescription(); ok {
		if err := oauthsession.ErrorDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "error_description", err: fmt.Errorf(`ent: validator failed for field "OauthSession.error_description": %w`, err)}
		}
	}
	if _, ok := _c.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "OauthSession.retry_count"`)}
	}
	if len(_c.mutation.ProviderIDs()) == 0 {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "OauthSession.provider"`)}
	}
	return nil
}

func (_c *OauthSessionCreate) sqlSave(ctx context.Context) (*OauthSession, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OauthSessionCreate) createSpec() (*OauthSession, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthSession{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(oauthsession.Table, sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(oauthsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(oauthsession.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(oauthsession.FieldTenantID, field.TypeUint64, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.SessionID(); ok {
		_spec.SetField(oauthsession.FieldSessionID, field.TypeString, value)
		_node.SessionID = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(oauthsession.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := _c.mutation.RedirectURI(); ok {
		_spec.SetField(oauthsession.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := _c.mutation.Scope(); ok {
		_spec.SetField(oauthsession.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := _c.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthsession.FieldCodeChallenge, field.TypeString, value)
		_node.CodeChallenge = value
	}
	if value, ok := _c.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthsession.FieldCodeChallengeMethod, field.TypeString, value)
		_node.CodeChallengeMethod = value
	}
	if value, ok := _c.mutation.CodeVerifier(); ok {
		_spec.SetField(oauthsession.FieldCodeVerifier, field.TypeString, value)
		_node.CodeVerifier = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthsession.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.ClientIP(); ok {
		_spec.SetField(oauthsession.FieldClientIP, field.TypeString, value)
		_node.ClientIP = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(oauthsession.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.AuthorizationCode(); ok {
		_spec.SetField(oauthsession.FieldAuthorizationCode, field.TypeString, value)
		_node.AuthorizationCode = value
	}
	if value, ok := _c.mutation.CodeReceivedAt(); ok {
		_spec.SetField(oauthsession.FieldCodeReceivedAt, field.TypeTime, value)
		_node.CodeReceivedAt = value
	}
	if value, ok := _c.mutation.CallbackData(); ok {
		_spec.SetField(oauthsession.FieldCallbackData, field.TypeJSON, value)
		_node.CallbackData = value
	}
	if value, ok := _c.mutation.ErrorCode(); ok {
		_spec.SetField(oauthsession.FieldErrorCode, field.TypeString, value)
		_node.ErrorCode = value
	}
	if value, ok := _c.mutation.ErrorDescription(); ok {
		_spec.SetField(oauthsession.FieldErrorDescription, field.TypeString, value)
		_node.ErrorDescription = value
	}
	if value, ok := _c.mutation.RetryCount(); ok {
		_spec.SetField(oauthsession.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := _c.mutation.DepartmentID(); ok {
		_spec.SetField(oauthsession.FieldDepartmentID, field.TypeUint64, value)
		_node.DepartmentID = value
	}
	if nodes := _c.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.ProviderTable,
			Columns: []string{oauthsession.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.UserTable,
			Columns: []string{oauthsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthSessionCreateBulk is the builder for creating many OauthSession entities in bulk.
type OauthSessionCreateBulk struct {
	config
	err      error
	builders []*OauthSessionCreate
}

// Save creates the OauthSession entities in the database.
func (_c *OauthSessionCreateBulk) Save(ctx context.Context) ([]*OauthSession, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OauthSession, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OauthSessionCreateBulk) SaveX(ctx context.Context) []*OauthSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthSessionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
