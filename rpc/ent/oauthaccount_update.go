// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthaccount"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
	"github.com/coder-lulu/newbee-core/rpc/ent/user"
	uuid "github.com/gofrs/uuid/v5"
)

// OauthAccountUpdate is the builder for updating OauthAccount entities.
type OauthAccountUpdate struct {
	config
	hooks     []Hook
	mutation  *OauthAccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OauthAccountUpdate builder.
func (_u *OauthAccountUpdate) Where(ps ...predicate.OauthAccount) *OauthAccountUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OauthAccountUpdate) SetUpdatedAt(v time.Time) *OauthAccountUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *OauthAccountUpdate) SetStatus(v uint8) *OauthAccountUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableStatus(v *uint8) *OauthAccountUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *OauthAccountUpdate) AddStatus(v int8) *OauthAccountUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OauthAccountUpdate) ClearStatus() *OauthAccountUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthAccountUpdate) SetUserID(v uuid.UUID) *OauthAccountUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableUserID(v *uuid.UUID) *OauthAccountUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthAccountUpdate) SetProviderID(v uint64) *OauthAccountUpdate {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableProviderID(v *uint64) *OauthAccountUpdate {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetProviderType sets the "provider_type" field.
func (_u *OauthAccountUpdate) SetProviderType(v string) *OauthAccountUpdate {
	_u.mutation.SetProviderType(v)
	return _u
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableProviderType(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetProviderType(*v)
	}
	return _u
}

// SetProviderUserID sets the "provider_user_id" field.
func (_u *OauthAccountUpdate) SetProviderUserID(v string) *OauthAccountUpdate {
	_u.mutation.SetProviderUserID(v)
	return _u
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableProviderUserID(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetProviderUserID(*v)
	}
	return _u
}

// SetProviderUsername sets the "provider_username" field.
func (_u *OauthAccountUpdate) SetProviderUsername(v string) *OauthAccountUpdate {
	_u.mutation.SetProviderUsername(v)
	return _u
}

// SetNillableProviderUsername sets the "provider_username" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableProviderUsername(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetProviderUsername(*v)
	}
	return _u
}

// ClearProviderUsername clears the value of the "provider_username" field.
func (_u *OauthAccountUpdate) ClearProviderUsername() *OauthAccountUpdate {
	_u.mutation.ClearProviderUsername()
	return _u
}

// SetProviderNickname sets the "provider_nickname" field.
func (_u *OauthAccountUpdate) SetProviderNickname(v string) *OauthAccountUpdate {
	_u.mutation.SetProviderNickname(v)
	return _u
}

// SetNillableProviderNickname sets the "provider_nickname" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableProviderNickname(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetProviderNickname(*v)
	}
	return _u
}

// ClearProviderNickname clears the value of the "provider_nickname" field.
func (_u *OauthAccountUpdate) ClearProviderNickname() *OauthAccountUpdate {
	_u.mutation.ClearProviderNickname()
	return _u
}

// SetProviderEmail sets the "provider_email" field.
func (_u *OauthAccountUpdate) SetProviderEmail(v string) *OauthAccountUpdate {
	_u.mutation.SetProviderEmail(v)
	return _u
}

// SetNillableProviderEmail sets the "provider_email" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableProviderEmail(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetProviderEmail(*v)
	}
	return _u
}

// ClearProviderEmail clears the value of the "provider_email" field.
func (_u *OauthAccountUpdate) ClearProviderEmail() *OauthAccountUpdate {
	_u.mutation.ClearProviderEmail()
	return _u
}

// SetProviderAvatar sets the "provider_avatar" field.
func (_u *OauthAccountUpdate) SetProviderAvatar(v string) *OauthAccountUpdate {
	_u.mutation.SetProviderAvatar(v)
	return _u
}

// SetNillableProviderAvatar sets the "provider_avatar" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableProviderAvatar(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetProviderAvatar(*v)
	}
	return _u
}

// ClearProviderAvatar clears the value of the "provider_avatar" field.
func (_u *OauthAccountUpdate) ClearProviderAvatar() *OauthAccountUpdate {
	_u.mutation.ClearProviderAvatar()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *OauthAccountUpdate) SetAccessToken(v string) *OauthAccountUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableAccessToken(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *OauthAccountUpdate) SetRefreshToken(v string) *OauthAccountUpdate {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableRefreshToken(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *OauthAccountUpdate) ClearRefreshToken() *OauthAccountUpdate {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (_u *OauthAccountUpdate) SetTokenExpiresAt(v time.Time) *OauthAccountUpdate {
	_u.mutation.SetTokenExpiresAt(v)
	return _u
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableTokenExpiresAt(v *time.Time) *OauthAccountUpdate {
	if v != nil {
		_u.SetTokenExpiresAt(*v)
	}
	return _u
}

// ClearTokenExpiresAt clears the value of the "token_expires_at" field.
func (_u *OauthAccountUpdate) ClearTokenExpiresAt() *OauthAccountUpdate {
	_u.mutation.ClearTokenExpiresAt()
	return _u
}

// SetExtraData sets the "extra_data" field.
func (_u *OauthAccountUpdate) SetExtraData(v map[string]interface{}) *OauthAccountUpdate {
	_u.mutation.SetExtraData(v)
	return _u
}

// ClearExtraData clears the value of the "extra_data" field.
func (_u *OauthAccountUpdate) ClearExtraData() *OauthAccountUpdate {
	_u.mutation.ClearExtraData()
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *OauthAccountUpdate) SetLastLoginAt(v time.Time) *OauthAccountUpdate {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableLastLoginAt(v *time.Time) *OauthAccountUpdate {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *OauthAccountUpdate) ClearLastLoginAt() *OauthAccountUpdate {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *OauthAccountUpdate) SetLastLoginIP(v string) *OauthAccountUpdate {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableLastLoginIP(v *string) *OauthAccountUpdate {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *OauthAccountUpdate) ClearLastLoginIP() *OauthAccountUpdate {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetLoginCount sets the "login_count" field.
func (_u *OauthAccountUpdate) SetLoginCount(v uint32) *OauthAccountUpdate {
	_u.mutation.ResetLoginCount()
	_u.mutation.SetLoginCount(v)
	return _u
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableLoginCount(v *uint32) *OauthAccountUpdate {
	if v != nil {
		_u.SetLoginCount(*v)
	}
	return _u
}

// AddLoginCount adds value to the "login_count" field.
func (_u *OauthAccountUpdate) AddLoginCount(v int32) *OauthAccountUpdate {
	_u.mutation.AddLoginCount(v)
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *OauthAccountUpdate) SetDepartmentID(v uint64) *OauthAccountUpdate {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *OauthAccountUpdate) SetNillableDepartmentID(v *uint64) *OauthAccountUpdate {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *OauthAccountUpdate) AddDepartmentID(v int64) *OauthAccountUpdate {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// ClearDepartmentID clears the value of the "department_id" field.
func (_u *OauthAccountUpdate) ClearDepartmentID() *OauthAccountUpdate {
	_u.mutation.ClearDepartmentID()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthAccountUpdate) SetUser(v *User) *OauthAccountUpdate {
	return _u.SetUserID(v.ID)
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthAccountUpdate) SetProvider(v *OauthProvider) *OauthAccountUpdate {
	return _u.SetProviderID(v.ID)
}

// Mutation returns the OauthAccountMutation object of the builder.
func (_u *OauthAccountUpdate) Mutation() *OauthAccountMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthAccountUpdate) ClearUser() *OauthAccountUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthAccountUpdate) ClearProvider() *OauthAccountUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthAccountUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthAccountUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthAccountUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthAccountUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := oauthaccount.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthAccountUpdate) check() error {
	if v, ok := _u.mutation.ProviderType(); ok {
		if err := oauthaccount.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderUserID(); ok {
		if err := oauthaccount.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderUsername(); ok {
		if err := oauthaccount.ProviderUsernameValidator(v); err != nil {
			return &ValidationError{Name: "provider_username", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderNickname(); ok {
		if err := oauthaccount.ProviderNicknameValidator(v); err != nil {
			return &ValidationError{Name: "provider_nickname", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_nickname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderEmail(); ok {
		if err := oauthaccount.ProviderEmailValidator(v); err != nil {
			return &ValidationError{Name: "provider_email", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderAvatar(); ok {
		if err := oauthaccount.ProviderAvatarValidator(v); err != nil {
			return &ValidationError{Name: "provider_avatar", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_avatar": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AccessToken(); ok {
		if err := oauthaccount.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.access_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshToken(); ok {
		if err := oauthaccount.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.refresh_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastLoginIP(); ok {
		if err := oauthaccount.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.last_login_ip": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAccount.user"`)
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAccount.provider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OauthAccountUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthAccountUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OauthAccountUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthaccount.Table, oauthaccount.Columns, sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(oauthaccount.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(oauthaccount.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(oauthaccount.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.ProviderType(); ok {
		_spec.SetField(oauthaccount.FieldProviderType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthaccount.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderUsername(); ok {
		_spec.SetField(oauthaccount.FieldProviderUsername, field.TypeString, value)
	}
	if _u.mutation.ProviderUsernameCleared() {
		_spec.ClearField(oauthaccount.FieldProviderUsername, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderNickname(); ok {
		_spec.SetField(oauthaccount.FieldProviderNickname, field.TypeString, value)
	}
	if _u.mutation.ProviderNicknameCleared() {
		_spec.ClearField(oauthaccount.FieldProviderNickname, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderEmail(); ok {
		_spec.SetField(oauthaccount.FieldProviderEmail, field.TypeString, value)
	}
	if _u.mutation.ProviderEmailCleared() {
		_spec.ClearField(oauthaccount.FieldProviderEmail, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderAvatar(); ok {
		_spec.SetField(oauthaccount.FieldProviderAvatar, field.TypeString, value)
	}
	if _u.mutation.ProviderAvatarCleared() {
		_spec.ClearField(oauthaccount.FieldProviderAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(oauthaccount.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(oauthaccount.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthaccount.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.TokenExpiresAt(); ok {
		_spec.SetField(oauthaccount.FieldTokenExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TokenExpiresAtCleared() {
		_spec.ClearField(oauthaccount.FieldTokenExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExtraData(); ok {
		_spec.SetField(oauthaccount.FieldExtraData, field.TypeJSON, value)
	}
	if _u.mutation.ExtraDataCleared() {
		_spec.ClearField(oauthaccount.FieldExtraData, field.TypeJSON)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(oauthaccount.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(oauthaccount.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(oauthaccount.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(oauthaccount.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginCount(); ok {
		_spec.SetField(oauthaccount.FieldLoginCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedLoginCount(); ok {
		_spec.AddField(oauthaccount.FieldLoginCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(oauthaccount.FieldDepartmentID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(oauthaccount.FieldDepartmentID, field.TypeUint64, value)
	}
	if _u.mutation.DepartmentIDCleared() {
		_spec.ClearField(oauthaccount.FieldDepartmentID, field.TypeUint64)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.ProviderTable,
			Columns: []string{oauthaccount.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.ProviderTable,
			Columns: []string{oauthaccount.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthAccountUpdateOne is the builder for updating a single OauthAccount entity.
type OauthAccountUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OauthAccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OauthAccountUpdateOne) SetUpdatedAt(v time.Time) *OauthAccountUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *OauthAccountUpdateOne) SetStatus(v uint8) *OauthAccountUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableStatus(v *uint8) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *OauthAccountUpdateOne) AddStatus(v int8) *OauthAccountUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OauthAccountUpdateOne) ClearStatus() *OauthAccountUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthAccountUpdateOne) SetUserID(v uuid.UUID) *OauthAccountUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableUserID(v *uuid.UUID) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthAccountUpdateOne) SetProviderID(v uint64) *OauthAccountUpdateOne {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableProviderID(v *uint64) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetProviderType sets the "provider_type" field.
func (_u *OauthAccountUpdateOne) SetProviderType(v string) *OauthAccountUpdateOne {
	_u.mutation.SetProviderType(v)
	return _u
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableProviderType(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetProviderType(*v)
	}
	return _u
}

// SetProviderUserID sets the "provider_user_id" field.
func (_u *OauthAccountUpdateOne) SetProviderUserID(v string) *OauthAccountUpdateOne {
	_u.mutation.SetProviderUserID(v)
	return _u
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableProviderUserID(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetProviderUserID(*v)
	}
	return _u
}

// SetProviderUsername sets the "provider_username" field.
func (_u *OauthAccountUpdateOne) SetProviderUsername(v string) *OauthAccountUpdateOne {
	_u.mutation.SetProviderUsername(v)
	return _u
}

// SetNillableProviderUsername sets the "provider_username" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableProviderUsername(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetProviderUsername(*v)
	}
	return _u
}

// ClearProviderUsername clears the value of the "provider_username" field.
func (_u *OauthAccountUpdateOne) ClearProviderUsername() *OauthAccountUpdateOne {
	_u.mutation.ClearProviderUsername()
	return _u
}

// SetProviderNickname sets the "provider_nickname" field.
func (_u *OauthAccountUpdateOne) SetProviderNickname(v string) *OauthAccountUpdateOne {
	_u.mutation.SetProviderNickname(v)
	return _u
}

// SetNillableProviderNickname sets the "provider_nickname" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableProviderNickname(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetProviderNickname(*v)
	}
	return _u
}

// ClearProviderNickname clears the value of the "provider_nickname" field.
func (_u *OauthAccountUpdateOne) ClearProviderNickname() *OauthAccountUpdateOne {
	_u.mutation.ClearProviderNickname()
	return _u
}

// SetProviderEmail sets the "provider_email" field.
func (_u *OauthAccountUpdateOne) SetProviderEmail(v string) *OauthAccountUpdateOne {
	_u.mutation.SetProviderEmail(v)
	return _u
}

// SetNillableProviderEmail sets the "provider_email" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableProviderEmail(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetProviderEmail(*v)
	}
	return _u
}

// ClearProviderEmail clears the value of the "provider_email" field.
func (_u *OauthAccountUpdateOne) ClearProviderEmail() *OauthAccountUpdateOne {
	_u.mutation.ClearProviderEmail()
	return _u
}

// SetProviderAvatar sets the "provider_avatar" field.
func (_u *OauthAccountUpdateOne) SetProviderAvatar(v string) *OauthAccountUpdateOne {
	_u.mutation.SetProviderAvatar(v)
	return _u
}

// SetNillableProviderAvatar sets the "provider_avatar" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableProviderAvatar(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetProviderAvatar(*v)
	}
	return _u
}

// ClearProviderAvatar clears the value of the "provider_avatar" field.
func (_u *OauthAccountUpdateOne) ClearProviderAvatar() *OauthAccountUpdateOne {
	_u.mutation.ClearProviderAvatar()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *OauthAccountUpdateOne) SetAccessToken(v string) *OauthAccountUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableAccessToken(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *OauthAccountUpdateOne) SetRefreshToken(v string) *OauthAccountUpdateOne {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableRefreshToken(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *OauthAccountUpdateOne) ClearRefreshToken() *OauthAccountUpdateOne {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (_u *OauthAccountUpdateOne) SetTokenExpiresAt(v time.Time) *OauthAccountUpdateOne {
	_u.mutation.SetTokenExpiresAt(v)
	return _u
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableTokenExpiresAt(v *time.Time) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetTokenExpiresAt(*v)
	}
	return _u
}

// ClearTokenExpiresAt clears the value of the "token_expires_at" field.
func (_u *OauthAccountUpdateOne) ClearTokenExpiresAt() *OauthAccountUpdateOne {
	_u.mutation.ClearTokenExpiresAt()
	return _u
}

// SetExtraData sets the "extra_data" field.
func (_u *OauthAccountUpdateOne) SetExtraData(v map[string]interface{}) *OauthAccountUpdateOne {
	_u.mutation.SetExtraData(v)
	return _u
}

// ClearExtraData clears the value of the "extra_data" field.
func (_u *OauthAccountUpdateOne) ClearExtraData() *OauthAccountUpdateOne {
	_u.mutation.ClearExtraData()
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *OauthAccountUpdateOne) SetLastLoginAt(v time.Time) *OauthAccountUpdateOne {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableLastLoginAt(v *time.Time) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *OauthAccountUpdateOne) ClearLastLoginAt() *OauthAccountUpdateOne {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *OauthAccountUpdateOne) SetLastLoginIP(v string) *OauthAccountUpdateOne {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableLastLoginIP(v *string) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *OauthAccountUpdateOne) ClearLastLoginIP() *OauthAccountUpdateOne {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetLoginCount sets the "login_count" field.
func (_u *OauthAccountUpdateOne) SetLoginCount(v uint32) *OauthAccountUpdateOne {
	_u.mutation.ResetLoginCount()
	_u.mutation.SetLoginCount(v)
	return _u
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableLoginCount(v *uint32) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetLoginCount(*v)
	}
	return _u
}

// AddLoginCount adds value to the "login_count" field.
func (_u *OauthAccountUpdateOne) AddLoginCount(v int32) *OauthAccountUpdateOne {
	_u.mutation.AddLoginCount(v)
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *OauthAccountUpdateOne) SetDepartmentID(v uint64) *OauthAccountUpdateOne {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *OauthAccountUpdateOne) SetNillableDepartmentID(v *uint64) *OauthAccountUpdateOne {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *OauthAccountUpdateOne) AddDepartmentID(v int64) *OauthAccountUpdateOne {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// ClearDepartmentID clears the value of the "department_id" field.
func (_u *OauthAccountUpdateOne) ClearDepartmentID() *OauthAccountUpdateOne {
	_u.mutation.ClearDepartmentID()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthAccountUpdateOne) SetUser(v *User) *OauthAccountUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthAccountUpdateOne) SetProvider(v *OauthProvider) *OauthAccountUpdateOne {
	return _u.SetProviderID(v.ID)
}

// Mutation returns the OauthAccountMutation object of the builder.
func (_u *OauthAccountUpdateOne) Mutation() *OauthAccountMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthAccountUpdateOne) ClearUser() *OauthAccountUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthAccountUpdateOne) ClearProvider() *OauthAccountUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// Where appends a list predicates to the OauthAccountUpdate builder.
func (_u *OauthAccountUpdateOne) Where(ps ...predicate.OauthAccount) *OauthAccountUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthAccountUpdateOne) Select(field string, fields ...string) *OauthAccountUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthAccount entity.
func (_u *OauthAccountUpdateOne) Save(ctx context.Context) (*OauthAccount, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthAccountUpdateOne) SaveX(ctx context.Context) *OauthAccount {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthAccountUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthAccountUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := oauthaccount.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthAccountUpdateOne) check() error {
	if v, ok := _u.mutation.ProviderType(); ok {
		if err := oauthaccount.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderUserID(); ok {
		if err := oauthaccount.ProviderUserIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_user_id", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderUsername(); ok {
		if err := oauthaccount.ProviderUsernameValidator(v); err != nil {
			return &ValidationError{Name: "provider_username", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderNickname(); ok {
		if err := oauthaccount.ProviderNicknameValidator(v); err != nil {
			return &ValidationError{Name: "provider_nickname", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_nickname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderEmail(); ok {
		if err := oauthaccount.ProviderEmailValidator(v); err != nil {
			return &ValidationError{Name: "provider_email", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderAvatar(); ok {
		if err := oauthaccount.ProviderAvatarValidator(v); err != nil {
			return &ValidationError{Name: "provider_avatar", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.provider_avatar": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AccessToken(); ok {
		if err := oauthaccount.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.access_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefreshToken(); ok {
		if err := oauthaccount.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.refresh_token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastLoginIP(); ok {
		if err := oauthaccount.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "OauthAccount.last_login_ip": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAccount.user"`)
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthAccount.provider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OauthAccountUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthAccountUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OauthAccountUpdateOne) sqlSave(ctx context.Context) (_node *OauthAccount, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthaccount.Table, oauthaccount.Columns, sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthaccount.FieldID)
		for _, f := range fields {
			if !oauthaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(oauthaccount.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(oauthaccount.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(oauthaccount.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.ProviderType(); ok {
		_spec.SetField(oauthaccount.FieldProviderType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthaccount.FieldProviderUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderUsername(); ok {
		_spec.SetField(oauthaccount.FieldProviderUsername, field.TypeString, value)
	}
	if _u.mutation.ProviderUsernameCleared() {
		_spec.ClearField(oauthaccount.FieldProviderUsername, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderNickname(); ok {
		_spec.SetField(oauthaccount.FieldProviderNickname, field.TypeString, value)
	}
	if _u.mutation.ProviderNicknameCleared() {
		_spec.ClearField(oauthaccount.FieldProviderNickname, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderEmail(); ok {
		_spec.SetField(oauthaccount.FieldProviderEmail, field.TypeString, value)
	}
	if _u.mutation.ProviderEmailCleared() {
		_spec.ClearField(oauthaccount.FieldProviderEmail, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderAvatar(); ok {
		_spec.SetField(oauthaccount.FieldProviderAvatar, field.TypeString, value)
	}
	if _u.mutation.ProviderAvatarCleared() {
		_spec.ClearField(oauthaccount.FieldProviderAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(oauthaccount.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(oauthaccount.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(oauthaccount.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.TokenExpiresAt(); ok {
		_spec.SetField(oauthaccount.FieldTokenExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TokenExpiresAtCleared() {
		_spec.ClearField(oauthaccount.FieldTokenExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExtraData(); ok {
		_spec.SetField(oauthaccount.FieldExtraData, field.TypeJSON, value)
	}
	if _u.mutation.ExtraDataCleared() {
		_spec.ClearField(oauthaccount.FieldExtraData, field.TypeJSON)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(oauthaccount.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(oauthaccount.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(oauthaccount.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(oauthaccount.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginCount(); ok {
		_spec.SetField(oauthaccount.FieldLoginCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedLoginCount(); ok {
		_spec.AddField(oauthaccount.FieldLoginCount, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(oauthaccount.FieldDepartmentID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(oauthaccount.FieldDepartmentID, field.TypeUint64, value)
	}
	if _u.mutation.DepartmentIDCleared() {
		_spec.ClearField(oauthaccount.FieldDepartmentID, field.TypeUint64)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.ProviderTable,
			Columns: []string{oauthaccount.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.ProviderTable,
			Columns: []string{oauthaccount.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &OauthAccount{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
