// Code generated by ent, DO NOT EDIT.

package oauthsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
	uuid "github.com/gofrs/uuid/v5"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldStatus, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldTenantID, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldSessionID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldState, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldProviderID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldUserID, v))
}

// RedirectURI applies equality check predicate on the "redirect_uri" field. It's identical to RedirectURIEQ.
func RedirectURI(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldRedirectURI, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldScope, v))
}

// CodeChallenge applies equality check predicate on the "code_challenge" field. It's identical to CodeChallengeEQ.
func CodeChallenge(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeChallenge, v))
}

// CodeChallengeMethod applies equality check predicate on the "code_challenge_method" field. It's identical to CodeChallengeMethodEQ.
func CodeChallengeMethod(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeChallengeMethod, v))
}

// CodeVerifier applies equality check predicate on the "code_verifier" field. It's identical to CodeVerifierEQ.
func CodeVerifier(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeVerifier, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldExpiresAt, v))
}

// ClientIP applies equality check predicate on the "client_ip" field. It's identical to ClientIPEQ.
func ClientIP(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldClientIP, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldUserAgent, v))
}

// AuthorizationCode applies equality check predicate on the "authorization_code" field. It's identical to AuthorizationCodeEQ.
func AuthorizationCode(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldAuthorizationCode, v))
}

// CodeReceivedAt applies equality check predicate on the "code_received_at" field. It's identical to CodeReceivedAtEQ.
func CodeReceivedAt(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeReceivedAt, v))
}

// ErrorCode applies equality check predicate on the "error_code" field. It's identical to ErrorCodeEQ.
func ErrorCode(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldErrorCode, v))
}

// ErrorDescription applies equality check predicate on the "error_description" field. It's identical to ErrorDescriptionEQ.
func ErrorDescription(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldErrorDescription, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldRetryCount, v))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldDepartmentID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldStatus))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldTenantID, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldSessionID, v))
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldSessionID, v))
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldSessionID, v))
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldSessionID, v))
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldSessionID, v))
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldSessionID, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldState, v))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldProviderID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldUserID))
}

// RedirectURIEQ applies the EQ predicate on the "redirect_uri" field.
func RedirectURIEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldRedirectURI, v))
}

// RedirectURINEQ applies the NEQ predicate on the "redirect_uri" field.
func RedirectURINEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldRedirectURI, v))
}

// RedirectURIIn applies the In predicate on the "redirect_uri" field.
func RedirectURIIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldRedirectURI, vs...))
}

// RedirectURINotIn applies the NotIn predicate on the "redirect_uri" field.
func RedirectURINotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldRedirectURI, vs...))
}

// RedirectURIGT applies the GT predicate on the "redirect_uri" field.
func RedirectURIGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldRedirectURI, v))
}

// RedirectURIGTE applies the GTE predicate on the "redirect_uri" field.
func RedirectURIGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldRedirectURI, v))
}

// RedirectURILT applies the LT predicate on the "redirect_uri" field.
func RedirectURILT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldRedirectURI, v))
}

// RedirectURILTE applies the LTE predicate on the "redirect_uri" field.
func RedirectURILTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldRedirectURI, v))
}

// RedirectURIContains applies the Contains predicate on the "redirect_uri" field.
func RedirectURIContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldRedirectURI, v))
}

// RedirectURIHasPrefix applies the HasPrefix predicate on the "redirect_uri" field.
func RedirectURIHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldRedirectURI, v))
}

// RedirectURIHasSuffix applies the HasSuffix predicate on the "redirect_uri" field.
func RedirectURIHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldRedirectURI, v))
}

// RedirectURIEqualFold applies the EqualFold predicate on the "redirect_uri" field.
func RedirectURIEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldRedirectURI, v))
}

// RedirectURIContainsFold applies the ContainsFold predicate on the "redirect_uri" field.
func RedirectURIContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldRedirectURI, v))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeIsNil applies the IsNil predicate on the "scope" field.
func ScopeIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldScope))
}

// ScopeNotNil applies the NotNil predicate on the "scope" field.
func ScopeNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldScope))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldScope, v))
}

// CodeChallengeEQ applies the EQ predicate on the "code_challenge" field.
func CodeChallengeEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeChallenge, v))
}

// CodeChallengeNEQ applies the NEQ predicate on the "code_challenge" field.
func CodeChallengeNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldCodeChallenge, v))
}

// CodeChallengeIn applies the In predicate on the "code_challenge" field.
func CodeChallengeIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldCodeChallenge, vs...))
}

// CodeChallengeNotIn applies the NotIn predicate on the "code_challenge" field.
func CodeChallengeNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldCodeChallenge, vs...))
}

// CodeChallengeGT applies the GT predicate on the "code_challenge" field.
func CodeChallengeGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldCodeChallenge, v))
}

// CodeChallengeGTE applies the GTE predicate on the "code_challenge" field.
func CodeChallengeGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldCodeChallenge, v))
}

// CodeChallengeLT applies the LT predicate on the "code_challenge" field.
func CodeChallengeLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldCodeChallenge, v))
}

// CodeChallengeLTE applies the LTE predicate on the "code_challenge" field.
func CodeChallengeLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldCodeChallenge, v))
}

// CodeChallengeContains applies the Contains predicate on the "code_challenge" field.
func CodeChallengeContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldCodeChallenge, v))
}

// CodeChallengeHasPrefix applies the HasPrefix predicate on the "code_challenge" field.
func CodeChallengeHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldCodeChallenge, v))
}

// CodeChallengeHasSuffix applies the HasSuffix predicate on the "code_challenge" field.
func CodeChallengeHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldCodeChallenge, v))
}

// CodeChallengeIsNil applies the IsNil predicate on the "code_challenge" field.
func CodeChallengeIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldCodeChallenge))
}

// CodeChallengeNotNil applies the NotNil predicate on the "code_challenge" field.
func CodeChallengeNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldCodeChallenge))
}

// CodeChallengeEqualFold applies the EqualFold predicate on the "code_challenge" field.
func CodeChallengeEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldCodeChallenge, v))
}

// CodeChallengeContainsFold applies the ContainsFold predicate on the "code_challenge" field.
func CodeChallengeContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldCodeChallenge, v))
}

// CodeChallengeMethodEQ applies the EQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodNEQ applies the NEQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodIn applies the In predicate on the "code_challenge_method" field.
func CodeChallengeMethodIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldCodeChallengeMethod, vs...))
}

// CodeChallengeMethodNotIn applies the NotIn predicate on the "code_challenge_method" field.
func CodeChallengeMethodNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldCodeChallengeMethod, vs...))
}

// CodeChallengeMethodGT applies the GT predicate on the "code_challenge_method" field.
func CodeChallengeMethodGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodGTE applies the GTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodLT applies the LT predicate on the "code_challenge_method" field.
func CodeChallengeMethodLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodLTE applies the LTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodContains applies the Contains predicate on the "code_challenge_method" field.
func CodeChallengeMethodContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodHasPrefix applies the HasPrefix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodHasSuffix applies the HasSuffix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodIsNil applies the IsNil predicate on the "code_challenge_method" field.
func CodeChallengeMethodIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldCodeChallengeMethod))
}

// CodeChallengeMethodNotNil applies the NotNil predicate on the "code_challenge_method" field.
func CodeChallengeMethodNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldCodeChallengeMethod))
}

// CodeChallengeMethodEqualFold applies the EqualFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodContainsFold applies the ContainsFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldCodeChallengeMethod, v))
}

// CodeVerifierEQ applies the EQ predicate on the "code_verifier" field.
func CodeVerifierEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeVerifier, v))
}

// CodeVerifierNEQ applies the NEQ predicate on the "code_verifier" field.
func CodeVerifierNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldCodeVerifier, v))
}

// CodeVerifierIn applies the In predicate on the "code_verifier" field.
func CodeVerifierIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldCodeVerifier, vs...))
}

// CodeVerifierNotIn applies the NotIn predicate on the "code_verifier" field.
func CodeVerifierNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldCodeVerifier, vs...))
}

// CodeVerifierGT applies the GT predicate on the "code_verifier" field.
func CodeVerifierGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldCodeVerifier, v))
}

// CodeVerifierGTE applies the GTE predicate on the "code_verifier" field.
func CodeVerifierGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldCodeVerifier, v))
}

// CodeVerifierLT applies the LT predicate on the "code_verifier" field.
func CodeVerifierLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldCodeVerifier, v))
}

// CodeVerifierLTE applies the LTE predicate on the "code_verifier" field.
func CodeVerifierLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldCodeVerifier, v))
}

// CodeVerifierContains applies the Contains predicate on the "code_verifier" field.
func CodeVerifierContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldCodeVerifier, v))
}

// CodeVerifierHasPrefix applies the HasPrefix predicate on the "code_verifier" field.
func CodeVerifierHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldCodeVerifier, v))
}

// CodeVerifierHasSuffix applies the HasSuffix predicate on the "code_verifier" field.
func CodeVerifierHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldCodeVerifier, v))
}

// CodeVerifierIsNil applies the IsNil predicate on the "code_verifier" field.
func CodeVerifierIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldCodeVerifier))
}

// CodeVerifierNotNil applies the NotNil predicate on the "code_verifier" field.
func CodeVerifierNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldCodeVerifier))
}

// CodeVerifierEqualFold applies the EqualFold predicate on the "code_verifier" field.
func CodeVerifierEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldCodeVerifier, v))
}

// CodeVerifierContainsFold applies the ContainsFold predicate on the "code_verifier" field.
func CodeVerifierContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldCodeVerifier, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldExpiresAt, v))
}

// ClientIPEQ applies the EQ predicate on the "client_ip" field.
func ClientIPEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldClientIP, v))
}

// ClientIPNEQ applies the NEQ predicate on the "client_ip" field.
func ClientIPNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldClientIP, v))
}

// ClientIPIn applies the In predicate on the "client_ip" field.
func ClientIPIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldClientIP, vs...))
}

// ClientIPNotIn applies the NotIn predicate on the "client_ip" field.
func ClientIPNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldClientIP, vs...))
}

// ClientIPGT applies the GT predicate on the "client_ip" field.
func ClientIPGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldClientIP, v))
}

// ClientIPGTE applies the GTE predicate on the "client_ip" field.
func ClientIPGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldClientIP, v))
}

// ClientIPLT applies the LT predicate on the "client_ip" field.
func ClientIPLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldClientIP, v))
}

// ClientIPLTE applies the LTE predicate on the "client_ip" field.
func ClientIPLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldClientIP, v))
}

// ClientIPContains applies the Contains predicate on the "client_ip" field.
func ClientIPContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldClientIP, v))
}

// ClientIPHasPrefix applies the HasPrefix predicate on the "client_ip" field.
func ClientIPHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldClientIP, v))
}

// ClientIPHasSuffix applies the HasSuffix predicate on the "client_ip" field.
func ClientIPHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldClientIP, v))
}

// ClientIPIsNil applies the IsNil predicate on the "client_ip" field.
func ClientIPIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldClientIP))
}

// ClientIPNotNil applies the NotNil predicate on the "client_ip" field.
func ClientIPNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldClientIP))
}

// ClientIPEqualFold applies the EqualFold predicate on the "client_ip" field.
func ClientIPEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldClientIP, v))
}

// ClientIPContainsFold applies the ContainsFold predicate on the "client_ip" field.
func ClientIPContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldClientIP, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldUserAgent, v))
}

// AuthorizationCodeEQ applies the EQ predicate on the "authorization_code" field.
func AuthorizationCodeEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldAuthorizationCode, v))
}

// AuthorizationCodeNEQ applies the NEQ predicate on the "authorization_code" field.
func AuthorizationCodeNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldAuthorizationCode, v))
}

// AuthorizationCodeIn applies the In predicate on the "authorization_code" field.
func AuthorizationCodeIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldAuthorizationCode, vs...))
}

// AuthorizationCodeNotIn applies the NotIn predicate on the "authorization_code" field.
func AuthorizationCodeNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldAuthorizationCode, vs...))
}

// AuthorizationCodeGT applies the GT predicate on the "authorization_code" field.
func AuthorizationCodeGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldAuthorizationCode, v))
}

// AuthorizationCodeGTE applies the GTE predicate on the "authorization_code" field.
func AuthorizationCodeGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldAuthorizationCode, v))
}

// AuthorizationCodeLT applies the LT predicate on the "authorization_code" field.
func AuthorizationCodeLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldAuthorizationCode, v))
}

// AuthorizationCodeLTE applies the LTE predicate on the "authorization_code" field.
func AuthorizationCodeLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldAuthorizationCode, v))
}

// AuthorizationCodeContains applies the Contains predicate on the "authorization_code" field.
func AuthorizationCodeContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldAuthorizationCode, v))
}

// AuthorizationCodeHasPrefix applies the HasPrefix predicate on the "authorization_code" field.
func AuthorizationCodeHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldAuthorizationCode, v))
}

// AuthorizationCodeHasSuffix applies the HasSuffix predicate on the "authorization_code" field.
func AuthorizationCodeHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldAuthorizationCode, v))
}

// AuthorizationCodeIsNil applies the IsNil predicate on the "authorization_code" field.
func AuthorizationCodeIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldAuthorizationCode))
}

// AuthorizationCodeNotNil applies the NotNil predicate on the "authorization_code" field.
func AuthorizationCodeNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldAuthorizationCode))
}

// AuthorizationCodeEqualFold applies the EqualFold predicate on the "authorization_code" field.
func AuthorizationCodeEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldAuthorizationCode, v))
}

// AuthorizationCodeContainsFold applies the ContainsFold predicate on the "authorization_code" field.
func AuthorizationCodeContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldAuthorizationCode, v))
}

// CodeReceivedAtEQ applies the EQ predicate on the "code_received_at" field.
func CodeReceivedAtEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldCodeReceivedAt, v))
}

// CodeReceivedAtNEQ applies the NEQ predicate on the "code_received_at" field.
func CodeReceivedAtNEQ(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldCodeReceivedAt, v))
}

// CodeReceivedAtIn applies the In predicate on the "code_received_at" field.
func CodeReceivedAtIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldCodeReceivedAt, vs...))
}

// CodeReceivedAtNotIn applies the NotIn predicate on the "code_received_at" field.
func CodeReceivedAtNotIn(vs ...time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldCodeReceivedAt, vs...))
}

// CodeReceivedAtGT applies the GT predicate on the "code_received_at" field.
func CodeReceivedAtGT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldCodeReceivedAt, v))
}

// CodeReceivedAtGTE applies the GTE predicate on the "code_received_at" field.
func CodeReceivedAtGTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldCodeReceivedAt, v))
}

// CodeReceivedAtLT applies the LT predicate on the "code_received_at" field.
func CodeReceivedAtLT(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldCodeReceivedAt, v))
}

// CodeReceivedAtLTE applies the LTE predicate on the "code_received_at" field.
func CodeReceivedAtLTE(v time.Time) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldCodeReceivedAt, v))
}

// CodeReceivedAtIsNil applies the IsNil predicate on the "code_received_at" field.
func CodeReceivedAtIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldCodeReceivedAt))
}

// CodeReceivedAtNotNil applies the NotNil predicate on the "code_received_at" field.
func CodeReceivedAtNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldCodeReceivedAt))
}

// CallbackDataIsNil applies the IsNil predicate on the "callback_data" field.
func CallbackDataIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldCallbackData))
}

// CallbackDataNotNil applies the NotNil predicate on the "callback_data" field.
func CallbackDataNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldCallbackData))
}

// ErrorCodeEQ applies the EQ predicate on the "error_code" field.
func ErrorCodeEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldErrorCode, v))
}

// ErrorCodeNEQ applies the NEQ predicate on the "error_code" field.
func ErrorCodeNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldErrorCode, v))
}

// ErrorCodeIn applies the In predicate on the "error_code" field.
func ErrorCodeIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldErrorCode, vs...))
}

// ErrorCodeNotIn applies the NotIn predicate on the "error_code" field.
func ErrorCodeNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldErrorCode, vs...))
}

// ErrorCodeGT applies the GT predicate on the "error_code" field.
func ErrorCodeGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldErrorCode, v))
}

// ErrorCodeGTE applies the GTE predicate on the "error_code" field.
func ErrorCodeGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldErrorCode, v))
}

// ErrorCodeLT applies the LT predicate on the "error_code" field.
func ErrorCodeLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldErrorCode, v))
}

// ErrorCodeLTE applies the LTE predicate on the "error_code" field.
func ErrorCodeLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldErrorCode, v))
}

// ErrorCodeContains applies the Contains predicate on the "error_code" field.
func ErrorCodeContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldErrorCode, v))
}

// ErrorCodeHasPrefix applies the HasPrefix predicate on the "error_code" field.
func ErrorCodeHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldErrorCode, v))
}

// ErrorCodeHasSuffix applies the HasSuffix predicate on the "error_code" field.
func ErrorCodeHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldErrorCode, v))
}

// ErrorCodeIsNil applies the IsNil predicate on the "error_code" field.
func ErrorCodeIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldErrorCode))
}

// ErrorCodeNotNil applies the NotNil predicate on the "error_code" field.
func ErrorCodeNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldErrorCode))
}

// ErrorCodeEqualFold applies the EqualFold predicate on the "error_code" field.
func ErrorCodeEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldErrorCode, v))
}

// ErrorCodeContainsFold applies the ContainsFold predicate on the "error_code" field.
func ErrorCodeContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldErrorCode, v))
}

// ErrorDescriptionEQ applies the EQ predicate on the "error_description" field.
func ErrorDescriptionEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldErrorDescription, v))
}

// ErrorDescriptionNEQ applies the NEQ predicate on the "error_description" field.
func ErrorDescriptionNEQ(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldErrorDescription, v))
}

// ErrorDescriptionIn applies the In predicate on the "error_description" field.
func ErrorDescriptionIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldErrorDescription, vs...))
}

// ErrorDescriptionNotIn applies the NotIn predicate on the "error_description" field.
func ErrorDescriptionNotIn(vs ...string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldErrorDescription, vs...))
}

// ErrorDescriptionGT applies the GT predicate on the "error_description" field.
func ErrorDescriptionGT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldErrorDescription, v))
}

// ErrorDescriptionGTE applies the GTE predicate on the "error_description" field.
func ErrorDescriptionGTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldErrorDescription, v))
}

// ErrorDescriptionLT applies the LT predicate on the "error_description" field.
func ErrorDescriptionLT(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldErrorDescription, v))
}

// ErrorDescriptionLTE applies the LTE predicate on the "error_description" field.
func ErrorDescriptionLTE(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldErrorDescription, v))
}

// ErrorDescriptionContains applies the Contains predicate on the "error_description" field.
func ErrorDescriptionContains(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContains(FieldErrorDescription, v))
}

// ErrorDescriptionHasPrefix applies the HasPrefix predicate on the "error_description" field.
func ErrorDescriptionHasPrefix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasPrefix(FieldErrorDescription, v))
}

// ErrorDescriptionHasSuffix applies the HasSuffix predicate on the "error_description" field.
func ErrorDescriptionHasSuffix(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldHasSuffix(FieldErrorDescription, v))
}

// ErrorDescriptionIsNil applies the IsNil predicate on the "error_description" field.
func ErrorDescriptionIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldErrorDescription))
}

// ErrorDescriptionNotNil applies the NotNil predicate on the "error_description" field.
func ErrorDescriptionNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldErrorDescription))
}

// ErrorDescriptionEqualFold applies the EqualFold predicate on the "error_description" field.
func ErrorDescriptionEqualFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEqualFold(FieldErrorDescription, v))
}

// ErrorDescriptionContainsFold applies the ContainsFold predicate on the "error_description" field.
func ErrorDescriptionContainsFold(v string) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldContainsFold(FieldErrorDescription, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldRetryCount, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// DepartmentIDGT applies the GT predicate on the "department_id" field.
func DepartmentIDGT(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGT(FieldDepartmentID, v))
}

// DepartmentIDGTE applies the GTE predicate on the "department_id" field.
func DepartmentIDGTE(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldGTE(FieldDepartmentID, v))
}

// DepartmentIDLT applies the LT predicate on the "department_id" field.
func DepartmentIDLT(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLT(FieldDepartmentID, v))
}

// DepartmentIDLTE applies the LTE predicate on the "department_id" field.
func DepartmentIDLTE(v uint64) predicate.OauthSession {
	return predicate.OauthSession(sql.FieldLTE(FieldDepartmentID, v))
}

// DepartmentIDIsNil applies the IsNil predicate on the "department_id" field.
func DepartmentIDIsNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldIsNull(FieldDepartmentID))
}

// DepartmentIDNotNil applies the NotNil predicate on the "department_id" field.
func DepartmentIDNotNil() predicate.OauthSession {
	return predicate.OauthSession(sql.FieldNotNull(FieldDepartmentID))
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.OauthSession {
	return predicate.OauthSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.OauthProvider) predicate.OauthSession {
	return predicate.OauthSession(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OauthSession {
	return predicate.OauthSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OauthSession {
	return predicate.OauthSession(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthSession) predicate.OauthSession {
	return predicate.OauthSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthSession) predicate.OauthSession {
	return predicate.OauthSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthSession) predicate.OauthSession {
	return predicate.OauthSession(sql.NotPredicates(p))
}
