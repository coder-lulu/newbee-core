// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/coder-lulu/newbee-core/rpc/ent/casbinrule"
)

// CasbinRule is the model entity for the CasbinRule schema.
type CasbinRule struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Tenant ID | 租户 ID
	TenantID uint64 `json:"tenant_id,omitempty"`
	// 策略类型: p(策略规则), g(角色继承), g2(资源继承)等
	Ptype string `json:"ptype,omitempty"`
	// 主体: 用户ID、角色代码等
	V0 string `json:"v0,omitempty"`
	// 资源: 资源路径、API端点等
	V1 string `json:"v1,omitempty"`
	// 操作: read, write, delete, create等
	V2 string `json:"v2,omitempty"`
	// 效果: allow, deny
	V3 string `json:"v3,omitempty"`
	// 条件表达式: JSON格式的复杂条件
	V4 string `json:"v4,omitempty"`
	// 优先级: 数值越大优先级越高
	V5 string `json:"v5,omitempty"`
	// 服务名称: core, cmdb, workflow等
	ServiceName string `json:"service_name,omitempty"`
	// 规则名称: 便于管理和识别
	RuleName string `json:"rule_name,omitempty"`
	// 规则描述: 详细说明规则用途
	Description string `json:"description,omitempty"`
	// 规则分类: system, business, custom等
	Category string `json:"category,omitempty"`
	// 规则版本: 支持规则版本管理
	Version string `json:"version,omitempty"`
	// 是否需要审批: 敏感权限需要审批
	RequireApproval bool `json:"require_approval,omitempty"`
	// 审批状态: 权限审批工作流状态
	ApprovalStatus casbinrule.ApprovalStatus `json:"approval_status,omitempty"`
	// 审批人ID: 审批该权限的用户
	ApprovedBy uint64 `json:"approved_by,omitempty"`
	// 审批时间: 权限审批的时间戳
	ApprovedAt time.Time `json:"approved_at,omitempty"`
	// 生效开始时间: 权限生效的开始时间
	EffectiveFrom time.Time `json:"effective_from,omitempty"`
	// 生效结束时间: 权限失效的时间
	EffectiveTo time.Time `json:"effective_to,omitempty"`
	// 是否为临时权限: 支持临时权限管理
	IsTemporary bool `json:"is_temporary,omitempty"`
	// 元数据: 扩展属性，JSON格式字符串
	Metadata string `json:"metadata,omitempty"`
	// 标签: 权限规则标签，JSON格式字符串
	Tags string `json:"tags,omitempty"`
	// 使用次数: 权限规则的使用统计
	UsageCount int64 `json:"usage_count,omitempty"`
	// 最后使用时间: 权限规则最后一次使用时间
	LastUsedAt   time.Time `json:"last_used_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CasbinRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case casbinrule.FieldRequireApproval, casbinrule.FieldIsTemporary:
			values[i] = new(sql.NullBool)
		case casbinrule.FieldID, casbinrule.FieldStatus, casbinrule.FieldTenantID, casbinrule.FieldApprovedBy, casbinrule.FieldUsageCount:
			values[i] = new(sql.NullInt64)
		case casbinrule.FieldPtype, casbinrule.FieldV0, casbinrule.FieldV1, casbinrule.FieldV2, casbinrule.FieldV3, casbinrule.FieldV4, casbinrule.FieldV5, casbinrule.FieldServiceName, casbinrule.FieldRuleName, casbinrule.FieldDescription, casbinrule.FieldCategory, casbinrule.FieldVersion, casbinrule.FieldApprovalStatus, casbinrule.FieldMetadata, casbinrule.FieldTags:
			values[i] = new(sql.NullString)
		case casbinrule.FieldCreatedAt, casbinrule.FieldUpdatedAt, casbinrule.FieldApprovedAt, casbinrule.FieldEffectiveFrom, casbinrule.FieldEffectiveTo, casbinrule.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CasbinRule fields.
func (_m *CasbinRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case casbinrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case casbinrule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case casbinrule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case casbinrule.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = uint8(value.Int64)
			}
		case casbinrule.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = uint64(value.Int64)
			}
		case casbinrule.FieldPtype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ptype", values[i])
			} else if value.Valid {
				_m.Ptype = value.String
			}
		case casbinrule.FieldV0:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v0", values[i])
			} else if value.Valid {
				_m.V0 = value.String
			}
		case casbinrule.FieldV1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v1", values[i])
			} else if value.Valid {
				_m.V1 = value.String
			}
		case casbinrule.FieldV2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v2", values[i])
			} else if value.Valid {
				_m.V2 = value.String
			}
		case casbinrule.FieldV3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v3", values[i])
			} else if value.Valid {
				_m.V3 = value.String
			}
		case casbinrule.FieldV4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v4", values[i])
			} else if value.Valid {
				_m.V4 = value.String
			}
		case casbinrule.FieldV5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v5", values[i])
			} else if value.Valid {
				_m.V5 = value.String
			}
		case casbinrule.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				_m.ServiceName = value.String
			}
		case casbinrule.FieldRuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_name", values[i])
			} else if value.Valid {
				_m.RuleName = value.String
			}
		case casbinrule.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case casbinrule.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case casbinrule.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.String
			}
		case casbinrule.FieldRequireApproval:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field require_approval", values[i])
			} else if value.Valid {
				_m.RequireApproval = value.Bool
			}
		case casbinrule.FieldApprovalStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approval_status", values[i])
			} else if value.Valid {
				_m.ApprovalStatus = casbinrule.ApprovalStatus(value.String)
			}
		case casbinrule.FieldApprovedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approved_by", values[i])
			} else if value.Valid {
				_m.ApprovedBy = uint64(value.Int64)
			}
		case casbinrule.FieldApprovedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approved_at", values[i])
			} else if value.Valid {
				_m.ApprovedAt = value.Time
			}
		case casbinrule.FieldEffectiveFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_from", values[i])
			} else if value.Valid {
				_m.EffectiveFrom = value.Time
			}
		case casbinrule.FieldEffectiveTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_to", values[i])
			} else if value.Valid {
				_m.EffectiveTo = value.Time
			}
		case casbinrule.FieldIsTemporary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_temporary", values[i])
			} else if value.Valid {
				_m.IsTemporary = value.Bool
			}
		case casbinrule.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				_m.Metadata = value.String
			}
		case casbinrule.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				_m.Tags = value.String
			}
		case casbinrule.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				_m.UsageCount = value.Int64
			}
		case casbinrule.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				_m.LastUsedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CasbinRule.
// This includes values selected through modifiers, order, etc.
func (_m *CasbinRule) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this CasbinRule.
// Note that you need to call CasbinRule.Unwrap() before calling this method if this CasbinRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CasbinRule) Update() *CasbinRuleUpdateOne {
	return NewCasbinRuleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CasbinRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CasbinRule) Unwrap() *CasbinRule {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: CasbinRule is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CasbinRule) String() string {
	var builder strings.Builder
	builder.WriteString("CasbinRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantID))
	builder.WriteString(", ")
	builder.WriteString("ptype=")
	builder.WriteString(_m.Ptype)
	builder.WriteString(", ")
	builder.WriteString("v0=")
	builder.WriteString(_m.V0)
	builder.WriteString(", ")
	builder.WriteString("v1=")
	builder.WriteString(_m.V1)
	builder.WriteString(", ")
	builder.WriteString("v2=")
	builder.WriteString(_m.V2)
	builder.WriteString(", ")
	builder.WriteString("v3=")
	builder.WriteString(_m.V3)
	builder.WriteString(", ")
	builder.WriteString("v4=")
	builder.WriteString(_m.V4)
	builder.WriteString(", ")
	builder.WriteString("v5=")
	builder.WriteString(_m.V5)
	builder.WriteString(", ")
	builder.WriteString("service_name=")
	builder.WriteString(_m.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("rule_name=")
	builder.WriteString(_m.RuleName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(_m.Version)
	builder.WriteString(", ")
	builder.WriteString("require_approval=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequireApproval))
	builder.WriteString(", ")
	builder.WriteString("approval_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApprovalStatus))
	builder.WriteString(", ")
	builder.WriteString("approved_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApprovedBy))
	builder.WriteString(", ")
	builder.WriteString("approved_at=")
	builder.WriteString(_m.ApprovedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("effective_from=")
	builder.WriteString(_m.EffectiveFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("effective_to=")
	builder.WriteString(_m.EffectiveTo.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_temporary=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsTemporary))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(_m.Metadata)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(_m.Tags)
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.UsageCount))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(_m.LastUsedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CasbinRules is a parsable slice of CasbinRule.
type CasbinRules []*CasbinRule
