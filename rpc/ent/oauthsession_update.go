// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthsession"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
	"github.com/coder-lulu/newbee-core/rpc/ent/user"
	uuid "github.com/gofrs/uuid/v5"
)

// OauthSessionUpdate is the builder for updating OauthSession entities.
type OauthSessionUpdate struct {
	config
	hooks     []Hook
	mutation  *OauthSessionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OauthSessionUpdate builder.
func (_u *OauthSessionUpdate) Where(ps ...predicate.OauthSession) *OauthSessionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OauthSessionUpdate) SetUpdatedAt(v time.Time) *OauthSessionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *OauthSessionUpdate) SetStatus(v uint8) *OauthSessionUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableStatus(v *uint8) *OauthSessionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *OauthSessionUpdate) AddStatus(v int8) *OauthSessionUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OauthSessionUpdate) ClearStatus() *OauthSessionUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSessionID sets the "session_id" field.
func (_u *OauthSessionUpdate) SetSessionID(v string) *OauthSessionUpdate {
	_u.mutation.SetSessionID(v)
	return _u
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableSessionID(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetSessionID(*v)
	}
	return _u
}

// SetState sets the "state" field.
func (_u *OauthSessionUpdate) SetState(v string) *OauthSessionUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableState(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthSessionUpdate) SetProviderID(v uint64) *OauthSessionUpdate {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableProviderID(v *uint64) *OauthSessionUpdate {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthSessionUpdate) SetUserID(v uuid.UUID) *OauthSessionUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableUserID(v *uuid.UUID) *OauthSessionUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *OauthSessionUpdate) ClearUserID() *OauthSessionUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetRedirectURI sets the "redirect_uri" field.
func (_u *OauthSessionUpdate) SetRedirectURI(v string) *OauthSessionUpdate {
	_u.mutation.SetRedirectURI(v)
	return _u
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableRedirectURI(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetRedirectURI(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthSessionUpdate) SetScope(v string) *OauthSessionUpdate {
	_u.mutation.SetScope(v)
	return _u
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableScope(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetScope(*v)
	}
	return _u
}

// ClearScope clears the value of the "scope" field.
func (_u *OauthSessionUpdate) ClearScope() *OauthSessionUpdate {
	_u.mutation.ClearScope()
	return _u
}

// SetCodeChallenge sets the "code_challenge" field.
func (_u *OauthSessionUpdate) SetCodeChallenge(v string) *OauthSessionUpdate {
	_u.mutation.SetCodeChallenge(v)
	return _u
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableCodeChallenge(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetCodeChallenge(*v)
	}
	return _u
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (_u *OauthSessionUpdate) ClearCodeChallenge() *OauthSessionUpdate {
	_u.mutation.ClearCodeChallenge()
	return _u
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (_u *OauthSessionUpdate) SetCodeChallengeMethod(v string) *OauthSessionUpdate {
	_u.mutation.SetCodeChallengeMethod(v)
	return _u
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableCodeChallengeMethod(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetCodeChallengeMethod(*v)
	}
	return _u
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (_u *OauthSessionUpdate) ClearCodeChallengeMethod() *OauthSessionUpdate {
	_u.mutation.ClearCodeChallengeMethod()
	return _u
}

// SetCodeVerifier sets the "code_verifier" field.
func (_u *OauthSessionUpdate) SetCodeVerifier(v string) *OauthSessionUpdate {
	_u.mutation.SetCodeVerifier(v)
	return _u
}

// SetNillableCodeVerifier sets the "code_verifier" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableCodeVerifier(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetCodeVerifier(*v)
	}
	return _u
}

// ClearCodeVerifier clears the value of the "code_verifier" field.
func (_u *OauthSessionUpdate) ClearCodeVerifier() *OauthSessionUpdate {
	_u.mutation.ClearCodeVerifier()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OauthSessionUpdate) SetExpiresAt(v time.Time) *OauthSessionUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableExpiresAt(v *time.Time) *OauthSessionUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetClientIP sets the "client_ip" field.
func (_u *OauthSessionUpdate) SetClientIP(v string) *OauthSessionUpdate {
	_u.mutation.SetClientIP(v)
	return _u
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableClientIP(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetClientIP(*v)
	}
	return _u
}

// ClearClientIP clears the value of the "client_ip" field.
func (_u *OauthSessionUpdate) ClearClientIP() *OauthSessionUpdate {
	_u.mutation.ClearClientIP()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *OauthSessionUpdate) SetUserAgent(v string) *OauthSessionUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableUserAgent(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *OauthSessionUpdate) ClearUserAgent() *OauthSessionUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetAuthorizationCode sets the "authorization_code" field.
func (_u *OauthSessionUpdate) SetAuthorizationCode(v string) *OauthSessionUpdate {
	_u.mutation.SetAuthorizationCode(v)
	return _u
}

// SetNillableAuthorizationCode sets the "authorization_code" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableAuthorizationCode(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetAuthorizationCode(*v)
	}
	return _u
}

// ClearAuthorizationCode clears the value of the "authorization_code" field.
func (_u *OauthSessionUpdate) ClearAuthorizationCode() *OauthSessionUpdate {
	_u.mutation.ClearAuthorizationCode()
	return _u
}

// SetCodeReceivedAt sets the "code_received_at" field.
func (_u *OauthSessionUpdate) SetCodeReceivedAt(v time.Time) *OauthSessionUpdate {
	_u.mutation.SetCodeReceivedAt(v)
	return _u
}

// SetNillableCodeReceivedAt sets the "code_received_at" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableCodeReceivedAt(v *time.Time) *OauthSessionUpdate {
	if v != nil {
		_u.SetCodeReceivedAt(*v)
	}
	return _u
}

// ClearCodeReceivedAt clears the value of the "code_received_at" field.
func (_u *OauthSessionUpdate) ClearCodeReceivedAt() *OauthSessionUpdate {
	_u.mutation.ClearCodeReceivedAt()
	return _u
}

// SetCallbackData sets the "callback_data" field.
func (_u *OauthSessionUpdate) SetCallbackData(v map[string]interface{}) *OauthSessionUpdate {
	_u.mutation.SetCallbackData(v)
	return _u
}

// ClearCallbackData clears the value of the "callback_data" field.
func (_u *OauthSessionUpdate) ClearCallbackData() *OauthSessionUpdate {
	_u.mutation.ClearCallbackData()
	return _u
}

// SetErrorCode sets the "error_code" field.
func (_u *OauthSessionUpdate) SetErrorCode(v string) *OauthSessionUpdate {
	_u.mutation.SetErrorCode(v)
	return _u
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableErrorCode(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetErrorCode(*v)
	}
	return _u
}

// ClearErrorCode clears the value of the "error_code" field.
func (_u *OauthSessionUpdate) ClearErrorCode() *OauthSessionUpdate {
	_u.mutation.ClearErrorCode()
	return _u
}

// SetErrorDescription sets the "error_description" field.
func (_u *OauthSessionUpdate) SetErrorDescription(v string) *OauthSessionUpdate {
	_u.mutation.SetErrorDescription(v)
	return _u
}

// SetNillableErrorDescription sets the "error_description" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableErrorDescription(v *string) *OauthSessionUpdate {
	if v != nil {
		_u.SetErrorDescription(*v)
	}
	return _u
}

// ClearErrorDescription clears the value of the "error_description" field.
func (_u *OauthSessionUpdate) ClearErrorDescription() *OauthSessionUpdate {
	_u.mutation.ClearErrorDescription()
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *OauthSessionUpdate) SetRetryCount(v int) *OauthSessionUpdate {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableRetryCount(v *int) *OauthSessionUpdate {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *OauthSessionUpdate) AddRetryCount(v int) *OauthSessionUpdate {
	_u.mutation.AddRetryCount(v)
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *OauthSessionUpdate) SetDepartmentID(v uint64) *OauthSessionUpdate {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *OauthSessionUpdate) SetNillableDepartmentID(v *uint64) *OauthSessionUpdate {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *OauthSessionUpdate) AddDepartmentID(v int64) *OauthSessionUpdate {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// ClearDepartmentID clears the value of the "department_id" field.
func (_u *OauthSessionUpdate) ClearDepartmentID() *OauthSessionUpdate {
	_u.mutation.ClearDepartmentID()
	return _u
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthSessionUpdate) SetProvider(v *OauthProvider) *OauthSessionUpdate {
	return _u.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthSessionUpdate) SetUser(v *User) *OauthSessionUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the OauthSessionMutation object of the builder.
func (_u *OauthSessionUpdate) Mutation() *OauthSessionMutation {
	return _u.mutation
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthSessionUpdate) ClearProvider() *OauthSessionUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthSessionUpdate) ClearUser() *OauthSessionUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OauthSessionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OauthSessionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthSessionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthSessionUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := oauthsession.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthSessionUpdate) check() error {
	if v, ok := _u.mutation.SessionID(); ok {
		if err := oauthsession.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "OauthSession.session_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := oauthsession.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "OauthSession.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURI(); ok {
		if err := oauthsession.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OauthSession.redirect_uri": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Scope(); ok {
		if err := oauthsession.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "OauthSession.scope": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallenge(); ok {
		if err := oauthsession.CodeChallengeValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_challenge": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallengeMethod(); ok {
		if err := oauthsession.CodeChallengeMethodValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge_method", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_challenge_method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeVerifier(); ok {
		if err := oauthsession.CodeVerifierValidator(v); err != nil {
			return &ValidationError{Name: "code_verifier", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_verifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientIP(); ok {
		if err := oauthsession.ClientIPValidator(v); err != nil {
			return &ValidationError{Name: "client_ip", err: fmt.Errorf(`ent: validator failed for field "OauthSession.client_ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserAgent(); ok {
		if err := oauthsession.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "OauthSession.user_agent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AuthorizationCode(); ok {
		if err := oauthsession.AuthorizationCodeValidator(v); err != nil {
			return &ValidationError{Name: "authorization_code", err: fmt.Errorf(`ent: validator failed for field "OauthSession.authorization_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ErrorCode(); ok {
		if err := oauthsession.ErrorCodeValidator(v); err != nil {
			return &ValidationError{Name: "error_code", err: fmt.Errorf(`ent: validator failed for field "OauthSession.error_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ErrorDescription(); ok {
		if err := oauthsession.ErrorDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "error_description", err: fmt.Errorf(`ent: validator failed for field "OauthSession.error_description": %w`, err)}
		}
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthSession.provider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OauthSessionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthSessionUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OauthSessionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthsession.Table, oauthsession.Columns, sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(oauthsession.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(oauthsession.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(oauthsession.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.SessionID(); ok {
		_spec.SetField(oauthsession.FieldSessionID, field.TypeString, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(oauthsession.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectURI(); ok {
		_spec.SetField(oauthsession.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthsession.FieldScope, field.TypeString, value)
	}
	if _u.mutation.ScopeCleared() {
		_spec.ClearField(oauthsession.FieldScope, field.TypeString)
	}
	if value, ok := _u.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthsession.FieldCodeChallenge, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeCleared() {
		_spec.ClearField(oauthsession.FieldCodeChallenge, field.TypeString)
	}
	if value, ok := _u.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthsession.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeMethodCleared() {
		_spec.ClearField(oauthsession.FieldCodeChallengeMethod, field.TypeString)
	}
	if value, ok := _u.mutation.CodeVerifier(); ok {
		_spec.SetField(oauthsession.FieldCodeVerifier, field.TypeString, value)
	}
	if _u.mutation.CodeVerifierCleared() {
		_spec.ClearField(oauthsession.FieldCodeVerifier, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthsession.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ClientIP(); ok {
		_spec.SetField(oauthsession.FieldClientIP, field.TypeString, value)
	}
	if _u.mutation.ClientIPCleared() {
		_spec.ClearField(oauthsession.FieldClientIP, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(oauthsession.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(oauthsession.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.AuthorizationCode(); ok {
		_spec.SetField(oauthsession.FieldAuthorizationCode, field.TypeString, value)
	}
	if _u.mutation.AuthorizationCodeCleared() {
		_spec.ClearField(oauthsession.FieldAuthorizationCode, field.TypeString)
	}
	if value, ok := _u.mutation.CodeReceivedAt(); ok {
		_spec.SetField(oauthsession.FieldCodeReceivedAt, field.TypeTime, value)
	}
	if _u.mutation.CodeReceivedAtCleared() {
		_spec.ClearField(oauthsession.FieldCodeReceivedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CallbackData(); ok {
		_spec.SetField(oauthsession.FieldCallbackData, field.TypeJSON, value)
	}
	if _u.mutation.CallbackDataCleared() {
		_spec.ClearField(oauthsession.FieldCallbackData, field.TypeJSON)
	}
	if value, ok := _u.mutation.ErrorCode(); ok {
		_spec.SetField(oauthsession.FieldErrorCode, field.TypeString, value)
	}
	if _u.mutation.ErrorCodeCleared() {
		_spec.ClearField(oauthsession.FieldErrorCode, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorDescription(); ok {
		_spec.SetField(oauthsession.FieldErrorDescription, field.TypeString, value)
	}
	if _u.mutation.ErrorDescriptionCleared() {
		_spec.ClearField(oauthsession.FieldErrorDescription, field.TypeString)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(oauthsession.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(oauthsession.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(oauthsession.FieldDepartmentID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(oauthsession.FieldDepartmentID, field.TypeUint64, value)
	}
	if _u.mutation.DepartmentIDCleared() {
		_spec.ClearField(oauthsession.FieldDepartmentID, field.TypeUint64)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.ProviderTable,
			Columns: []string{oauthsession.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.ProviderTable,
			Columns: []string{oauthsession.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.UserTable,
			Columns: []string{oauthsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.UserTable,
			Columns: []string{oauthsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OauthSessionUpdateOne is the builder for updating a single OauthSession entity.
type OauthSessionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OauthSessionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OauthSessionUpdateOne) SetUpdatedAt(v time.Time) *OauthSessionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *OauthSessionUpdateOne) SetStatus(v uint8) *OauthSessionUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableStatus(v *uint8) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *OauthSessionUpdateOne) AddStatus(v int8) *OauthSessionUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OauthSessionUpdateOne) ClearStatus() *OauthSessionUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSessionID sets the "session_id" field.
func (_u *OauthSessionUpdateOne) SetSessionID(v string) *OauthSessionUpdateOne {
	_u.mutation.SetSessionID(v)
	return _u
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableSessionID(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetSessionID(*v)
	}
	return _u
}

// SetState sets the "state" field.
func (_u *OauthSessionUpdateOne) SetState(v string) *OauthSessionUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableState(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *OauthSessionUpdateOne) SetProviderID(v uint64) *OauthSessionUpdateOne {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableProviderID(v *uint64) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *OauthSessionUpdateOne) SetUserID(v uuid.UUID) *OauthSessionUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableUserID(v *uuid.UUID) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *OauthSessionUpdateOne) ClearUserID() *OauthSessionUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetRedirectURI sets the "redirect_uri" field.
func (_u *OauthSessionUpdateOne) SetRedirectURI(v string) *OauthSessionUpdateOne {
	_u.mutation.SetRedirectURI(v)
	return _u
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableRedirectURI(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetRedirectURI(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *OauthSessionUpdateOne) SetScope(v string) *OauthSessionUpdateOne {
	_u.mutation.SetScope(v)
	return _u
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableScope(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetScope(*v)
	}
	return _u
}

// ClearScope clears the value of the "scope" field.
func (_u *OauthSessionUpdateOne) ClearScope() *OauthSessionUpdateOne {
	_u.mutation.ClearScope()
	return _u
}

// SetCodeChallenge sets the "code_challenge" field.
func (_u *OauthSessionUpdateOne) SetCodeChallenge(v string) *OauthSessionUpdateOne {
	_u.mutation.SetCodeChallenge(v)
	return _u
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableCodeChallenge(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetCodeChallenge(*v)
	}
	return _u
}

// ClearCodeChallenge clears the value of the "code_challenge" field.
func (_u *OauthSessionUpdateOne) ClearCodeChallenge() *OauthSessionUpdateOne {
	_u.mutation.ClearCodeChallenge()
	return _u
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (_u *OauthSessionUpdateOne) SetCodeChallengeMethod(v string) *OauthSessionUpdateOne {
	_u.mutation.SetCodeChallengeMethod(v)
	return _u
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableCodeChallengeMethod(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetCodeChallengeMethod(*v)
	}
	return _u
}

// ClearCodeChallengeMethod clears the value of the "code_challenge_method" field.
func (_u *OauthSessionUpdateOne) ClearCodeChallengeMethod() *OauthSessionUpdateOne {
	_u.mutation.ClearCodeChallengeMethod()
	return _u
}

// SetCodeVerifier sets the "code_verifier" field.
func (_u *OauthSessionUpdateOne) SetCodeVerifier(v string) *OauthSessionUpdateOne {
	_u.mutation.SetCodeVerifier(v)
	return _u
}

// SetNillableCodeVerifier sets the "code_verifier" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableCodeVerifier(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetCodeVerifier(*v)
	}
	return _u
}

// ClearCodeVerifier clears the value of the "code_verifier" field.
func (_u *OauthSessionUpdateOne) ClearCodeVerifier() *OauthSessionUpdateOne {
	_u.mutation.ClearCodeVerifier()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *OauthSessionUpdateOne) SetExpiresAt(v time.Time) *OauthSessionUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableExpiresAt(v *time.Time) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetClientIP sets the "client_ip" field.
func (_u *OauthSessionUpdateOne) SetClientIP(v string) *OauthSessionUpdateOne {
	_u.mutation.SetClientIP(v)
	return _u
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableClientIP(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetClientIP(*v)
	}
	return _u
}

// ClearClientIP clears the value of the "client_ip" field.
func (_u *OauthSessionUpdateOne) ClearClientIP() *OauthSessionUpdateOne {
	_u.mutation.ClearClientIP()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *OauthSessionUpdateOne) SetUserAgent(v string) *OauthSessionUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableUserAgent(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *OauthSessionUpdateOne) ClearUserAgent() *OauthSessionUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetAuthorizationCode sets the "authorization_code" field.
func (_u *OauthSessionUpdateOne) SetAuthorizationCode(v string) *OauthSessionUpdateOne {
	_u.mutation.SetAuthorizationCode(v)
	return _u
}

// SetNillableAuthorizationCode sets the "authorization_code" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableAuthorizationCode(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetAuthorizationCode(*v)
	}
	return _u
}

// ClearAuthorizationCode clears the value of the "authorization_code" field.
func (_u *OauthSessionUpdateOne) ClearAuthorizationCode() *OauthSessionUpdateOne {
	_u.mutation.ClearAuthorizationCode()
	return _u
}

// SetCodeReceivedAt sets the "code_received_at" field.
func (_u *OauthSessionUpdateOne) SetCodeReceivedAt(v time.Time) *OauthSessionUpdateOne {
	_u.mutation.SetCodeReceivedAt(v)
	return _u
}

// SetNillableCodeReceivedAt sets the "code_received_at" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableCodeReceivedAt(v *time.Time) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetCodeReceivedAt(*v)
	}
	return _u
}

// ClearCodeReceivedAt clears the value of the "code_received_at" field.
func (_u *OauthSessionUpdateOne) ClearCodeReceivedAt() *OauthSessionUpdateOne {
	_u.mutation.ClearCodeReceivedAt()
	return _u
}

// SetCallbackData sets the "callback_data" field.
func (_u *OauthSessionUpdateOne) SetCallbackData(v map[string]interface{}) *OauthSessionUpdateOne {
	_u.mutation.SetCallbackData(v)
	return _u
}

// ClearCallbackData clears the value of the "callback_data" field.
func (_u *OauthSessionUpdateOne) ClearCallbackData() *OauthSessionUpdateOne {
	_u.mutation.ClearCallbackData()
	return _u
}

// SetErrorCode sets the "error_code" field.
func (_u *OauthSessionUpdateOne) SetErrorCode(v string) *OauthSessionUpdateOne {
	_u.mutation.SetErrorCode(v)
	return _u
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableErrorCode(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetErrorCode(*v)
	}
	return _u
}

// ClearErrorCode clears the value of the "error_code" field.
func (_u *OauthSessionUpdateOne) ClearErrorCode() *OauthSessionUpdateOne {
	_u.mutation.ClearErrorCode()
	return _u
}

// SetErrorDescription sets the "error_description" field.
func (_u *OauthSessionUpdateOne) SetErrorDescription(v string) *OauthSessionUpdateOne {
	_u.mutation.SetErrorDescription(v)
	return _u
}

// SetNillableErrorDescription sets the "error_description" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableErrorDescription(v *string) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetErrorDescription(*v)
	}
	return _u
}

// ClearErrorDescription clears the value of the "error_description" field.
func (_u *OauthSessionUpdateOne) ClearErrorDescription() *OauthSessionUpdateOne {
	_u.mutation.ClearErrorDescription()
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *OauthSessionUpdateOne) SetRetryCount(v int) *OauthSessionUpdateOne {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableRetryCount(v *int) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *OauthSessionUpdateOne) AddRetryCount(v int) *OauthSessionUpdateOne {
	_u.mutation.AddRetryCount(v)
	return _u
}

// SetDepartmentID sets the "department_id" field.
func (_u *OauthSessionUpdateOne) SetDepartmentID(v uint64) *OauthSessionUpdateOne {
	_u.mutation.ResetDepartmentID()
	_u.mutation.SetDepartmentID(v)
	return _u
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (_u *OauthSessionUpdateOne) SetNillableDepartmentID(v *uint64) *OauthSessionUpdateOne {
	if v != nil {
		_u.SetDepartmentID(*v)
	}
	return _u
}

// AddDepartmentID adds value to the "department_id" field.
func (_u *OauthSessionUpdateOne) AddDepartmentID(v int64) *OauthSessionUpdateOne {
	_u.mutation.AddDepartmentID(v)
	return _u
}

// ClearDepartmentID clears the value of the "department_id" field.
func (_u *OauthSessionUpdateOne) ClearDepartmentID() *OauthSessionUpdateOne {
	_u.mutation.ClearDepartmentID()
	return _u
}

// SetProvider sets the "provider" edge to the OauthProvider entity.
func (_u *OauthSessionUpdateOne) SetProvider(v *OauthProvider) *OauthSessionUpdateOne {
	return _u.SetProviderID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *OauthSessionUpdateOne) SetUser(v *User) *OauthSessionUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the OauthSessionMutation object of the builder.
func (_u *OauthSessionUpdateOne) Mutation() *OauthSessionMutation {
	return _u.mutation
}

// ClearProvider clears the "provider" edge to the OauthProvider entity.
func (_u *OauthSessionUpdateOne) ClearProvider() *OauthSessionUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OauthSessionUpdateOne) ClearUser() *OauthSessionUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the OauthSessionUpdate builder.
func (_u *OauthSessionUpdateOne) Where(ps ...predicate.OauthSession) *OauthSessionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OauthSessionUpdateOne) Select(field string, fields ...string) *OauthSessionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OauthSession entity.
func (_u *OauthSessionUpdateOne) Save(ctx context.Context) (*OauthSession, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OauthSessionUpdateOne) SaveX(ctx context.Context) *OauthSession {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OauthSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OauthSessionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OauthSessionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := oauthsession.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OauthSessionUpdateOne) check() error {
	if v, ok := _u.mutation.SessionID(); ok {
		if err := oauthsession.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "OauthSession.session_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := oauthsession.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "OauthSession.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RedirectURI(); ok {
		if err := oauthsession.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OauthSession.redirect_uri": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Scope(); ok {
		if err := oauthsession.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "OauthSession.scope": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallenge(); ok {
		if err := oauthsession.CodeChallengeValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_challenge": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeChallengeMethod(); ok {
		if err := oauthsession.CodeChallengeMethodValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge_method", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_challenge_method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CodeVerifier(); ok {
		if err := oauthsession.CodeVerifierValidator(v); err != nil {
			return &ValidationError{Name: "code_verifier", err: fmt.Errorf(`ent: validator failed for field "OauthSession.code_verifier": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClientIP(); ok {
		if err := oauthsession.ClientIPValidator(v); err != nil {
			return &ValidationError{Name: "client_ip", err: fmt.Errorf(`ent: validator failed for field "OauthSession.client_ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UserAgent(); ok {
		if err := oauthsession.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "OauthSession.user_agent": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AuthorizationCode(); ok {
		if err := oauthsession.AuthorizationCodeValidator(v); err != nil {
			return &ValidationError{Name: "authorization_code", err: fmt.Errorf(`ent: validator failed for field "OauthSession.authorization_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ErrorCode(); ok {
		if err := oauthsession.ErrorCodeValidator(v); err != nil {
			return &ValidationError{Name: "error_code", err: fmt.Errorf(`ent: validator failed for field "OauthSession.error_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ErrorDescription(); ok {
		if err := oauthsession.ErrorDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "error_description", err: fmt.Errorf(`ent: validator failed for field "OauthSession.error_description": %w`, err)}
		}
	}
	if _u.mutation.ProviderCleared() && len(_u.mutation.ProviderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OauthSession.provider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OauthSessionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthSessionUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OauthSessionUpdateOne) sqlSave(ctx context.Context) (_node *OauthSession, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthsession.Table, oauthsession.Columns, sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthsession.FieldID)
		for _, f := range fields {
			if !oauthsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(oauthsession.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(oauthsession.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(oauthsession.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.SessionID(); ok {
		_spec.SetField(oauthsession.FieldSessionID, field.TypeString, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(oauthsession.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.RedirectURI(); ok {
		_spec.SetField(oauthsession.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(oauthsession.FieldScope, field.TypeString, value)
	}
	if _u.mutation.ScopeCleared() {
		_spec.ClearField(oauthsession.FieldScope, field.TypeString)
	}
	if value, ok := _u.mutation.CodeChallenge(); ok {
		_spec.SetField(oauthsession.FieldCodeChallenge, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeCleared() {
		_spec.ClearField(oauthsession.FieldCodeChallenge, field.TypeString)
	}
	if value, ok := _u.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(oauthsession.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if _u.mutation.CodeChallengeMethodCleared() {
		_spec.ClearField(oauthsession.FieldCodeChallengeMethod, field.TypeString)
	}
	if value, ok := _u.mutation.CodeVerifier(); ok {
		_spec.SetField(oauthsession.FieldCodeVerifier, field.TypeString, value)
	}
	if _u.mutation.CodeVerifierCleared() {
		_spec.ClearField(oauthsession.FieldCodeVerifier, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthsession.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ClientIP(); ok {
		_spec.SetField(oauthsession.FieldClientIP, field.TypeString, value)
	}
	if _u.mutation.ClientIPCleared() {
		_spec.ClearField(oauthsession.FieldClientIP, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(oauthsession.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(oauthsession.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.AuthorizationCode(); ok {
		_spec.SetField(oauthsession.FieldAuthorizationCode, field.TypeString, value)
	}
	if _u.mutation.AuthorizationCodeCleared() {
		_spec.ClearField(oauthsession.FieldAuthorizationCode, field.TypeString)
	}
	if value, ok := _u.mutation.CodeReceivedAt(); ok {
		_spec.SetField(oauthsession.FieldCodeReceivedAt, field.TypeTime, value)
	}
	if _u.mutation.CodeReceivedAtCleared() {
		_spec.ClearField(oauthsession.FieldCodeReceivedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CallbackData(); ok {
		_spec.SetField(oauthsession.FieldCallbackData, field.TypeJSON, value)
	}
	if _u.mutation.CallbackDataCleared() {
		_spec.ClearField(oauthsession.FieldCallbackData, field.TypeJSON)
	}
	if value, ok := _u.mutation.ErrorCode(); ok {
		_spec.SetField(oauthsession.FieldErrorCode, field.TypeString, value)
	}
	if _u.mutation.ErrorCodeCleared() {
		_spec.ClearField(oauthsession.FieldErrorCode, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorDescription(); ok {
		_spec.SetField(oauthsession.FieldErrorDescription, field.TypeString, value)
	}
	if _u.mutation.ErrorDescriptionCleared() {
		_spec.ClearField(oauthsession.FieldErrorDescription, field.TypeString)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(oauthsession.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(oauthsession.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DepartmentID(); ok {
		_spec.SetField(oauthsession.FieldDepartmentID, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedDepartmentID(); ok {
		_spec.AddField(oauthsession.FieldDepartmentID, field.TypeUint64, value)
	}
	if _u.mutation.DepartmentIDCleared() {
		_spec.ClearField(oauthsession.FieldDepartmentID, field.TypeUint64)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.ProviderTable,
			Columns: []string{oauthsession.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.ProviderTable,
			Columns: []string{oauthsession.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.UserTable,
			Columns: []string{oauthsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthsession.UserTable,
			Columns: []string{oauthsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &OauthSession{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
