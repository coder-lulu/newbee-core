// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthaccount"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthsession"
)

// OauthProviderCreate is the builder for creating a OauthProvider entity.
type OauthProviderCreate struct {
	config
	mutation *OauthProviderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *OauthProviderCreate) SetCreatedAt(v time.Time) *OauthProviderCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableCreatedAt(v *time.Time) *OauthProviderCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OauthProviderCreate) SetUpdatedAt(v time.Time) *OauthProviderCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableUpdatedAt(v *time.Time) *OauthProviderCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *OauthProviderCreate) SetStatus(v uint8) *OauthProviderCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableStatus(v *uint8) *OauthProviderCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *OauthProviderCreate) SetTenantID(v uint64) *OauthProviderCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableTenantID(v *uint64) *OauthProviderCreate {
	if v != nil {
		_c.SetTenantID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *OauthProviderCreate) SetName(v string) *OauthProviderCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDisplayName sets the "display_name" field.
func (_c *OauthProviderCreate) SetDisplayName(v string) *OauthProviderCreate {
	_c.mutation.SetDisplayName(v)
	return _c
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableDisplayName(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetDisplayName(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *OauthProviderCreate) SetType(v string) *OauthProviderCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetProviderType sets the "provider_type" field.
func (_c *OauthProviderCreate) SetProviderType(v string) *OauthProviderCreate {
	_c.mutation.SetProviderType(v)
	return _c
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableProviderType(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetProviderType(*v)
	}
	return _c
}

// SetClientID sets the "client_id" field.
func (_c *OauthProviderCreate) SetClientID(v string) *OauthProviderCreate {
	_c.mutation.SetClientID(v)
	return _c
}

// SetClientSecret sets the "client_secret" field.
func (_c *OauthProviderCreate) SetClientSecret(v string) *OauthProviderCreate {
	_c.mutation.SetClientSecret(v)
	return _c
}

// SetEncryptedSecret sets the "encrypted_secret" field.
func (_c *OauthProviderCreate) SetEncryptedSecret(v string) *OauthProviderCreate {
	_c.mutation.SetEncryptedSecret(v)
	return _c
}

// SetNillableEncryptedSecret sets the "encrypted_secret" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableEncryptedSecret(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetEncryptedSecret(*v)
	}
	return _c
}

// SetEncryptionKeyID sets the "encryption_key_id" field.
func (_c *OauthProviderCreate) SetEncryptionKeyID(v string) *OauthProviderCreate {
	_c.mutation.SetEncryptionKeyID(v)
	return _c
}

// SetNillableEncryptionKeyID sets the "encryption_key_id" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableEncryptionKeyID(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetEncryptionKeyID(*v)
	}
	return _c
}

// SetRedirectURL sets the "redirect_url" field.
func (_c *OauthProviderCreate) SetRedirectURL(v string) *OauthProviderCreate {
	_c.mutation.SetRedirectURL(v)
	return _c
}

// SetScopes sets the "scopes" field.
func (_c *OauthProviderCreate) SetScopes(v string) *OauthProviderCreate {
	_c.mutation.SetScopes(v)
	return _c
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableScopes(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetScopes(*v)
	}
	return _c
}

// SetAuthURL sets the "auth_url" field.
func (_c *OauthProviderCreate) SetAuthURL(v string) *OauthProviderCreate {
	_c.mutation.SetAuthURL(v)
	return _c
}

// SetTokenURL sets the "token_url" field.
func (_c *OauthProviderCreate) SetTokenURL(v string) *OauthProviderCreate {
	_c.mutation.SetTokenURL(v)
	return _c
}

// SetInfoURL sets the "info_url" field.
func (_c *OauthProviderCreate) SetInfoURL(v string) *OauthProviderCreate {
	_c.mutation.SetInfoURL(v)
	return _c
}

// SetAuthStyle sets the "auth_style" field.
func (_c *OauthProviderCreate) SetAuthStyle(v int) *OauthProviderCreate {
	_c.mutation.SetAuthStyle(v)
	return _c
}

// SetNillableAuthStyle sets the "auth_style" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableAuthStyle(v *int) *OauthProviderCreate {
	if v != nil {
		_c.SetAuthStyle(*v)
	}
	return _c
}

// SetExtraConfig sets the "extra_config" field.
func (_c *OauthProviderCreate) SetExtraConfig(v map[string]interface{}) *OauthProviderCreate {
	_c.mutation.SetExtraConfig(v)
	return _c
}

// SetEnabled sets the "enabled" field.
func (_c *OauthProviderCreate) SetEnabled(v bool) *OauthProviderCreate {
	_c.mutation.SetEnabled(v)
	return _c
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableEnabled(v *bool) *OauthProviderCreate {
	if v != nil {
		_c.SetEnabled(*v)
	}
	return _c
}

// SetSort sets the "sort" field.
func (_c *OauthProviderCreate) SetSort(v uint32) *OauthProviderCreate {
	_c.mutation.SetSort(v)
	return _c
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableSort(v *uint32) *OauthProviderCreate {
	if v != nil {
		_c.SetSort(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *OauthProviderCreate) SetRemark(v string) *OauthProviderCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableRemark(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetSupportPkce sets the "support_pkce" field.
func (_c *OauthProviderCreate) SetSupportPkce(v bool) *OauthProviderCreate {
	_c.mutation.SetSupportPkce(v)
	return _c
}

// SetNillableSupportPkce sets the "support_pkce" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableSupportPkce(v *bool) *OauthProviderCreate {
	if v != nil {
		_c.SetSupportPkce(*v)
	}
	return _c
}

// SetIconURL sets the "icon_url" field.
func (_c *OauthProviderCreate) SetIconURL(v string) *OauthProviderCreate {
	_c.mutation.SetIconURL(v)
	return _c
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableIconURL(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetIconURL(*v)
	}
	return _c
}

// SetCacheTTL sets the "cache_ttl" field.
func (_c *OauthProviderCreate) SetCacheTTL(v int) *OauthProviderCreate {
	_c.mutation.SetCacheTTL(v)
	return _c
}

// SetNillableCacheTTL sets the "cache_ttl" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableCacheTTL(v *int) *OauthProviderCreate {
	if v != nil {
		_c.SetCacheTTL(*v)
	}
	return _c
}

// SetWebhookURL sets the "webhook_url" field.
func (_c *OauthProviderCreate) SetWebhookURL(v string) *OauthProviderCreate {
	_c.mutation.SetWebhookURL(v)
	return _c
}

// SetNillableWebhookURL sets the "webhook_url" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableWebhookURL(v *string) *OauthProviderCreate {
	if v != nil {
		_c.SetWebhookURL(*v)
	}
	return _c
}

// SetSuccessCount sets the "success_count" field.
func (_c *OauthProviderCreate) SetSuccessCount(v int) *OauthProviderCreate {
	_c.mutation.SetSuccessCount(v)
	return _c
}

// SetNillableSuccessCount sets the "success_count" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableSuccessCount(v *int) *OauthProviderCreate {
	if v != nil {
		_c.SetSuccessCount(*v)
	}
	return _c
}

// SetFailureCount sets the "failure_count" field.
func (_c *OauthProviderCreate) SetFailureCount(v int) *OauthProviderCreate {
	_c.mutation.SetFailureCount(v)
	return _c
}

// SetNillableFailureCount sets the "failure_count" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableFailureCount(v *int) *OauthProviderCreate {
	if v != nil {
		_c.SetFailureCount(*v)
	}
	return _c
}

// SetLastUsedAt sets the "last_used_at" field.
func (_c *OauthProviderCreate) SetLastUsedAt(v time.Time) *OauthProviderCreate {
	_c.mutation.SetLastUsedAt(v)
	return _c
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_c *OauthProviderCreate) SetNillableLastUsedAt(v *time.Time) *OauthProviderCreate {
	if v != nil {
		_c.SetLastUsedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OauthProviderCreate) SetID(v uint64) *OauthProviderCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddOauthAccountIDs adds the "oauth_accounts" edge to the OauthAccount entity by IDs.
func (_c *OauthProviderCreate) AddOauthAccountIDs(ids ...uint64) *OauthProviderCreate {
	_c.mutation.AddOauthAccountIDs(ids...)
	return _c
}

// AddOauthAccounts adds the "oauth_accounts" edges to the OauthAccount entity.
func (_c *OauthProviderCreate) AddOauthAccounts(v ...*OauthAccount) *OauthProviderCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOauthAccountIDs(ids...)
}

// AddOauthSessionIDs adds the "oauth_sessions" edge to the OauthSession entity by IDs.
func (_c *OauthProviderCreate) AddOauthSessionIDs(ids ...uint64) *OauthProviderCreate {
	_c.mutation.AddOauthSessionIDs(ids...)
	return _c
}

// AddOauthSessions adds the "oauth_sessions" edges to the OauthSession entity.
func (_c *OauthProviderCreate) AddOauthSessions(v ...*OauthSession) *OauthProviderCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOauthSessionIDs(ids...)
}

// Mutation returns the OauthProviderMutation object of the builder.
func (_c *OauthProviderCreate) Mutation() *OauthProviderMutation {
	return _c.mutation
}

// Save creates the OauthProvider in the database.
func (_c *OauthProviderCreate) Save(ctx context.Context) (*OauthProvider, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OauthProviderCreate) SaveX(ctx context.Context) *OauthProvider {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthProviderCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthProviderCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OauthProviderCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := oauthprovider.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := oauthprovider.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := oauthprovider.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		v := oauthprovider.DefaultTenantID
		_c.mutation.SetTenantID(v)
	}
	if _, ok := _c.mutation.ProviderType(); !ok {
		v := oauthprovider.DefaultProviderType
		_c.mutation.SetProviderType(v)
	}
	if _, ok := _c.mutation.AuthStyle(); !ok {
		v := oauthprovider.DefaultAuthStyle
		_c.mutation.SetAuthStyle(v)
	}
	if _, ok := _c.mutation.Enabled(); !ok {
		v := oauthprovider.DefaultEnabled
		_c.mutation.SetEnabled(v)
	}
	if _, ok := _c.mutation.Sort(); !ok {
		v := oauthprovider.DefaultSort
		_c.mutation.SetSort(v)
	}
	if _, ok := _c.mutation.SupportPkce(); !ok {
		v := oauthprovider.DefaultSupportPkce
		_c.mutation.SetSupportPkce(v)
	}
	if _, ok := _c.mutation.CacheTTL(); !ok {
		v := oauthprovider.DefaultCacheTTL
		_c.mutation.SetCacheTTL(v)
	}
	if _, ok := _c.mutation.SuccessCount(); !ok {
		v := oauthprovider.DefaultSuccessCount
		_c.mutation.SetSuccessCount(v)
	}
	if _, ok := _c.mutation.FailureCount(); !ok {
		v := oauthprovider.DefaultFailureCount
		_c.mutation.SetFailureCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OauthProviderCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OauthProvider.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OauthProvider.updated_at"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OauthProvider.tenant_id"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OauthProvider.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.DisplayName(); ok {
		if err := oauthprovider.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.display_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "OauthProvider.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := oauthprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "OauthProvider.provider_type"`)}
	}
	if v, ok := _c.mutation.ProviderType(); ok {
		if err := oauthprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.provider_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OauthProvider.client_id"`)}
	}
	if v, ok := _c.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "OauthProvider.client_secret"`)}
	}
	if v, ok := _c.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.client_secret": %w`, err)}
		}
	}
	if v, ok := _c.mutation.EncryptedSecret(); ok {
		if err := oauthprovider.EncryptedSecretValidator(v); err != nil {
			return &ValidationError{Name: "encrypted_secret", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.encrypted_secret": %w`, err)}
		}
	}
	if v, ok := _c.mutation.EncryptionKeyID(); ok {
		if err := oauthprovider.EncryptionKeyIDValidator(v); err != nil {
			return &ValidationError{Name: "encryption_key_id", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.encryption_key_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.RedirectURL(); !ok {
		return &ValidationError{Name: "redirect_url", err: errors.New(`ent: missing required field "OauthProvider.redirect_url"`)}
	}
	if v, ok := _c.mutation.RedirectURL(); ok {
		if err := oauthprovider.RedirectURLValidator(v); err != nil {
			return &ValidationError{Name: "redirect_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.redirect_url": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Scopes(); ok {
		if err := oauthprovider.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.scopes": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AuthURL(); !ok {
		return &ValidationError{Name: "auth_url", err: errors.New(`ent: missing required field "OauthProvider.auth_url"`)}
	}
	if v, ok := _c.mutation.AuthURL(); ok {
		if err := oauthprovider.AuthURLValidator(v); err != nil {
			return &ValidationError{Name: "auth_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.auth_url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TokenURL(); !ok {
		return &ValidationError{Name: "token_url", err: errors.New(`ent: missing required field "OauthProvider.token_url"`)}
	}
	if v, ok := _c.mutation.TokenURL(); ok {
		if err := oauthprovider.TokenURLValidator(v); err != nil {
			return &ValidationError{Name: "token_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.token_url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.InfoURL(); !ok {
		return &ValidationError{Name: "info_url", err: errors.New(`ent: missing required field "OauthProvider.info_url"`)}
	}
	if v, ok := _c.mutation.InfoURL(); ok {
		if err := oauthprovider.InfoURLValidator(v); err != nil {
			return &ValidationError{Name: "info_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.info_url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AuthStyle(); !ok {
		return &ValidationError{Name: "auth_style", err: errors.New(`ent: missing required field "OauthProvider.auth_style"`)}
	}
	if _, ok := _c.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "OauthProvider.enabled"`)}
	}
	if _, ok := _c.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "OauthProvider.sort"`)}
	}
	if v, ok := _c.mutation.Remark(); ok {
		if err := oauthprovider.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.remark": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SupportPkce(); !ok {
		return &ValidationError{Name: "support_pkce", err: errors.New(`ent: missing required field "OauthProvider.support_pkce"`)}
	}
	if v, ok := _c.mutation.IconURL(); ok {
		if err := oauthprovider.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.icon_url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CacheTTL(); !ok {
		return &ValidationError{Name: "cache_ttl", err: errors.New(`ent: missing required field "OauthProvider.cache_ttl"`)}
	}
	if v, ok := _c.mutation.WebhookURL(); ok {
		if err := oauthprovider.WebhookURLValidator(v); err != nil {
			return &ValidationError{Name: "webhook_url", err: fmt.Errorf(`ent: validator failed for field "OauthProvider.webhook_url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SuccessCount(); !ok {
		return &ValidationError{Name: "success_count", err: errors.New(`ent: missing required field "OauthProvider.success_count"`)}
	}
	if _, ok := _c.mutation.FailureCount(); !ok {
		return &ValidationError{Name: "failure_count", err: errors.New(`ent: missing required field "OauthProvider.failure_count"`)}
	}
	return nil
}

func (_c *OauthProviderCreate) sqlSave(ctx context.Context) (*OauthProvider, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OauthProviderCreate) createSpec() (*OauthProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthProvider{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(oauthprovider.Table, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(oauthprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(oauthprovider.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(oauthprovider.FieldTenantID, field.TypeUint64, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.DisplayName(); ok {
		_spec.SetField(oauthprovider.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(oauthprovider.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.ProviderType(); ok {
		_spec.SetField(oauthprovider.FieldProviderType, field.TypeString, value)
		_node.ProviderType = value
	}
	if value, ok := _c.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := _c.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := _c.mutation.EncryptedSecret(); ok {
		_spec.SetField(oauthprovider.FieldEncryptedSecret, field.TypeString, value)
		_node.EncryptedSecret = value
	}
	if value, ok := _c.mutation.EncryptionKeyID(); ok {
		_spec.SetField(oauthprovider.FieldEncryptionKeyID, field.TypeString, value)
		_node.EncryptionKeyID = value
	}
	if value, ok := _c.mutation.RedirectURL(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURL, field.TypeString, value)
		_node.RedirectURL = value
	}
	if value, ok := _c.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeString, value)
		_node.Scopes = value
	}
	if value, ok := _c.mutation.AuthURL(); ok {
		_spec.SetField(oauthprovider.FieldAuthURL, field.TypeString, value)
		_node.AuthURL = value
	}
	if value, ok := _c.mutation.TokenURL(); ok {
		_spec.SetField(oauthprovider.FieldTokenURL, field.TypeString, value)
		_node.TokenURL = value
	}
	if value, ok := _c.mutation.InfoURL(); ok {
		_spec.SetField(oauthprovider.FieldInfoURL, field.TypeString, value)
		_node.InfoURL = value
	}
	if value, ok := _c.mutation.AuthStyle(); ok {
		_spec.SetField(oauthprovider.FieldAuthStyle, field.TypeInt, value)
		_node.AuthStyle = value
	}
	if value, ok := _c.mutation.ExtraConfig(); ok {
		_spec.SetField(oauthprovider.FieldExtraConfig, field.TypeJSON, value)
		_node.ExtraConfig = value
	}
	if value, ok := _c.mutation.Enabled(); ok {
		_spec.SetField(oauthprovider.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := _c.mutation.Sort(); ok {
		_spec.SetField(oauthprovider.FieldSort, field.TypeUint32, value)
		_node.Sort = value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(oauthprovider.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := _c.mutation.SupportPkce(); ok {
		_spec.SetField(oauthprovider.FieldSupportPkce, field.TypeBool, value)
		_node.SupportPkce = value
	}
	if value, ok := _c.mutation.IconURL(); ok {
		_spec.SetField(oauthprovider.FieldIconURL, field.TypeString, value)
		_node.IconURL = value
	}
	if value, ok := _c.mutation.CacheTTL(); ok {
		_spec.SetField(oauthprovider.FieldCacheTTL, field.TypeInt, value)
		_node.CacheTTL = value
	}
	if value, ok := _c.mutation.WebhookURL(); ok {
		_spec.SetField(oauthprovider.FieldWebhookURL, field.TypeString, value)
		_node.WebhookURL = value
	}
	if value, ok := _c.mutation.SuccessCount(); ok {
		_spec.SetField(oauthprovider.FieldSuccessCount, field.TypeInt, value)
		_node.SuccessCount = value
	}
	if value, ok := _c.mutation.FailureCount(); ok {
		_spec.SetField(oauthprovider.FieldFailureCount, field.TypeInt, value)
		_node.FailureCount = value
	}
	if value, ok := _c.mutation.LastUsedAt(); ok {
		_spec.SetField(oauthprovider.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if nodes := _c.mutation.OauthAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthAccountsTable,
			Columns: []string{oauthprovider.OauthAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OauthSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthprovider.OauthSessionsTable,
			Columns: []string{oauthprovider.OauthSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthProviderCreateBulk is the builder for creating many OauthProvider entities in bulk.
type OauthProviderCreateBulk struct {
	config
	err      error
	builders []*OauthProviderCreate
}

// Save creates the OauthProvider entities in the database.
func (_c *OauthProviderCreateBulk) Save(ctx context.Context) ([]*OauthProvider, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OauthProvider, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OauthProviderCreateBulk) SaveX(ctx context.Context) []*OauthProvider {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OauthProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OauthProviderCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
