// Code generated by ent, DO NOT EDIT.

package oauthprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldStatus, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldDisplayName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldType, v))
}

// ProviderType applies equality check predicate on the "provider_type" field. It's identical to ProviderTypeEQ.
func ProviderType(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldProviderType, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientSecret, v))
}

// EncryptedSecret applies equality check predicate on the "encrypted_secret" field. It's identical to EncryptedSecretEQ.
func EncryptedSecret(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldEncryptedSecret, v))
}

// EncryptionKeyID applies equality check predicate on the "encryption_key_id" field. It's identical to EncryptionKeyIDEQ.
func EncryptionKeyID(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldEncryptionKeyID, v))
}

// RedirectURL applies equality check predicate on the "redirect_url" field. It's identical to RedirectURLEQ.
func RedirectURL(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRedirectURL, v))
}

// Scopes applies equality check predicate on the "scopes" field. It's identical to ScopesEQ.
func Scopes(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldScopes, v))
}

// AuthURL applies equality check predicate on the "auth_url" field. It's identical to AuthURLEQ.
func AuthURL(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAuthURL, v))
}

// TokenURL applies equality check predicate on the "token_url" field. It's identical to TokenURLEQ.
func TokenURL(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldTokenURL, v))
}

// InfoURL applies equality check predicate on the "info_url" field. It's identical to InfoURLEQ.
func InfoURL(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldInfoURL, v))
}

// AuthStyle applies equality check predicate on the "auth_style" field. It's identical to AuthStyleEQ.
func AuthStyle(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAuthStyle, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldEnabled, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldSort, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRemark, v))
}

// SupportPkce applies equality check predicate on the "support_pkce" field. It's identical to SupportPkceEQ.
func SupportPkce(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldSupportPkce, v))
}

// IconURL applies equality check predicate on the "icon_url" field. It's identical to IconURLEQ.
func IconURL(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldIconURL, v))
}

// CacheTTL applies equality check predicate on the "cache_ttl" field. It's identical to CacheTTLEQ.
func CacheTTL(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCacheTTL, v))
}

// WebhookURL applies equality check predicate on the "webhook_url" field. It's identical to WebhookURLEQ.
func WebhookURL(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldWebhookURL, v))
}

// SuccessCount applies equality check predicate on the "success_count" field. It's identical to SuccessCountEQ.
func SuccessCount(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldSuccessCount, v))
}

// FailureCount applies equality check predicate on the "failure_count" field. It's identical to FailureCountEQ.
func FailureCount(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldFailureCount, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldLastUsedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldStatus))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uint64) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldTenantID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldDisplayName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldType, v))
}

// ProviderTypeEQ applies the EQ predicate on the "provider_type" field.
func ProviderTypeEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldProviderType, v))
}

// ProviderTypeNEQ applies the NEQ predicate on the "provider_type" field.
func ProviderTypeNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldProviderType, v))
}

// ProviderTypeIn applies the In predicate on the "provider_type" field.
func ProviderTypeIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldProviderType, vs...))
}

// ProviderTypeNotIn applies the NotIn predicate on the "provider_type" field.
func ProviderTypeNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldProviderType, vs...))
}

// ProviderTypeGT applies the GT predicate on the "provider_type" field.
func ProviderTypeGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldProviderType, v))
}

// ProviderTypeGTE applies the GTE predicate on the "provider_type" field.
func ProviderTypeGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldProviderType, v))
}

// ProviderTypeLT applies the LT predicate on the "provider_type" field.
func ProviderTypeLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldProviderType, v))
}

// ProviderTypeLTE applies the LTE predicate on the "provider_type" field.
func ProviderTypeLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldProviderType, v))
}

// ProviderTypeContains applies the Contains predicate on the "provider_type" field.
func ProviderTypeContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldProviderType, v))
}

// ProviderTypeHasPrefix applies the HasPrefix predicate on the "provider_type" field.
func ProviderTypeHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldProviderType, v))
}

// ProviderTypeHasSuffix applies the HasSuffix predicate on the "provider_type" field.
func ProviderTypeHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldProviderType, v))
}

// ProviderTypeEqualFold applies the EqualFold predicate on the "provider_type" field.
func ProviderTypeEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldProviderType, v))
}

// ProviderTypeContainsFold applies the ContainsFold predicate on the "provider_type" field.
func ProviderTypeContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldProviderType, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldClientSecret, v))
}

// EncryptedSecretEQ applies the EQ predicate on the "encrypted_secret" field.
func EncryptedSecretEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldEncryptedSecret, v))
}

// EncryptedSecretNEQ applies the NEQ predicate on the "encrypted_secret" field.
func EncryptedSecretNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldEncryptedSecret, v))
}

// EncryptedSecretIn applies the In predicate on the "encrypted_secret" field.
func EncryptedSecretIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldEncryptedSecret, vs...))
}

// EncryptedSecretNotIn applies the NotIn predicate on the "encrypted_secret" field.
func EncryptedSecretNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldEncryptedSecret, vs...))
}

// EncryptedSecretGT applies the GT predicate on the "encrypted_secret" field.
func EncryptedSecretGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldEncryptedSecret, v))
}

// EncryptedSecretGTE applies the GTE predicate on the "encrypted_secret" field.
func EncryptedSecretGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldEncryptedSecret, v))
}

// EncryptedSecretLT applies the LT predicate on the "encrypted_secret" field.
func EncryptedSecretLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldEncryptedSecret, v))
}

// EncryptedSecretLTE applies the LTE predicate on the "encrypted_secret" field.
func EncryptedSecretLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldEncryptedSecret, v))
}

// EncryptedSecretContains applies the Contains predicate on the "encrypted_secret" field.
func EncryptedSecretContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldEncryptedSecret, v))
}

// EncryptedSecretHasPrefix applies the HasPrefix predicate on the "encrypted_secret" field.
func EncryptedSecretHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldEncryptedSecret, v))
}

// EncryptedSecretHasSuffix applies the HasSuffix predicate on the "encrypted_secret" field.
func EncryptedSecretHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldEncryptedSecret, v))
}

// EncryptedSecretIsNil applies the IsNil predicate on the "encrypted_secret" field.
func EncryptedSecretIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldEncryptedSecret))
}

// EncryptedSecretNotNil applies the NotNil predicate on the "encrypted_secret" field.
func EncryptedSecretNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldEncryptedSecret))
}

// EncryptedSecretEqualFold applies the EqualFold predicate on the "encrypted_secret" field.
func EncryptedSecretEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldEncryptedSecret, v))
}

// EncryptedSecretContainsFold applies the ContainsFold predicate on the "encrypted_secret" field.
func EncryptedSecretContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldEncryptedSecret, v))
}

// EncryptionKeyIDEQ applies the EQ predicate on the "encryption_key_id" field.
func EncryptionKeyIDEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDNEQ applies the NEQ predicate on the "encryption_key_id" field.
func EncryptionKeyIDNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDIn applies the In predicate on the "encryption_key_id" field.
func EncryptionKeyIDIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldEncryptionKeyID, vs...))
}

// EncryptionKeyIDNotIn applies the NotIn predicate on the "encryption_key_id" field.
func EncryptionKeyIDNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldEncryptionKeyID, vs...))
}

// EncryptionKeyIDGT applies the GT predicate on the "encryption_key_id" field.
func EncryptionKeyIDGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDGTE applies the GTE predicate on the "encryption_key_id" field.
func EncryptionKeyIDGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDLT applies the LT predicate on the "encryption_key_id" field.
func EncryptionKeyIDLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDLTE applies the LTE predicate on the "encryption_key_id" field.
func EncryptionKeyIDLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDContains applies the Contains predicate on the "encryption_key_id" field.
func EncryptionKeyIDContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDHasPrefix applies the HasPrefix predicate on the "encryption_key_id" field.
func EncryptionKeyIDHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDHasSuffix applies the HasSuffix predicate on the "encryption_key_id" field.
func EncryptionKeyIDHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDIsNil applies the IsNil predicate on the "encryption_key_id" field.
func EncryptionKeyIDIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldEncryptionKeyID))
}

// EncryptionKeyIDNotNil applies the NotNil predicate on the "encryption_key_id" field.
func EncryptionKeyIDNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldEncryptionKeyID))
}

// EncryptionKeyIDEqualFold applies the EqualFold predicate on the "encryption_key_id" field.
func EncryptionKeyIDEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldEncryptionKeyID, v))
}

// EncryptionKeyIDContainsFold applies the ContainsFold predicate on the "encryption_key_id" field.
func EncryptionKeyIDContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldEncryptionKeyID, v))
}

// RedirectURLEQ applies the EQ predicate on the "redirect_url" field.
func RedirectURLEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRedirectURL, v))
}

// RedirectURLNEQ applies the NEQ predicate on the "redirect_url" field.
func RedirectURLNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldRedirectURL, v))
}

// RedirectURLIn applies the In predicate on the "redirect_url" field.
func RedirectURLIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldRedirectURL, vs...))
}

// RedirectURLNotIn applies the NotIn predicate on the "redirect_url" field.
func RedirectURLNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldRedirectURL, vs...))
}

// RedirectURLGT applies the GT predicate on the "redirect_url" field.
func RedirectURLGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldRedirectURL, v))
}

// RedirectURLGTE applies the GTE predicate on the "redirect_url" field.
func RedirectURLGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldRedirectURL, v))
}

// RedirectURLLT applies the LT predicate on the "redirect_url" field.
func RedirectURLLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldRedirectURL, v))
}

// RedirectURLLTE applies the LTE predicate on the "redirect_url" field.
func RedirectURLLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldRedirectURL, v))
}

// RedirectURLContains applies the Contains predicate on the "redirect_url" field.
func RedirectURLContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldRedirectURL, v))
}

// RedirectURLHasPrefix applies the HasPrefix predicate on the "redirect_url" field.
func RedirectURLHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldRedirectURL, v))
}

// RedirectURLHasSuffix applies the HasSuffix predicate on the "redirect_url" field.
func RedirectURLHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldRedirectURL, v))
}

// RedirectURLEqualFold applies the EqualFold predicate on the "redirect_url" field.
func RedirectURLEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldRedirectURL, v))
}

// RedirectURLContainsFold applies the ContainsFold predicate on the "redirect_url" field.
func RedirectURLContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldRedirectURL, v))
}

// ScopesEQ applies the EQ predicate on the "scopes" field.
func ScopesEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldScopes, v))
}

// ScopesNEQ applies the NEQ predicate on the "scopes" field.
func ScopesNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldScopes, v))
}

// ScopesIn applies the In predicate on the "scopes" field.
func ScopesIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldScopes, vs...))
}

// ScopesNotIn applies the NotIn predicate on the "scopes" field.
func ScopesNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldScopes, vs...))
}

// ScopesGT applies the GT predicate on the "scopes" field.
func ScopesGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldScopes, v))
}

// ScopesGTE applies the GTE predicate on the "scopes" field.
func ScopesGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldScopes, v))
}

// ScopesLT applies the LT predicate on the "scopes" field.
func ScopesLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldScopes, v))
}

// ScopesLTE applies the LTE predicate on the "scopes" field.
func ScopesLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldScopes, v))
}

// ScopesContains applies the Contains predicate on the "scopes" field.
func ScopesContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldScopes, v))
}

// ScopesHasPrefix applies the HasPrefix predicate on the "scopes" field.
func ScopesHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldScopes, v))
}

// ScopesHasSuffix applies the HasSuffix predicate on the "scopes" field.
func ScopesHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldScopes, v))
}

// ScopesIsNil applies the IsNil predicate on the "scopes" field.
func ScopesIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldScopes))
}

// ScopesNotNil applies the NotNil predicate on the "scopes" field.
func ScopesNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldScopes))
}

// ScopesEqualFold applies the EqualFold predicate on the "scopes" field.
func ScopesEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldScopes, v))
}

// ScopesContainsFold applies the ContainsFold predicate on the "scopes" field.
func ScopesContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldScopes, v))
}

// AuthURLEQ applies the EQ predicate on the "auth_url" field.
func AuthURLEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAuthURL, v))
}

// AuthURLNEQ applies the NEQ predicate on the "auth_url" field.
func AuthURLNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldAuthURL, v))
}

// AuthURLIn applies the In predicate on the "auth_url" field.
func AuthURLIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldAuthURL, vs...))
}

// AuthURLNotIn applies the NotIn predicate on the "auth_url" field.
func AuthURLNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldAuthURL, vs...))
}

// AuthURLGT applies the GT predicate on the "auth_url" field.
func AuthURLGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldAuthURL, v))
}

// AuthURLGTE applies the GTE predicate on the "auth_url" field.
func AuthURLGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldAuthURL, v))
}

// AuthURLLT applies the LT predicate on the "auth_url" field.
func AuthURLLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldAuthURL, v))
}

// AuthURLLTE applies the LTE predicate on the "auth_url" field.
func AuthURLLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldAuthURL, v))
}

// AuthURLContains applies the Contains predicate on the "auth_url" field.
func AuthURLContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldAuthURL, v))
}

// AuthURLHasPrefix applies the HasPrefix predicate on the "auth_url" field.
func AuthURLHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldAuthURL, v))
}

// AuthURLHasSuffix applies the HasSuffix predicate on the "auth_url" field.
func AuthURLHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldAuthURL, v))
}

// AuthURLEqualFold applies the EqualFold predicate on the "auth_url" field.
func AuthURLEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldAuthURL, v))
}

// AuthURLContainsFold applies the ContainsFold predicate on the "auth_url" field.
func AuthURLContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldAuthURL, v))
}

// TokenURLEQ applies the EQ predicate on the "token_url" field.
func TokenURLEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldTokenURL, v))
}

// TokenURLNEQ applies the NEQ predicate on the "token_url" field.
func TokenURLNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldTokenURL, v))
}

// TokenURLIn applies the In predicate on the "token_url" field.
func TokenURLIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldTokenURL, vs...))
}

// TokenURLNotIn applies the NotIn predicate on the "token_url" field.
func TokenURLNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldTokenURL, vs...))
}

// TokenURLGT applies the GT predicate on the "token_url" field.
func TokenURLGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldTokenURL, v))
}

// TokenURLGTE applies the GTE predicate on the "token_url" field.
func TokenURLGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldTokenURL, v))
}

// TokenURLLT applies the LT predicate on the "token_url" field.
func TokenURLLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldTokenURL, v))
}

// TokenURLLTE applies the LTE predicate on the "token_url" field.
func TokenURLLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldTokenURL, v))
}

// TokenURLContains applies the Contains predicate on the "token_url" field.
func TokenURLContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldTokenURL, v))
}

// TokenURLHasPrefix applies the HasPrefix predicate on the "token_url" field.
func TokenURLHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldTokenURL, v))
}

// TokenURLHasSuffix applies the HasSuffix predicate on the "token_url" field.
func TokenURLHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldTokenURL, v))
}

// TokenURLEqualFold applies the EqualFold predicate on the "token_url" field.
func TokenURLEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldTokenURL, v))
}

// TokenURLContainsFold applies the ContainsFold predicate on the "token_url" field.
func TokenURLContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldTokenURL, v))
}

// InfoURLEQ applies the EQ predicate on the "info_url" field.
func InfoURLEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldInfoURL, v))
}

// InfoURLNEQ applies the NEQ predicate on the "info_url" field.
func InfoURLNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldInfoURL, v))
}

// InfoURLIn applies the In predicate on the "info_url" field.
func InfoURLIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldInfoURL, vs...))
}

// InfoURLNotIn applies the NotIn predicate on the "info_url" field.
func InfoURLNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldInfoURL, vs...))
}

// InfoURLGT applies the GT predicate on the "info_url" field.
func InfoURLGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldInfoURL, v))
}

// InfoURLGTE applies the GTE predicate on the "info_url" field.
func InfoURLGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldInfoURL, v))
}

// InfoURLLT applies the LT predicate on the "info_url" field.
func InfoURLLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldInfoURL, v))
}

// InfoURLLTE applies the LTE predicate on the "info_url" field.
func InfoURLLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldInfoURL, v))
}

// InfoURLContains applies the Contains predicate on the "info_url" field.
func InfoURLContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldInfoURL, v))
}

// InfoURLHasPrefix applies the HasPrefix predicate on the "info_url" field.
func InfoURLHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldInfoURL, v))
}

// InfoURLHasSuffix applies the HasSuffix predicate on the "info_url" field.
func InfoURLHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldInfoURL, v))
}

// InfoURLEqualFold applies the EqualFold predicate on the "info_url" field.
func InfoURLEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldInfoURL, v))
}

// InfoURLContainsFold applies the ContainsFold predicate on the "info_url" field.
func InfoURLContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldInfoURL, v))
}

// AuthStyleEQ applies the EQ predicate on the "auth_style" field.
func AuthStyleEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldAuthStyle, v))
}

// AuthStyleNEQ applies the NEQ predicate on the "auth_style" field.
func AuthStyleNEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldAuthStyle, v))
}

// AuthStyleIn applies the In predicate on the "auth_style" field.
func AuthStyleIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldAuthStyle, vs...))
}

// AuthStyleNotIn applies the NotIn predicate on the "auth_style" field.
func AuthStyleNotIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldAuthStyle, vs...))
}

// AuthStyleGT applies the GT predicate on the "auth_style" field.
func AuthStyleGT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldAuthStyle, v))
}

// AuthStyleGTE applies the GTE predicate on the "auth_style" field.
func AuthStyleGTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldAuthStyle, v))
}

// AuthStyleLT applies the LT predicate on the "auth_style" field.
func AuthStyleLT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldAuthStyle, v))
}

// AuthStyleLTE applies the LTE predicate on the "auth_style" field.
func AuthStyleLTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldAuthStyle, v))
}

// ExtraConfigIsNil applies the IsNil predicate on the "extra_config" field.
func ExtraConfigIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldExtraConfig))
}

// ExtraConfigNotNil applies the NotNil predicate on the "extra_config" field.
func ExtraConfigNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldExtraConfig))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldEnabled, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v uint32) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldSort, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldRemark, v))
}

// SupportPkceEQ applies the EQ predicate on the "support_pkce" field.
func SupportPkceEQ(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldSupportPkce, v))
}

// SupportPkceNEQ applies the NEQ predicate on the "support_pkce" field.
func SupportPkceNEQ(v bool) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldSupportPkce, v))
}

// IconURLEQ applies the EQ predicate on the "icon_url" field.
func IconURLEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldIconURL, v))
}

// IconURLNEQ applies the NEQ predicate on the "icon_url" field.
func IconURLNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldIconURL, v))
}

// IconURLIn applies the In predicate on the "icon_url" field.
func IconURLIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldIconURL, vs...))
}

// IconURLNotIn applies the NotIn predicate on the "icon_url" field.
func IconURLNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldIconURL, vs...))
}

// IconURLGT applies the GT predicate on the "icon_url" field.
func IconURLGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldIconURL, v))
}

// IconURLGTE applies the GTE predicate on the "icon_url" field.
func IconURLGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldIconURL, v))
}

// IconURLLT applies the LT predicate on the "icon_url" field.
func IconURLLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldIconURL, v))
}

// IconURLLTE applies the LTE predicate on the "icon_url" field.
func IconURLLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldIconURL, v))
}

// IconURLContains applies the Contains predicate on the "icon_url" field.
func IconURLContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldIconURL, v))
}

// IconURLHasPrefix applies the HasPrefix predicate on the "icon_url" field.
func IconURLHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldIconURL, v))
}

// IconURLHasSuffix applies the HasSuffix predicate on the "icon_url" field.
func IconURLHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldIconURL, v))
}

// IconURLIsNil applies the IsNil predicate on the "icon_url" field.
func IconURLIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldIconURL))
}

// IconURLNotNil applies the NotNil predicate on the "icon_url" field.
func IconURLNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldIconURL))
}

// IconURLEqualFold applies the EqualFold predicate on the "icon_url" field.
func IconURLEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldIconURL, v))
}

// IconURLContainsFold applies the ContainsFold predicate on the "icon_url" field.
func IconURLContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldIconURL, v))
}

// CacheTTLEQ applies the EQ predicate on the "cache_ttl" field.
func CacheTTLEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldCacheTTL, v))
}

// CacheTTLNEQ applies the NEQ predicate on the "cache_ttl" field.
func CacheTTLNEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldCacheTTL, v))
}

// CacheTTLIn applies the In predicate on the "cache_ttl" field.
func CacheTTLIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldCacheTTL, vs...))
}

// CacheTTLNotIn applies the NotIn predicate on the "cache_ttl" field.
func CacheTTLNotIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldCacheTTL, vs...))
}

// CacheTTLGT applies the GT predicate on the "cache_ttl" field.
func CacheTTLGT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldCacheTTL, v))
}

// CacheTTLGTE applies the GTE predicate on the "cache_ttl" field.
func CacheTTLGTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldCacheTTL, v))
}

// CacheTTLLT applies the LT predicate on the "cache_ttl" field.
func CacheTTLLT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldCacheTTL, v))
}

// CacheTTLLTE applies the LTE predicate on the "cache_ttl" field.
func CacheTTLLTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldCacheTTL, v))
}

// WebhookURLEQ applies the EQ predicate on the "webhook_url" field.
func WebhookURLEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldWebhookURL, v))
}

// WebhookURLNEQ applies the NEQ predicate on the "webhook_url" field.
func WebhookURLNEQ(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldWebhookURL, v))
}

// WebhookURLIn applies the In predicate on the "webhook_url" field.
func WebhookURLIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldWebhookURL, vs...))
}

// WebhookURLNotIn applies the NotIn predicate on the "webhook_url" field.
func WebhookURLNotIn(vs ...string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldWebhookURL, vs...))
}

// WebhookURLGT applies the GT predicate on the "webhook_url" field.
func WebhookURLGT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldWebhookURL, v))
}

// WebhookURLGTE applies the GTE predicate on the "webhook_url" field.
func WebhookURLGTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldWebhookURL, v))
}

// WebhookURLLT applies the LT predicate on the "webhook_url" field.
func WebhookURLLT(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldWebhookURL, v))
}

// WebhookURLLTE applies the LTE predicate on the "webhook_url" field.
func WebhookURLLTE(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldWebhookURL, v))
}

// WebhookURLContains applies the Contains predicate on the "webhook_url" field.
func WebhookURLContains(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContains(FieldWebhookURL, v))
}

// WebhookURLHasPrefix applies the HasPrefix predicate on the "webhook_url" field.
func WebhookURLHasPrefix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasPrefix(FieldWebhookURL, v))
}

// WebhookURLHasSuffix applies the HasSuffix predicate on the "webhook_url" field.
func WebhookURLHasSuffix(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldHasSuffix(FieldWebhookURL, v))
}

// WebhookURLIsNil applies the IsNil predicate on the "webhook_url" field.
func WebhookURLIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldWebhookURL))
}

// WebhookURLNotNil applies the NotNil predicate on the "webhook_url" field.
func WebhookURLNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldWebhookURL))
}

// WebhookURLEqualFold applies the EqualFold predicate on the "webhook_url" field.
func WebhookURLEqualFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEqualFold(FieldWebhookURL, v))
}

// WebhookURLContainsFold applies the ContainsFold predicate on the "webhook_url" field.
func WebhookURLContainsFold(v string) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldContainsFold(FieldWebhookURL, v))
}

// SuccessCountEQ applies the EQ predicate on the "success_count" field.
func SuccessCountEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldSuccessCount, v))
}

// SuccessCountNEQ applies the NEQ predicate on the "success_count" field.
func SuccessCountNEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldSuccessCount, v))
}

// SuccessCountIn applies the In predicate on the "success_count" field.
func SuccessCountIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldSuccessCount, vs...))
}

// SuccessCountNotIn applies the NotIn predicate on the "success_count" field.
func SuccessCountNotIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldSuccessCount, vs...))
}

// SuccessCountGT applies the GT predicate on the "success_count" field.
func SuccessCountGT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldSuccessCount, v))
}

// SuccessCountGTE applies the GTE predicate on the "success_count" field.
func SuccessCountGTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldSuccessCount, v))
}

// SuccessCountLT applies the LT predicate on the "success_count" field.
func SuccessCountLT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldSuccessCount, v))
}

// SuccessCountLTE applies the LTE predicate on the "success_count" field.
func SuccessCountLTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldSuccessCount, v))
}

// FailureCountEQ applies the EQ predicate on the "failure_count" field.
func FailureCountEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldFailureCount, v))
}

// FailureCountNEQ applies the NEQ predicate on the "failure_count" field.
func FailureCountNEQ(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldFailureCount, v))
}

// FailureCountIn applies the In predicate on the "failure_count" field.
func FailureCountIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldFailureCount, vs...))
}

// FailureCountNotIn applies the NotIn predicate on the "failure_count" field.
func FailureCountNotIn(vs ...int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldFailureCount, vs...))
}

// FailureCountGT applies the GT predicate on the "failure_count" field.
func FailureCountGT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldFailureCount, v))
}

// FailureCountGTE applies the GTE predicate on the "failure_count" field.
func FailureCountGTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldFailureCount, v))
}

// FailureCountLT applies the LT predicate on the "failure_count" field.
func FailureCountLT(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldFailureCount, v))
}

// FailureCountLTE applies the LTE predicate on the "failure_count" field.
func FailureCountLTE(v int) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldFailureCount, v))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.OauthProvider {
	return predicate.OauthProvider(sql.FieldNotNull(FieldLastUsedAt))
}

// HasOauthAccounts applies the HasEdge predicate on the "oauth_accounts" edge.
func HasOauthAccounts() predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthAccountsTable, OauthAccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthAccountsWith applies the HasEdge predicate on the "oauth_accounts" edge with a given conditions (other predicates).
func HasOauthAccountsWith(preds ...predicate.OauthAccount) predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := newOauthAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOauthSessions applies the HasEdge predicate on the "oauth_sessions" edge.
func HasOauthSessions() predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthSessionsTable, OauthSessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthSessionsWith applies the HasEdge predicate on the "oauth_sessions" edge with a given conditions (other predicates).
func HasOauthSessionsWith(preds ...predicate.OauthSession) predicate.OauthProvider {
	return predicate.OauthProvider(func(s *sql.Selector) {
		step := newOauthSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthProvider) predicate.OauthProvider {
	return predicate.OauthProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthProvider) predicate.OauthProvider {
	return predicate.OauthProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthProvider) predicate.OauthProvider {
	return predicate.OauthProvider(sql.NotPredicates(p))
}
