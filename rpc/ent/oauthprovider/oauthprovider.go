// Code generated by ent, DO NOT EDIT.

package oauthprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthprovider type in the database.
	Label = "oauth_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldProviderType holds the string denoting the provider_type field in the database.
	FieldProviderType = "provider_type"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldEncryptedSecret holds the string denoting the encrypted_secret field in the database.
	FieldEncryptedSecret = "encrypted_secret"
	// FieldEncryptionKeyID holds the string denoting the encryption_key_id field in the database.
	FieldEncryptionKeyID = "encryption_key_id"
	// FieldRedirectURL holds the string denoting the redirect_url field in the database.
	FieldRedirectURL = "redirect_url"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldAuthURL holds the string denoting the auth_url field in the database.
	FieldAuthURL = "auth_url"
	// FieldTokenURL holds the string denoting the token_url field in the database.
	FieldTokenURL = "token_url"
	// FieldInfoURL holds the string denoting the info_url field in the database.
	FieldInfoURL = "info_url"
	// FieldAuthStyle holds the string denoting the auth_style field in the database.
	FieldAuthStyle = "auth_style"
	// FieldExtraConfig holds the string denoting the extra_config field in the database.
	FieldExtraConfig = "extra_config"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldSupportPkce holds the string denoting the support_pkce field in the database.
	FieldSupportPkce = "support_pkce"
	// FieldIconURL holds the string denoting the icon_url field in the database.
	FieldIconURL = "icon_url"
	// FieldCacheTTL holds the string denoting the cache_ttl field in the database.
	FieldCacheTTL = "cache_ttl"
	// FieldWebhookURL holds the string denoting the webhook_url field in the database.
	FieldWebhookURL = "webhook_url"
	// FieldSuccessCount holds the string denoting the success_count field in the database.
	FieldSuccessCount = "success_count"
	// FieldFailureCount holds the string denoting the failure_count field in the database.
	FieldFailureCount = "failure_count"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// EdgeOauthAccounts holds the string denoting the oauth_accounts edge name in mutations.
	EdgeOauthAccounts = "oauth_accounts"
	// EdgeOauthSessions holds the string denoting the oauth_sessions edge name in mutations.
	EdgeOauthSessions = "oauth_sessions"
	// Table holds the table name of the oauthprovider in the database.
	Table = "sys_oauth_providers"
	// OauthAccountsTable is the table that holds the oauth_accounts relation/edge.
	OauthAccountsTable = "sys_oauth_accounts"
	// OauthAccountsInverseTable is the table name for the OauthAccount entity.
	// It exists in this package in order to avoid circular dependency with the "oauthaccount" package.
	OauthAccountsInverseTable = "sys_oauth_accounts"
	// OauthAccountsColumn is the table column denoting the oauth_accounts relation/edge.
	OauthAccountsColumn = "provider_id"
	// OauthSessionsTable is the table that holds the oauth_sessions relation/edge.
	OauthSessionsTable = "sys_oauth_sessions"
	// OauthSessionsInverseTable is the table name for the OauthSession entity.
	// It exists in this package in order to avoid circular dependency with the "oauthsession" package.
	OauthSessionsInverseTable = "sys_oauth_sessions"
	// OauthSessionsColumn is the table column denoting the oauth_sessions relation/edge.
	OauthSessionsColumn = "provider_id"
)

// Columns holds all SQL columns for oauthprovider fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldTenantID,
	FieldName,
	FieldDisplayName,
	FieldType,
	FieldProviderType,
	FieldClientID,
	FieldClientSecret,
	FieldEncryptedSecret,
	FieldEncryptionKeyID,
	FieldRedirectURL,
	FieldScopes,
	FieldAuthURL,
	FieldTokenURL,
	FieldInfoURL,
	FieldAuthStyle,
	FieldExtraConfig,
	FieldEnabled,
	FieldSort,
	FieldRemark,
	FieldSupportPkce,
	FieldIconURL,
	FieldCacheTTL,
	FieldWebhookURL,
	FieldSuccessCount,
	FieldFailureCount,
	FieldLastUsedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID uint64
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultProviderType holds the default value on creation for the "provider_type" field.
	DefaultProviderType string
	// ProviderTypeValidator is a validator for the "provider_type" field. It is called by the builders before save.
	ProviderTypeValidator func(string) error
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// ClientSecretValidator is a validator for the "client_secret" field. It is called by the builders before save.
	ClientSecretValidator func(string) error
	// EncryptedSecretValidator is a validator for the "encrypted_secret" field. It is called by the builders before save.
	EncryptedSecretValidator func(string) error
	// EncryptionKeyIDValidator is a validator for the "encryption_key_id" field. It is called by the builders before save.
	EncryptionKeyIDValidator func(string) error
	// RedirectURLValidator is a validator for the "redirect_url" field. It is called by the builders before save.
	RedirectURLValidator func(string) error
	// ScopesValidator is a validator for the "scopes" field. It is called by the builders before save.
	ScopesValidator func(string) error
	// AuthURLValidator is a validator for the "auth_url" field. It is called by the builders before save.
	AuthURLValidator func(string) error
	// TokenURLValidator is a validator for the "token_url" field. It is called by the builders before save.
	TokenURLValidator func(string) error
	// InfoURLValidator is a validator for the "info_url" field. It is called by the builders before save.
	InfoURLValidator func(string) error
	// DefaultAuthStyle holds the default value on creation for the "auth_style" field.
	DefaultAuthStyle int
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort uint32
	// RemarkValidator is a validator for the "remark" field. It is called by the builders before save.
	RemarkValidator func(string) error
	// DefaultSupportPkce holds the default value on creation for the "support_pkce" field.
	DefaultSupportPkce bool
	// IconURLValidator is a validator for the "icon_url" field. It is called by the builders before save.
	IconURLValidator func(string) error
	// DefaultCacheTTL holds the default value on creation for the "cache_ttl" field.
	DefaultCacheTTL int
	// WebhookURLValidator is a validator for the "webhook_url" field. It is called by the builders before save.
	WebhookURLValidator func(string) error
	// DefaultSuccessCount holds the default value on creation for the "success_count" field.
	DefaultSuccessCount int
	// DefaultFailureCount holds the default value on creation for the "failure_count" field.
	DefaultFailureCount int
)

// OrderOption defines the ordering options for the OauthProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByProviderType orders the results by the provider_type field.
func ByProviderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderType, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByEncryptedSecret orders the results by the encrypted_secret field.
func ByEncryptedSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEncryptedSecret, opts...).ToFunc()
}

// ByEncryptionKeyID orders the results by the encryption_key_id field.
func ByEncryptionKeyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEncryptionKeyID, opts...).ToFunc()
}

// ByRedirectURL orders the results by the redirect_url field.
func ByRedirectURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURL, opts...).ToFunc()
}

// ByScopes orders the results by the scopes field.
func ByScopes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopes, opts...).ToFunc()
}

// ByAuthURL orders the results by the auth_url field.
func ByAuthURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthURL, opts...).ToFunc()
}

// ByTokenURL orders the results by the token_url field.
func ByTokenURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenURL, opts...).ToFunc()
}

// ByInfoURL orders the results by the info_url field.
func ByInfoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInfoURL, opts...).ToFunc()
}

// ByAuthStyle orders the results by the auth_style field.
func ByAuthStyle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthStyle, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// BySupportPkce orders the results by the support_pkce field.
func BySupportPkce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupportPkce, opts...).ToFunc()
}

// ByIconURL orders the results by the icon_url field.
func ByIconURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconURL, opts...).ToFunc()
}

// ByCacheTTL orders the results by the cache_ttl field.
func ByCacheTTL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCacheTTL, opts...).ToFunc()
}

// ByWebhookURL orders the results by the webhook_url field.
func ByWebhookURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebhookURL, opts...).ToFunc()
}

// BySuccessCount orders the results by the success_count field.
func BySuccessCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessCount, opts...).ToFunc()
}

// ByFailureCount orders the results by the failure_count field.
func ByFailureCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailureCount, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByOauthAccountsCount orders the results by oauth_accounts count.
func ByOauthAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthAccountsStep(), opts...)
	}
}

// ByOauthAccounts orders the results by oauth_accounts terms.
func ByOauthAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthSessionsCount orders the results by oauth_sessions count.
func ByOauthSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthSessionsStep(), opts...)
	}
}

// ByOauthSessions orders the results by oauth_sessions terms.
func ByOauthSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOauthAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthAccountsTable, OauthAccountsColumn),
	)
}
func newOauthSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthSessionsTable, OauthSessionsColumn),
	)
}
