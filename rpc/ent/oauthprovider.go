// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/coder-lulu/newbee-core/rpc/ent/oauthprovider"
)

// OAuth Provider Configuration Table | OAuth第三方登录提供商配置表
type OauthProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Tenant ID | 租户 ID
	TenantID uint64 `json:"tenant_id,omitempty"`
	// The provider's name | 提供商名称
	Name string `json:"name,omitempty"`
	// Display name for UI | UI显示名称
	DisplayName string `json:"display_name,omitempty"`
	// The provider type (wechat, qq, github, google, facebook) | 提供商类型
	Type string `json:"type,omitempty"`
	// Provider type: oauth2, oidc, saml | 认证协议类型
	ProviderType string `json:"provider_type,omitempty"`
	// The client id | 客户端 ID
	ClientID string `json:"client_id,omitempty"`
	// The client secret (original) | 客户端密钥（原始）
	ClientSecret string `json:"client_secret,omitempty"`
	// Encrypted client secret | 加密后的客户端密钥
	EncryptedSecret string `json:"encrypted_secret,omitempty"`
	// Encryption key ID | 加密密钥ID
	EncryptionKeyID string `json:"encryption_key_id,omitempty"`
	// The redirect url | 回调地址
	RedirectURL string `json:"redirect_url,omitempty"`
	// The scopes | 权限范围
	Scopes string `json:"scopes,omitempty"`
	// OAuth authorization URL | OAuth授权URL
	AuthURL string `json:"auth_url,omitempty"`
	// OAuth token exchange URL | OAuth令牌交换URL
	TokenURL string `json:"token_url,omitempty"`
	// User info URL | 用户信息获取URL
	InfoURL string `json:"info_url,omitempty"`
	// OAuth auth style (1=params, 2=header) | OAuth认证方式
	AuthStyle int `json:"auth_style,omitempty"`
	// Provider specific configuration | 提供商特定配置
	ExtraConfig map[string]interface{} `json:"extra_config,omitempty"`
	// Whether the provider is enabled | 是否启用
	Enabled bool `json:"enabled,omitempty"`
	// Sort order | 排序
	Sort uint32 `json:"sort,omitempty"`
	// Remark | 备注
	Remark string `json:"remark,omitempty"`
	// Whether support PKCE | 是否支持PKCE
	SupportPkce bool `json:"support_pkce,omitempty"`
	// Provider icon URL | 提供商图标URL
	IconURL string `json:"icon_url,omitempty"`
	// Configuration cache TTL in seconds | 配置缓存TTL(秒)
	CacheTTL int `json:"cache_ttl,omitempty"`
	// Webhook URL for configuration updates | 配置更新webhook地址
	WebhookURL string `json:"webhook_url,omitempty"`
	// Successful OAuth attempts count | 成功登录次数
	SuccessCount int `json:"success_count,omitempty"`
	// Failed OAuth attempts count | 失败登录次数
	FailureCount int `json:"failure_count,omitempty"`
	// Last used timestamp | 最后使用时间
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthProviderQuery when eager-loading is set.
	Edges        OauthProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OauthProviderEdges holds the relations/edges for other nodes in the graph.
type OauthProviderEdges struct {
	// OauthAccounts holds the value of the oauth_accounts edge.
	OauthAccounts []*OauthAccount `json:"oauth_accounts,omitempty"`
	// OauthSessions holds the value of the oauth_sessions edge.
	OauthSessions []*OauthSession `json:"oauth_sessions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OauthAccountsOrErr returns the OauthAccounts value or an error if the edge
// was not loaded in eager-loading.
func (e OauthProviderEdges) OauthAccountsOrErr() ([]*OauthAccount, error) {
	if e.loadedTypes[0] {
		return e.OauthAccounts, nil
	}
	return nil, &NotLoadedError{edge: "oauth_accounts"}
}

// OauthSessionsOrErr returns the OauthSessions value or an error if the edge
// was not loaded in eager-loading.
func (e OauthProviderEdges) OauthSessionsOrErr() ([]*OauthSession, error) {
	if e.loadedTypes[1] {
		return e.OauthSessions, nil
	}
	return nil, &NotLoadedError{edge: "oauth_sessions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthprovider.FieldExtraConfig:
			values[i] = new([]byte)
		case oauthprovider.FieldEnabled, oauthprovider.FieldSupportPkce:
			values[i] = new(sql.NullBool)
		case oauthprovider.FieldID, oauthprovider.FieldStatus, oauthprovider.FieldTenantID, oauthprovider.FieldAuthStyle, oauthprovider.FieldSort, oauthprovider.FieldCacheTTL, oauthprovider.FieldSuccessCount, oauthprovider.FieldFailureCount:
			values[i] = new(sql.NullInt64)
		case oauthprovider.FieldName, oauthprovider.FieldDisplayName, oauthprovider.FieldType, oauthprovider.FieldProviderType, oauthprovider.FieldClientID, oauthprovider.FieldClientSecret, oauthprovider.FieldEncryptedSecret, oauthprovider.FieldEncryptionKeyID, oauthprovider.FieldRedirectURL, oauthprovider.FieldScopes, oauthprovider.FieldAuthURL, oauthprovider.FieldTokenURL, oauthprovider.FieldInfoURL, oauthprovider.FieldRemark, oauthprovider.FieldIconURL, oauthprovider.FieldWebhookURL:
			values[i] = new(sql.NullString)
		case oauthprovider.FieldCreatedAt, oauthprovider.FieldUpdatedAt, oauthprovider.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthProvider fields.
func (_m *OauthProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case oauthprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case oauthprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case oauthprovider.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = uint8(value.Int64)
			}
		case oauthprovider.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = uint64(value.Int64)
			}
		case oauthprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case oauthprovider.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				_m.DisplayName = value.String
			}
		case oauthprovider.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case oauthprovider.FieldProviderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_type", values[i])
			} else if value.Valid {
				_m.ProviderType = value.String
			}
		case oauthprovider.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				_m.ClientID = value.String
			}
		case oauthprovider.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				_m.ClientSecret = value.String
			}
		case oauthprovider.FieldEncryptedSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encrypted_secret", values[i])
			} else if value.Valid {
				_m.EncryptedSecret = value.String
			}
		case oauthprovider.FieldEncryptionKeyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encryption_key_id", values[i])
			} else if value.Valid {
				_m.EncryptionKeyID = value.String
			}
		case oauthprovider.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				_m.RedirectURL = value.String
			}
		case oauthprovider.FieldScopes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value.Valid {
				_m.Scopes = value.String
			}
		case oauthprovider.FieldAuthURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_url", values[i])
			} else if value.Valid {
				_m.AuthURL = value.String
			}
		case oauthprovider.FieldTokenURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_url", values[i])
			} else if value.Valid {
				_m.TokenURL = value.String
			}
		case oauthprovider.FieldInfoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info_url", values[i])
			} else if value.Valid {
				_m.InfoURL = value.String
			}
		case oauthprovider.FieldAuthStyle:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auth_style", values[i])
			} else if value.Valid {
				_m.AuthStyle = int(value.Int64)
			}
		case oauthprovider.FieldExtraConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ExtraConfig); err != nil {
					return fmt.Errorf("unmarshal field extra_config: %w", err)
				}
			}
		case oauthprovider.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				_m.Enabled = value.Bool
			}
		case oauthprovider.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				_m.Sort = uint32(value.Int64)
			}
		case oauthprovider.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				_m.Remark = value.String
			}
		case oauthprovider.FieldSupportPkce:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field support_pkce", values[i])
			} else if value.Valid {
				_m.SupportPkce = value.Bool
			}
		case oauthprovider.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				_m.IconURL = value.String
			}
		case oauthprovider.FieldCacheTTL:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cache_ttl", values[i])
			} else if value.Valid {
				_m.CacheTTL = int(value.Int64)
			}
		case oauthprovider.FieldWebhookURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_url", values[i])
			} else if value.Valid {
				_m.WebhookURL = value.String
			}
		case oauthprovider.FieldSuccessCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field success_count", values[i])
			} else if value.Valid {
				_m.SuccessCount = int(value.Int64)
			}
		case oauthprovider.FieldFailureCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failure_count", values[i])
			} else if value.Valid {
				_m.FailureCount = int(value.Int64)
			}
		case oauthprovider.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				_m.LastUsedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthProvider.
// This includes values selected through modifiers, order, etc.
func (_m *OauthProvider) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOauthAccounts queries the "oauth_accounts" edge of the OauthProvider entity.
func (_m *OauthProvider) QueryOauthAccounts() *OauthAccountQuery {
	return NewOauthProviderClient(_m.config).QueryOauthAccounts(_m)
}

// QueryOauthSessions queries the "oauth_sessions" edge of the OauthProvider entity.
func (_m *OauthProvider) QueryOauthSessions() *OauthSessionQuery {
	return NewOauthProviderClient(_m.config).QueryOauthSessions(_m)
}

// Update returns a builder for updating this OauthProvider.
// Note that you need to call OauthProvider.Unwrap() before calling this method if this OauthProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OauthProvider) Update() *OauthProviderUpdateOne {
	return NewOauthProviderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OauthProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OauthProvider) Unwrap() *OauthProvider {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthProvider is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OauthProvider) String() string {
	var builder strings.Builder
	builder.WriteString("OauthProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(_m.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("provider_type=")
	builder.WriteString(_m.ProviderType)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(_m.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(_m.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("encrypted_secret=")
	builder.WriteString(_m.EncryptedSecret)
	builder.WriteString(", ")
	builder.WriteString("encryption_key_id=")
	builder.WriteString(_m.EncryptionKeyID)
	builder.WriteString(", ")
	builder.WriteString("redirect_url=")
	builder.WriteString(_m.RedirectURL)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(_m.Scopes)
	builder.WriteString(", ")
	builder.WriteString("auth_url=")
	builder.WriteString(_m.AuthURL)
	builder.WriteString(", ")
	builder.WriteString("token_url=")
	builder.WriteString(_m.TokenURL)
	builder.WriteString(", ")
	builder.WriteString("info_url=")
	builder.WriteString(_m.InfoURL)
	builder.WriteString(", ")
	builder.WriteString("auth_style=")
	builder.WriteString(fmt.Sprintf("%v", _m.AuthStyle))
	builder.WriteString(", ")
	builder.WriteString("extra_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExtraConfig))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.Enabled))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", _m.Sort))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(_m.Remark)
	builder.WriteString(", ")
	builder.WriteString("support_pkce=")
	builder.WriteString(fmt.Sprintf("%v", _m.SupportPkce))
	builder.WriteString(", ")
	builder.WriteString("icon_url=")
	builder.WriteString(_m.IconURL)
	builder.WriteString(", ")
	builder.WriteString("cache_ttl=")
	builder.WriteString(fmt.Sprintf("%v", _m.CacheTTL))
	builder.WriteString(", ")
	builder.WriteString("webhook_url=")
	builder.WriteString(_m.WebhookURL)
	builder.WriteString(", ")
	builder.WriteString("success_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.SuccessCount))
	builder.WriteString(", ")
	builder.WriteString("failure_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.FailureCount))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(_m.LastUsedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OauthProviders is a parsable slice of OauthProvider.
type OauthProviders []*OauthProvider
