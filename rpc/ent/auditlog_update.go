// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coder-lulu/newbee-core/rpc/ent/auditlog"
	"github.com/coder-lulu/newbee-core/rpc/ent/predicate"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks     []Hook
	mutation  *AuditLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (_u *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AuditLogUpdate) SetUpdatedAt(v time.Time) *AuditLogUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *AuditLogUpdate) SetStatus(v uint8) *AuditLogUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableStatus(v *uint8) *AuditLogUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *AuditLogUpdate) AddStatus(v int8) *AuditLogUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *AuditLogUpdate) ClearStatus() *AuditLogUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *AuditLogUpdate) SetTenantID(v string) *AuditLogUpdate {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableTenantID(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AuditLogUpdate) SetUserID(v string) *AuditLogUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableUserID(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetUserName sets the "user_name" field.
func (_u *AuditLogUpdate) SetUserName(v string) *AuditLogUpdate {
	_u.mutation.SetUserName(v)
	return _u
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableUserName(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetUserName(*v)
	}
	return _u
}

// ClearUserName clears the value of the "user_name" field.
func (_u *AuditLogUpdate) ClearUserName() *AuditLogUpdate {
	_u.mutation.ClearUserName()
	return _u
}

// SetOperationType sets the "operation_type" field.
func (_u *AuditLogUpdate) SetOperationType(v auditlog.OperationType) *AuditLogUpdate {
	_u.mutation.SetOperationType(v)
	return _u
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableOperationType(v *auditlog.OperationType) *AuditLogUpdate {
	if v != nil {
		_u.SetOperationType(*v)
	}
	return _u
}

// SetResourceType sets the "resource_type" field.
func (_u *AuditLogUpdate) SetResourceType(v string) *AuditLogUpdate {
	_u.mutation.SetResourceType(v)
	return _u
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableResourceType(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetResourceType(*v)
	}
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *AuditLogUpdate) SetResourceID(v string) *AuditLogUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableResourceID(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// ClearResourceID clears the value of the "resource_id" field.
func (_u *AuditLogUpdate) ClearResourceID() *AuditLogUpdate {
	_u.mutation.ClearResourceID()
	return _u
}

// SetRequestMethod sets the "request_method" field.
func (_u *AuditLogUpdate) SetRequestMethod(v string) *AuditLogUpdate {
	_u.mutation.SetRequestMethod(v)
	return _u
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableRequestMethod(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetRequestMethod(*v)
	}
	return _u
}

// SetRequestPath sets the "request_path" field.
func (_u *AuditLogUpdate) SetRequestPath(v string) *AuditLogUpdate {
	_u.mutation.SetRequestPath(v)
	return _u
}

// SetNillableRequestPath sets the "request_path" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableRequestPath(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetRequestPath(*v)
	}
	return _u
}

// SetRequestData sets the "request_data" field.
func (_u *AuditLogUpdate) SetRequestData(v string) *AuditLogUpdate {
	_u.mutation.SetRequestData(v)
	return _u
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableRequestData(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetRequestData(*v)
	}
	return _u
}

// ClearRequestData clears the value of the "request_data" field.
func (_u *AuditLogUpdate) ClearRequestData() *AuditLogUpdate {
	_u.mutation.ClearRequestData()
	return _u
}

// SetResponseStatus sets the "response_status" field.
func (_u *AuditLogUpdate) SetResponseStatus(v int) *AuditLogUpdate {
	_u.mutation.ResetResponseStatus()
	_u.mutation.SetResponseStatus(v)
	return _u
}

// SetNillableResponseStatus sets the "response_status" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableResponseStatus(v *int) *AuditLogUpdate {
	if v != nil {
		_u.SetResponseStatus(*v)
	}
	return _u
}

// AddResponseStatus adds value to the "response_status" field.
func (_u *AuditLogUpdate) AddResponseStatus(v int) *AuditLogUpdate {
	_u.mutation.AddResponseStatus(v)
	return _u
}

// SetResponseData sets the "response_data" field.
func (_u *AuditLogUpdate) SetResponseData(v string) *AuditLogUpdate {
	_u.mutation.SetResponseData(v)
	return _u
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableResponseData(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetResponseData(*v)
	}
	return _u
}

// ClearResponseData clears the value of the "response_data" field.
func (_u *AuditLogUpdate) ClearResponseData() *AuditLogUpdate {
	_u.mutation.ClearResponseData()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *AuditLogUpdate) SetIPAddress(v string) *AuditLogUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableIPAddress(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AuditLogUpdate) SetUserAgent(v string) *AuditLogUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableUserAgent(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AuditLogUpdate) ClearUserAgent() *AuditLogUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetDurationMs sets the "duration_ms" field.
func (_u *AuditLogUpdate) SetDurationMs(v int64) *AuditLogUpdate {
	_u.mutation.ResetDurationMs()
	_u.mutation.SetDurationMs(v)
	return _u
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableDurationMs(v *int64) *AuditLogUpdate {
	if v != nil {
		_u.SetDurationMs(*v)
	}
	return _u
}

// AddDurationMs adds value to the "duration_ms" field.
func (_u *AuditLogUpdate) AddDurationMs(v int64) *AuditLogUpdate {
	_u.mutation.AddDurationMs(v)
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *AuditLogUpdate) SetErrorMessage(v string) *AuditLogUpdate {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableErrorMessage(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *AuditLogUpdate) ClearErrorMessage() *AuditLogUpdate {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *AuditLogUpdate) SetMetadata(v map[string]interface{}) *AuditLogUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *AuditLogUpdate) ClearMetadata() *AuditLogUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// Mutation returns the AuditLogMutation object of the builder.
func (_u *AuditLogUpdate) Mutation() *AuditLogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AuditLogUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := auditlog.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AuditLogUpdate) check() error {
	if v, ok := _u.mutation.OperationType(); ok {
		if err := auditlog.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`ent: validator failed for field "AuditLog.operation_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AuditLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditLogUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AuditLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(auditlog.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(auditlog.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(auditlog.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.TenantID(); ok {
		_spec.SetField(auditlog.FieldTenantID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(auditlog.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserName(); ok {
		_spec.SetField(auditlog.FieldUserName, field.TypeString, value)
	}
	if _u.mutation.UserNameCleared() {
		_spec.ClearField(auditlog.FieldUserName, field.TypeString)
	}
	if value, ok := _u.mutation.OperationType(); ok {
		_spec.SetField(auditlog.FieldOperationType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ResourceType(); ok {
		_spec.SetField(auditlog.FieldResourceType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(auditlog.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.ResourceIDCleared() {
		_spec.ClearField(auditlog.FieldResourceID, field.TypeString)
	}
	if value, ok := _u.mutation.RequestMethod(); ok {
		_spec.SetField(auditlog.FieldRequestMethod, field.TypeString, value)
	}
	if value, ok := _u.mutation.RequestPath(); ok {
		_spec.SetField(auditlog.FieldRequestPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.RequestData(); ok {
		_spec.SetField(auditlog.FieldRequestData, field.TypeString, value)
	}
	if _u.mutation.RequestDataCleared() {
		_spec.ClearField(auditlog.FieldRequestData, field.TypeString)
	}
	if value, ok := _u.mutation.ResponseStatus(); ok {
		_spec.SetField(auditlog.FieldResponseStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedResponseStatus(); ok {
		_spec.AddField(auditlog.FieldResponseStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ResponseData(); ok {
		_spec.SetField(auditlog.FieldResponseData, field.TypeString, value)
	}
	if _u.mutation.ResponseDataCleared() {
		_spec.ClearField(auditlog.FieldResponseData, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(auditlog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(auditlog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(auditlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.DurationMs(); ok {
		_spec.SetField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDurationMs(); ok {
		_spec.AddField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(auditlog.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(auditlog.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(auditlog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(auditlog.FieldMetadata, field.TypeJSON)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuditLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AuditLogUpdateOne) SetUpdatedAt(v time.Time) *AuditLogUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *AuditLogUpdateOne) SetStatus(v uint8) *AuditLogUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableStatus(v *uint8) *AuditLogUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *AuditLogUpdateOne) AddStatus(v int8) *AuditLogUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *AuditLogUpdateOne) ClearStatus() *AuditLogUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *AuditLogUpdateOne) SetTenantID(v string) *AuditLogUpdateOne {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableTenantID(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AuditLogUpdateOne) SetUserID(v string) *AuditLogUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableUserID(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetUserName sets the "user_name" field.
func (_u *AuditLogUpdateOne) SetUserName(v string) *AuditLogUpdateOne {
	_u.mutation.SetUserName(v)
	return _u
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableUserName(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetUserName(*v)
	}
	return _u
}

// ClearUserName clears the value of the "user_name" field.
func (_u *AuditLogUpdateOne) ClearUserName() *AuditLogUpdateOne {
	_u.mutation.ClearUserName()
	return _u
}

// SetOperationType sets the "operation_type" field.
func (_u *AuditLogUpdateOne) SetOperationType(v auditlog.OperationType) *AuditLogUpdateOne {
	_u.mutation.SetOperationType(v)
	return _u
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableOperationType(v *auditlog.OperationType) *AuditLogUpdateOne {
	if v != nil {
		_u.SetOperationType(*v)
	}
	return _u
}

// SetResourceType sets the "resource_type" field.
func (_u *AuditLogUpdateOne) SetResourceType(v string) *AuditLogUpdateOne {
	_u.mutation.SetResourceType(v)
	return _u
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableResourceType(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetResourceType(*v)
	}
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *AuditLogUpdateOne) SetResourceID(v string) *AuditLogUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableResourceID(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// ClearResourceID clears the value of the "resource_id" field.
func (_u *AuditLogUpdateOne) ClearResourceID() *AuditLogUpdateOne {
	_u.mutation.ClearResourceID()
	return _u
}

// SetRequestMethod sets the "request_method" field.
func (_u *AuditLogUpdateOne) SetRequestMethod(v string) *AuditLogUpdateOne {
	_u.mutation.SetRequestMethod(v)
	return _u
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableRequestMethod(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetRequestMethod(*v)
	}
	return _u
}

// SetRequestPath sets the "request_path" field.
func (_u *AuditLogUpdateOne) SetRequestPath(v string) *AuditLogUpdateOne {
	_u.mutation.SetRequestPath(v)
	return _u
}

// SetNillableRequestPath sets the "request_path" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableRequestPath(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetRequestPath(*v)
	}
	return _u
}

// SetRequestData sets the "request_data" field.
func (_u *AuditLogUpdateOne) SetRequestData(v string) *AuditLogUpdateOne {
	_u.mutation.SetRequestData(v)
	return _u
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableRequestData(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetRequestData(*v)
	}
	return _u
}

// ClearRequestData clears the value of the "request_data" field.
func (_u *AuditLogUpdateOne) ClearRequestData() *AuditLogUpdateOne {
	_u.mutation.ClearRequestData()
	return _u
}

// SetResponseStatus sets the "response_status" field.
func (_u *AuditLogUpdateOne) SetResponseStatus(v int) *AuditLogUpdateOne {
	_u.mutation.ResetResponseStatus()
	_u.mutation.SetResponseStatus(v)
	return _u
}

// SetNillableResponseStatus sets the "response_status" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableResponseStatus(v *int) *AuditLogUpdateOne {
	if v != nil {
		_u.SetResponseStatus(*v)
	}
	return _u
}

// AddResponseStatus adds value to the "response_status" field.
func (_u *AuditLogUpdateOne) AddResponseStatus(v int) *AuditLogUpdateOne {
	_u.mutation.AddResponseStatus(v)
	return _u
}

// SetResponseData sets the "response_data" field.
func (_u *AuditLogUpdateOne) SetResponseData(v string) *AuditLogUpdateOne {
	_u.mutation.SetResponseData(v)
	return _u
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableResponseData(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetResponseData(*v)
	}
	return _u
}

// ClearResponseData clears the value of the "response_data" field.
func (_u *AuditLogUpdateOne) ClearResponseData() *AuditLogUpdateOne {
	_u.mutation.ClearResponseData()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *AuditLogUpdateOne) SetIPAddress(v string) *AuditLogUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableIPAddress(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AuditLogUpdateOne) SetUserAgent(v string) *AuditLogUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableUserAgent(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AuditLogUpdateOne) ClearUserAgent() *AuditLogUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetDurationMs sets the "duration_ms" field.
func (_u *AuditLogUpdateOne) SetDurationMs(v int64) *AuditLogUpdateOne {
	_u.mutation.ResetDurationMs()
	_u.mutation.SetDurationMs(v)
	return _u
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableDurationMs(v *int64) *AuditLogUpdateOne {
	if v != nil {
		_u.SetDurationMs(*v)
	}
	return _u
}

// AddDurationMs adds value to the "duration_ms" field.
func (_u *AuditLogUpdateOne) AddDurationMs(v int64) *AuditLogUpdateOne {
	_u.mutation.AddDurationMs(v)
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *AuditLogUpdateOne) SetErrorMessage(v string) *AuditLogUpdateOne {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableErrorMessage(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *AuditLogUpdateOne) ClearErrorMessage() *AuditLogUpdateOne {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *AuditLogUpdateOne) SetMetadata(v map[string]interface{}) *AuditLogUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *AuditLogUpdateOne) ClearMetadata() *AuditLogUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// Mutation returns the AuditLogMutation object of the builder.
func (_u *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return _u.mutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (_u *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AuditLog entity.
func (_u *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AuditLogUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := auditlog.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AuditLogUpdateOne) check() error {
	if v, ok := _u.mutation.OperationType(); ok {
		if err := auditlog.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`ent: validator failed for field "AuditLog.operation_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AuditLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuditLogUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(auditlog.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(auditlog.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(auditlog.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.TenantID(); ok {
		_spec.SetField(auditlog.FieldTenantID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(auditlog.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserName(); ok {
		_spec.SetField(auditlog.FieldUserName, field.TypeString, value)
	}
	if _u.mutation.UserNameCleared() {
		_spec.ClearField(auditlog.FieldUserName, field.TypeString)
	}
	if value, ok := _u.mutation.OperationType(); ok {
		_spec.SetField(auditlog.FieldOperationType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ResourceType(); ok {
		_spec.SetField(auditlog.FieldResourceType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(auditlog.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.ResourceIDCleared() {
		_spec.ClearField(auditlog.FieldResourceID, field.TypeString)
	}
	if value, ok := _u.mutation.RequestMethod(); ok {
		_spec.SetField(auditlog.FieldRequestMethod, field.TypeString, value)
	}
	if value, ok := _u.mutation.RequestPath(); ok {
		_spec.SetField(auditlog.FieldRequestPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.RequestData(); ok {
		_spec.SetField(auditlog.FieldRequestData, field.TypeString, value)
	}
	if _u.mutation.RequestDataCleared() {
		_spec.ClearField(auditlog.FieldRequestData, field.TypeString)
	}
	if value, ok := _u.mutation.ResponseStatus(); ok {
		_spec.SetField(auditlog.FieldResponseStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedResponseStatus(); ok {
		_spec.AddField(auditlog.FieldResponseStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ResponseData(); ok {
		_spec.SetField(auditlog.FieldResponseData, field.TypeString, value)
	}
	if _u.mutation.ResponseDataCleared() {
		_spec.ClearField(auditlog.FieldResponseData, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(auditlog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(auditlog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(auditlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.DurationMs(); ok {
		_spec.SetField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDurationMs(); ok {
		_spec.AddField(auditlog.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(auditlog.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(auditlog.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(auditlog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(auditlog.FieldMetadata, field.TypeJSON)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AuditLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
