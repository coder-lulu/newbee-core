// Code generated by goctl. DO NOT EDIT.
// Source: core.proto

package coreclient

import (
	"context"

	"github.com/coder-lulu/newbee-core/rpc/types/core"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApiInfo                      = core.ApiInfo
	ApiListReq                   = core.ApiListReq
	ApiListResp                  = core.ApiListResp
	AuditLogInfo                 = core.AuditLogInfo
	AuditLogListReq              = core.AuditLogListReq
	AuditLogListResp             = core.AuditLogListResp
	AuditLogStatsReq             = core.AuditLogStatsReq
	AuditLogStatsResp            = core.AuditLogStatsResp
	BaseIDResp                   = core.BaseIDResp
	BaseMsg                      = core.BaseMsg
	BaseResp                     = core.BaseResp
	BaseUUIDResp                 = core.BaseUUIDResp
	BatchCreateCasbinRulesReq    = core.BatchCreateCasbinRulesReq
	BatchPermissionCheckReq      = core.BatchPermissionCheckReq
	BatchPermissionCheckResp     = core.BatchPermissionCheckResp
	BatchUpdateCasbinRulesReq    = core.BatchUpdateCasbinRulesReq
	BindOauthAccountReq          = core.BindOauthAccountReq
	CallbackReq                  = core.CallbackReq
	CasbinRuleInfo               = core.CasbinRuleInfo
	CasbinRuleListReq            = core.CasbinRuleListReq
	CasbinRuleListResp           = core.CasbinRuleListResp
	ConfigurationInfo            = core.ConfigurationInfo
	ConfigurationListReq         = core.ConfigurationListReq
	ConfigurationListResp        = core.ConfigurationListResp
	CreateOauthSessionReq        = core.CreateOauthSessionReq
	DepartmentInfo               = core.DepartmentInfo
	DepartmentListReq            = core.DepartmentListReq
	DepartmentListResp           = core.DepartmentListResp
	DictionaryDetailInfo         = core.DictionaryDetailInfo
	DictionaryDetailListReq      = core.DictionaryDetailListReq
	DictionaryDetailListResp     = core.DictionaryDetailListResp
	DictionaryInfo               = core.DictionaryInfo
	DictionaryListReq            = core.DictionaryListReq
	DictionaryListResp           = core.DictionaryListResp
	DurationStats                = core.DurationStats
	Empty                        = core.Empty
	GetOauthSessionByStateReq    = core.GetOauthSessionByStateReq
	GetUserOauthAccountsReq      = core.GetUserOauthAccountsReq
	GetUserOauthAccountsResp     = core.GetUserOauthAccountsResp
	GetUserPermissionSummaryReq  = core.GetUserPermissionSummaryReq
	GetUserPermissionSummaryResp = core.GetUserPermissionSummaryResp
	IDReq                        = core.IDReq
	IDsReq                       = core.IDsReq
	MenuInfo                     = core.MenuInfo
	MenuInfoList                 = core.MenuInfoList
	MenuRoleInfo                 = core.MenuRoleInfo
	MenuRoleListResp             = core.MenuRoleListResp
	Meta                         = core.Meta
	OauthAccountInfo             = core.OauthAccountInfo
	OauthAccountListReq          = core.OauthAccountListReq
	OauthAccountListResp         = core.OauthAccountListResp
	OauthLoginReq                = core.OauthLoginReq
	OauthProviderInfo            = core.OauthProviderInfo
	OauthProviderListReq         = core.OauthProviderListReq
	OauthProviderListResp        = core.OauthProviderListResp
	OauthRedirectResp            = core.OauthRedirectResp
	OauthSessionInfo             = core.OauthSessionInfo
	OperationTypeStats           = core.OperationTypeStats
	PageInfoReq                  = core.PageInfoReq
	PermissionCheckReq           = core.PermissionCheckReq
	PermissionCheckResp          = core.PermissionCheckResp
	PermissionSummary            = core.PermissionSummary
	PositionInfo                 = core.PositionInfo
	PositionListReq              = core.PositionListReq
	PositionListResp             = core.PositionListResp
	PublicTenantInfo             = core.PublicTenantInfo
	PublicTenantListResp         = core.PublicTenantListResp
	RefreshCasbinCacheReq        = core.RefreshCasbinCacheReq
	RefreshCasbinCacheResp       = core.RefreshCasbinCacheResp
	ResetPwdReq                  = core.ResetPwdReq
	ResourceTypeStats            = core.ResourceTypeStats
	RoleAuthReq                  = core.RoleAuthReq
	RoleDataScopeReq             = core.RoleDataScopeReq
	RoleInfo                     = core.RoleInfo
	RoleListReq                  = core.RoleListReq
	RoleListResp                 = core.RoleListResp
	RoleMenuAuthorityReq         = core.RoleMenuAuthorityReq
	RoleMenuAuthorityResp        = core.RoleMenuAuthorityResp
	RoleStatusChangeParam        = core.RoleStatusChangeParam
	RoleUnallocatedListReq       = core.RoleUnallocatedListReq
	SyncCasbinRulesReq           = core.SyncCasbinRulesReq
	SyncCasbinRulesResp          = core.SyncCasbinRulesResp
	TenantCodeReq                = core.TenantCodeReq
	TenantInfo                   = core.TenantInfo
	TenantInitReq                = core.TenantInitReq
	TenantListReq                = core.TenantListReq
	TenantListResp               = core.TenantListResp
	TenantStatusReq              = core.TenantStatusReq
	TokenInfo                    = core.TokenInfo
	TokenListReq                 = core.TokenListReq
	TokenListResp                = core.TokenListResp
	UUIDReq                      = core.UUIDReq
	UUIDsReq                     = core.UUIDsReq
	UnbindOauthAccountReq        = core.UnbindOauthAccountReq
	UpdateOauthSessionReq        = core.UpdateOauthSessionReq
	UserInfo                     = core.UserInfo
	UserListReq                  = core.UserListReq
	UserListResp                 = core.UserListResp
	UsernameReq                  = core.UsernameReq
	ValidateCasbinRuleReq        = core.ValidateCasbinRuleReq
	ValidateCasbinRuleResp       = core.ValidateCasbinRuleResp

	Core interface {
		// API management
		CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error)
		GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error)
		DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// AuditLog management
		CreateAuditLog(ctx context.Context, in *AuditLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		GetAuditLogList(ctx context.Context, in *AuditLogListReq, opts ...grpc.CallOption) (*AuditLogListResp, error)
		GetAuditLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*AuditLogInfo, error)
		DeleteAuditLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetAuditLogStats(ctx context.Context, in *AuditLogStatsReq, opts ...grpc.CallOption) (*AuditLogStatsResp, error)
		GetMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleMenuAuthorityResp, error)
		CreateOrUpdateMenuAuthority(ctx context.Context, in *RoleMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error)
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// 权限规则管理
		CreateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteCasbinRule(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetCasbinRuleList(ctx context.Context, in *CasbinRuleListReq, opts ...grpc.CallOption) (*CasbinRuleListResp, error)
		GetCasbinRuleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CasbinRuleInfo, error)
		// 批量操作
		BatchCreateCasbinRules(ctx context.Context, in *BatchCreateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error)
		BatchUpdateCasbinRules(ctx context.Context, in *BatchUpdateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error)
		BatchDeleteCasbinRules(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// 权限验证
		CheckPermission(ctx context.Context, in *PermissionCheckReq, opts ...grpc.CallOption) (*PermissionCheckResp, error)
		BatchCheckPermission(ctx context.Context, in *BatchPermissionCheckReq, opts ...grpc.CallOption) (*BatchPermissionCheckResp, error)
		// 权限查询
		GetUserPermissionSummary(ctx context.Context, in *GetUserPermissionSummaryReq, opts ...grpc.CallOption) (*GetUserPermissionSummaryResp, error)
		// 规则验证
		ValidateCasbinRule(ctx context.Context, in *ValidateCasbinRuleReq, opts ...grpc.CallOption) (*ValidateCasbinRuleResp, error)
		// 系统管理
		SyncCasbinRules(ctx context.Context, in *SyncCasbinRulesReq, opts ...grpc.CallOption) (*SyncCasbinRulesResp, error)
		RefreshCasbinCache(ctx context.Context, in *RefreshCasbinCacheReq, opts ...grpc.CallOption) (*RefreshCasbinCacheResp, error)
		// Configuration management
		CreateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetConfigurationList(ctx context.Context, in *ConfigurationListReq, opts ...grpc.CallOption) (*ConfigurationListResp, error)
		GetConfigurationById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ConfigurationInfo, error)
		DeleteConfiguration(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		RefreshConfigurationCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// Department management
		CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error)
		GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error)
		DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		InitDeptDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// Dictionary management
		CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error)
		GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error)
		DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// DictionaryDetail management
		CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error)
		GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error)
		DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetDictionaryDetailByDictionaryName(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*DictionaryDetailListResp, error)
		CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error)
		GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error)
		GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error)
		// OauthProvider management
		CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
		GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
		DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
		OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error)
		// OAuth Account Binding management
		CreateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetOauthAccountList(ctx context.Context, in *OauthAccountListReq, opts ...grpc.CallOption) (*OauthAccountListResp, error)
		GetOauthAccountById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthAccountInfo, error)
		DeleteOauthAccount(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		BindOauthAccount(ctx context.Context, in *BindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error)
		UnbindOauthAccount(ctx context.Context, in *UnbindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetUserOauthAccounts(ctx context.Context, in *GetUserOauthAccountsReq, opts ...grpc.CallOption) (*GetUserOauthAccountsResp, error)
		// OAuth Session management
		CreateOauthSession(ctx context.Context, in *CreateOauthSessionReq, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateOauthSession(ctx context.Context, in *UpdateOauthSessionReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetOauthSessionByState(ctx context.Context, in *GetOauthSessionByStateReq, opts ...grpc.CallOption) (*OauthSessionInfo, error)
		DeleteOauthSession(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		// Position management
		CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error)
		GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error)
		DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// Role management
		CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
		GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error)
		DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		InitRoleDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		AssignRoleDataScope(ctx context.Context, in *RoleDataScopeReq, opts ...grpc.CallOption) (*BaseResp, error)
		CancelAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error)
		AddAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error)
		ChangeRoleStatus(ctx context.Context, in *RoleStatusChangeParam, opts ...grpc.CallOption) (*BaseResp, error)
		// Tenant management
		CreateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetTenantList(ctx context.Context, in *TenantListReq, opts ...grpc.CallOption) (*TenantListResp, error)
		GetTenantById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TenantInfo, error)
		GetTenantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*TenantInfo, error)
		DeleteTenant(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateTenantStatus(ctx context.Context, in *TenantStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
		InitTenant(ctx context.Context, in *TenantInitReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetPublicTenantList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicTenantListResp, error)
		// Token management
		CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
		GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
		BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
		// User management
		CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
		GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error)
		GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error)
		DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...grpc.CallOption) (*BaseResp, error)
		UnallocatedList(ctx context.Context, in *RoleUnallocatedListReq, opts ...grpc.CallOption) (*UserListResp, error)
	}

	defaultCore struct {
		cli zrpc.Client
	}
)

func NewCore(cli zrpc.Client) Core {
	return &defaultCore{
		cli: cli,
	}
}

// API management
func (m *defaultCore) CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateApi(ctx, in, opts...)
}

func (m *defaultCore) UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateApi(ctx, in, opts...)
}

func (m *defaultCore) GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetApiList(ctx, in, opts...)
}

func (m *defaultCore) GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetApiById(ctx, in, opts...)
}

func (m *defaultCore) DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteApi(ctx, in, opts...)
}

// AuditLog management
func (m *defaultCore) CreateAuditLog(ctx context.Context, in *AuditLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateAuditLog(ctx, in, opts...)
}

func (m *defaultCore) GetAuditLogList(ctx context.Context, in *AuditLogListReq, opts ...grpc.CallOption) (*AuditLogListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetAuditLogList(ctx, in, opts...)
}

func (m *defaultCore) GetAuditLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*AuditLogInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetAuditLogById(ctx, in, opts...)
}

func (m *defaultCore) DeleteAuditLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteAuditLog(ctx, in, opts...)
}

func (m *defaultCore) GetAuditLogStats(ctx context.Context, in *AuditLogStatsReq, opts ...grpc.CallOption) (*AuditLogStatsResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetAuditLogStats(ctx, in, opts...)
}

func (m *defaultCore) GetMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleMenuAuthorityResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetMenuAuthority(ctx, in, opts...)
}

func (m *defaultCore) CreateOrUpdateMenuAuthority(ctx context.Context, in *RoleMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateOrUpdateMenuAuthority(ctx, in, opts...)
}

func (m *defaultCore) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

// 权限规则管理
func (m *defaultCore) CreateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateCasbinRule(ctx, in, opts...)
}

func (m *defaultCore) UpdateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateCasbinRule(ctx, in, opts...)
}

func (m *defaultCore) DeleteCasbinRule(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteCasbinRule(ctx, in, opts...)
}

func (m *defaultCore) GetCasbinRuleList(ctx context.Context, in *CasbinRuleListReq, opts ...grpc.CallOption) (*CasbinRuleListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetCasbinRuleList(ctx, in, opts...)
}

func (m *defaultCore) GetCasbinRuleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CasbinRuleInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetCasbinRuleById(ctx, in, opts...)
}

// 批量操作
func (m *defaultCore) BatchCreateCasbinRules(ctx context.Context, in *BatchCreateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.BatchCreateCasbinRules(ctx, in, opts...)
}

func (m *defaultCore) BatchUpdateCasbinRules(ctx context.Context, in *BatchUpdateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.BatchUpdateCasbinRules(ctx, in, opts...)
}

func (m *defaultCore) BatchDeleteCasbinRules(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.BatchDeleteCasbinRules(ctx, in, opts...)
}

// 权限验证
func (m *defaultCore) CheckPermission(ctx context.Context, in *PermissionCheckReq, opts ...grpc.CallOption) (*PermissionCheckResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CheckPermission(ctx, in, opts...)
}

func (m *defaultCore) BatchCheckPermission(ctx context.Context, in *BatchPermissionCheckReq, opts ...grpc.CallOption) (*BatchPermissionCheckResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.BatchCheckPermission(ctx, in, opts...)
}

// 权限查询
func (m *defaultCore) GetUserPermissionSummary(ctx context.Context, in *GetUserPermissionSummaryReq, opts ...grpc.CallOption) (*GetUserPermissionSummaryResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetUserPermissionSummary(ctx, in, opts...)
}

// 规则验证
func (m *defaultCore) ValidateCasbinRule(ctx context.Context, in *ValidateCasbinRuleReq, opts ...grpc.CallOption) (*ValidateCasbinRuleResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.ValidateCasbinRule(ctx, in, opts...)
}

// 系统管理
func (m *defaultCore) SyncCasbinRules(ctx context.Context, in *SyncCasbinRulesReq, opts ...grpc.CallOption) (*SyncCasbinRulesResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.SyncCasbinRules(ctx, in, opts...)
}

func (m *defaultCore) RefreshCasbinCache(ctx context.Context, in *RefreshCasbinCacheReq, opts ...grpc.CallOption) (*RefreshCasbinCacheResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.RefreshCasbinCache(ctx, in, opts...)
}

// Configuration management
func (m *defaultCore) CreateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateConfiguration(ctx, in, opts...)
}

func (m *defaultCore) UpdateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateConfiguration(ctx, in, opts...)
}

func (m *defaultCore) GetConfigurationList(ctx context.Context, in *ConfigurationListReq, opts ...grpc.CallOption) (*ConfigurationListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetConfigurationList(ctx, in, opts...)
}

func (m *defaultCore) GetConfigurationById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ConfigurationInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetConfigurationById(ctx, in, opts...)
}

func (m *defaultCore) DeleteConfiguration(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteConfiguration(ctx, in, opts...)
}

func (m *defaultCore) RefreshConfigurationCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.RefreshConfigurationCache(ctx, in, opts...)
}

// Department management
func (m *defaultCore) CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateDepartment(ctx, in, opts...)
}

func (m *defaultCore) UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateDepartment(ctx, in, opts...)
}

func (m *defaultCore) GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetDepartmentList(ctx, in, opts...)
}

func (m *defaultCore) GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetDepartmentById(ctx, in, opts...)
}

func (m *defaultCore) DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteDepartment(ctx, in, opts...)
}

func (m *defaultCore) InitDeptDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.InitDeptDataPermToRedis(ctx, in, opts...)
}

// Dictionary management
func (m *defaultCore) CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateDictionary(ctx, in, opts...)
}

func (m *defaultCore) UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateDictionary(ctx, in, opts...)
}

func (m *defaultCore) GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetDictionaryList(ctx, in, opts...)
}

func (m *defaultCore) GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetDictionaryById(ctx, in, opts...)
}

func (m *defaultCore) DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteDictionary(ctx, in, opts...)
}

// DictionaryDetail management
func (m *defaultCore) CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateDictionaryDetail(ctx, in, opts...)
}

func (m *defaultCore) UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateDictionaryDetail(ctx, in, opts...)
}

func (m *defaultCore) GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetDictionaryDetailList(ctx, in, opts...)
}

func (m *defaultCore) GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetDictionaryDetailById(ctx, in, opts...)
}

func (m *defaultCore) DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteDictionaryDetail(ctx, in, opts...)
}

func (m *defaultCore) GetDictionaryDetailByDictionaryName(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*DictionaryDetailListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetDictionaryDetailByDictionaryName(ctx, in, opts...)
}

func (m *defaultCore) CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateMenu(ctx, in, opts...)
}

func (m *defaultCore) UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateMenu(ctx, in, opts...)
}

func (m *defaultCore) DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteMenu(ctx, in, opts...)
}

func (m *defaultCore) GetMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetMenu(ctx, in, opts...)
}

func (m *defaultCore) GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetMenuListByRole(ctx, in, opts...)
}

func (m *defaultCore) GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetMenuList(ctx, in, opts...)
}

// OauthProvider management
func (m *defaultCore) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateOauthProvider(ctx, in, opts...)
}

func (m *defaultCore) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateOauthProvider(ctx, in, opts...)
}

func (m *defaultCore) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetOauthProviderList(ctx, in, opts...)
}

func (m *defaultCore) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetOauthProviderById(ctx, in, opts...)
}

func (m *defaultCore) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteOauthProvider(ctx, in, opts...)
}

func (m *defaultCore) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

func (m *defaultCore) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.OauthCallback(ctx, in, opts...)
}

// OAuth Account Binding management
func (m *defaultCore) CreateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateOauthAccount(ctx, in, opts...)
}

func (m *defaultCore) UpdateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateOauthAccount(ctx, in, opts...)
}

func (m *defaultCore) GetOauthAccountList(ctx context.Context, in *OauthAccountListReq, opts ...grpc.CallOption) (*OauthAccountListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetOauthAccountList(ctx, in, opts...)
}

func (m *defaultCore) GetOauthAccountById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthAccountInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetOauthAccountById(ctx, in, opts...)
}

func (m *defaultCore) DeleteOauthAccount(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteOauthAccount(ctx, in, opts...)
}

func (m *defaultCore) BindOauthAccount(ctx context.Context, in *BindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.BindOauthAccount(ctx, in, opts...)
}

func (m *defaultCore) UnbindOauthAccount(ctx context.Context, in *UnbindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UnbindOauthAccount(ctx, in, opts...)
}

func (m *defaultCore) GetUserOauthAccounts(ctx context.Context, in *GetUserOauthAccountsReq, opts ...grpc.CallOption) (*GetUserOauthAccountsResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetUserOauthAccounts(ctx, in, opts...)
}

// OAuth Session management
func (m *defaultCore) CreateOauthSession(ctx context.Context, in *CreateOauthSessionReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateOauthSession(ctx, in, opts...)
}

func (m *defaultCore) UpdateOauthSession(ctx context.Context, in *UpdateOauthSessionReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateOauthSession(ctx, in, opts...)
}

func (m *defaultCore) GetOauthSessionByState(ctx context.Context, in *GetOauthSessionByStateReq, opts ...grpc.CallOption) (*OauthSessionInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetOauthSessionByState(ctx, in, opts...)
}

func (m *defaultCore) DeleteOauthSession(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteOauthSession(ctx, in, opts...)
}

// Position management
func (m *defaultCore) CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreatePosition(ctx, in, opts...)
}

func (m *defaultCore) UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdatePosition(ctx, in, opts...)
}

func (m *defaultCore) GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetPositionList(ctx, in, opts...)
}

func (m *defaultCore) GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetPositionById(ctx, in, opts...)
}

func (m *defaultCore) DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeletePosition(ctx, in, opts...)
}

// Role management
func (m *defaultCore) CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

func (m *defaultCore) UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

func (m *defaultCore) GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetRoleList(ctx, in, opts...)
}

func (m *defaultCore) GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetRoleById(ctx, in, opts...)
}

func (m *defaultCore) DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteRole(ctx, in, opts...)
}

func (m *defaultCore) InitRoleDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.InitRoleDataPermToRedis(ctx, in, opts...)
}

func (m *defaultCore) AssignRoleDataScope(ctx context.Context, in *RoleDataScopeReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.AssignRoleDataScope(ctx, in, opts...)
}

func (m *defaultCore) CancelAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CancelAuth(ctx, in, opts...)
}

func (m *defaultCore) AddAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.AddAuth(ctx, in, opts...)
}

func (m *defaultCore) ChangeRoleStatus(ctx context.Context, in *RoleStatusChangeParam, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.ChangeRoleStatus(ctx, in, opts...)
}

// Tenant management
func (m *defaultCore) CreateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateTenant(ctx, in, opts...)
}

func (m *defaultCore) UpdateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateTenant(ctx, in, opts...)
}

func (m *defaultCore) GetTenantList(ctx context.Context, in *TenantListReq, opts ...grpc.CallOption) (*TenantListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetTenantList(ctx, in, opts...)
}

func (m *defaultCore) GetTenantById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TenantInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetTenantById(ctx, in, opts...)
}

func (m *defaultCore) GetTenantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*TenantInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetTenantByCode(ctx, in, opts...)
}

func (m *defaultCore) DeleteTenant(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteTenant(ctx, in, opts...)
}

func (m *defaultCore) UpdateTenantStatus(ctx context.Context, in *TenantStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateTenantStatus(ctx, in, opts...)
}

func (m *defaultCore) InitTenant(ctx context.Context, in *TenantInitReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.InitTenant(ctx, in, opts...)
}

func (m *defaultCore) GetPublicTenantList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicTenantListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetPublicTenantList(ctx, in, opts...)
}

// Token management
func (m *defaultCore) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateToken(ctx, in, opts...)
}

func (m *defaultCore) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteToken(ctx, in, opts...)
}

func (m *defaultCore) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetTokenList(ctx, in, opts...)
}

func (m *defaultCore) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetTokenById(ctx, in, opts...)
}

func (m *defaultCore) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.BlockUserAllToken(ctx, in, opts...)
}

func (m *defaultCore) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateToken(ctx, in, opts...)
}

// User management
func (m *defaultCore) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultCore) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultCore) GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

func (m *defaultCore) GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultCore) GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.GetUserByUsername(ctx, in, opts...)
}

func (m *defaultCore) DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultCore) ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.ResetPwd(ctx, in, opts...)
}

func (m *defaultCore) UnallocatedList(ctx context.Context, in *RoleUnallocatedListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.UnallocatedList(ctx, in, opts...)
}
