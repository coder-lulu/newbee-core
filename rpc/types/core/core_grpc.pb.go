// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Core_CreateApi_FullMethodName                           = "/core.Core/createApi"
	Core_UpdateApi_FullMethodName                           = "/core.Core/updateApi"
	Core_GetApiList_FullMethodName                          = "/core.Core/getApiList"
	Core_GetApiById_FullMethodName                          = "/core.Core/getApiById"
	Core_DeleteApi_FullMethodName                           = "/core.Core/deleteApi"
	Core_CreateAuditLog_FullMethodName                      = "/core.Core/createAuditLog"
	Core_GetAuditLogList_FullMethodName                     = "/core.Core/getAuditLogList"
	Core_GetAuditLogById_FullMethodName                     = "/core.Core/getAuditLogById"
	Core_DeleteAuditLog_FullMethodName                      = "/core.Core/deleteAuditLog"
	Core_GetAuditLogStats_FullMethodName                    = "/core.Core/getAuditLogStats"
	Core_GetMenuAuthority_FullMethodName                    = "/core.Core/getMenuAuthority"
	Core_CreateOrUpdateMenuAuthority_FullMethodName         = "/core.Core/createOrUpdateMenuAuthority"
	Core_InitDatabase_FullMethodName                        = "/core.Core/initDatabase"
	Core_CreateCasbinRule_FullMethodName                    = "/core.Core/createCasbinRule"
	Core_UpdateCasbinRule_FullMethodName                    = "/core.Core/updateCasbinRule"
	Core_DeleteCasbinRule_FullMethodName                    = "/core.Core/deleteCasbinRule"
	Core_GetCasbinRuleList_FullMethodName                   = "/core.Core/getCasbinRuleList"
	Core_GetCasbinRuleById_FullMethodName                   = "/core.Core/getCasbinRuleById"
	Core_BatchCreateCasbinRules_FullMethodName              = "/core.Core/batchCreateCasbinRules"
	Core_BatchUpdateCasbinRules_FullMethodName              = "/core.Core/batchUpdateCasbinRules"
	Core_BatchDeleteCasbinRules_FullMethodName              = "/core.Core/batchDeleteCasbinRules"
	Core_CheckPermission_FullMethodName                     = "/core.Core/checkPermission"
	Core_BatchCheckPermission_FullMethodName                = "/core.Core/batchCheckPermission"
	Core_GetUserPermissionSummary_FullMethodName            = "/core.Core/getUserPermissionSummary"
	Core_ValidateCasbinRule_FullMethodName                  = "/core.Core/validateCasbinRule"
	Core_SyncCasbinRules_FullMethodName                     = "/core.Core/syncCasbinRules"
	Core_RefreshCasbinCache_FullMethodName                  = "/core.Core/refreshCasbinCache"
	Core_CreateConfiguration_FullMethodName                 = "/core.Core/createConfiguration"
	Core_UpdateConfiguration_FullMethodName                 = "/core.Core/updateConfiguration"
	Core_GetConfigurationList_FullMethodName                = "/core.Core/getConfigurationList"
	Core_GetConfigurationById_FullMethodName                = "/core.Core/getConfigurationById"
	Core_DeleteConfiguration_FullMethodName                 = "/core.Core/deleteConfiguration"
	Core_RefreshConfigurationCache_FullMethodName           = "/core.Core/refreshConfigurationCache"
	Core_CreateDepartment_FullMethodName                    = "/core.Core/createDepartment"
	Core_UpdateDepartment_FullMethodName                    = "/core.Core/updateDepartment"
	Core_GetDepartmentList_FullMethodName                   = "/core.Core/getDepartmentList"
	Core_GetDepartmentById_FullMethodName                   = "/core.Core/getDepartmentById"
	Core_DeleteDepartment_FullMethodName                    = "/core.Core/deleteDepartment"
	Core_InitDeptDataPermToRedis_FullMethodName             = "/core.Core/initDeptDataPermToRedis"
	Core_CreateDictionary_FullMethodName                    = "/core.Core/createDictionary"
	Core_UpdateDictionary_FullMethodName                    = "/core.Core/updateDictionary"
	Core_GetDictionaryList_FullMethodName                   = "/core.Core/getDictionaryList"
	Core_GetDictionaryById_FullMethodName                   = "/core.Core/getDictionaryById"
	Core_DeleteDictionary_FullMethodName                    = "/core.Core/deleteDictionary"
	Core_CreateDictionaryDetail_FullMethodName              = "/core.Core/createDictionaryDetail"
	Core_UpdateDictionaryDetail_FullMethodName              = "/core.Core/updateDictionaryDetail"
	Core_GetDictionaryDetailList_FullMethodName             = "/core.Core/getDictionaryDetailList"
	Core_GetDictionaryDetailById_FullMethodName             = "/core.Core/getDictionaryDetailById"
	Core_DeleteDictionaryDetail_FullMethodName              = "/core.Core/deleteDictionaryDetail"
	Core_GetDictionaryDetailByDictionaryName_FullMethodName = "/core.Core/getDictionaryDetailByDictionaryName"
	Core_CreateMenu_FullMethodName                          = "/core.Core/createMenu"
	Core_UpdateMenu_FullMethodName                          = "/core.Core/updateMenu"
	Core_DeleteMenu_FullMethodName                          = "/core.Core/deleteMenu"
	Core_GetMenu_FullMethodName                             = "/core.Core/getMenu"
	Core_GetMenuListByRole_FullMethodName                   = "/core.Core/getMenuListByRole"
	Core_GetMenuList_FullMethodName                         = "/core.Core/getMenuList"
	Core_CreateOauthProvider_FullMethodName                 = "/core.Core/createOauthProvider"
	Core_UpdateOauthProvider_FullMethodName                 = "/core.Core/updateOauthProvider"
	Core_GetOauthProviderList_FullMethodName                = "/core.Core/getOauthProviderList"
	Core_GetOauthProviderById_FullMethodName                = "/core.Core/getOauthProviderById"
	Core_DeleteOauthProvider_FullMethodName                 = "/core.Core/deleteOauthProvider"
	Core_OauthLogin_FullMethodName                          = "/core.Core/oauthLogin"
	Core_OauthCallback_FullMethodName                       = "/core.Core/oauthCallback"
	Core_CreateOauthAccount_FullMethodName                  = "/core.Core/createOauthAccount"
	Core_UpdateOauthAccount_FullMethodName                  = "/core.Core/updateOauthAccount"
	Core_GetOauthAccountList_FullMethodName                 = "/core.Core/getOauthAccountList"
	Core_GetOauthAccountById_FullMethodName                 = "/core.Core/getOauthAccountById"
	Core_DeleteOauthAccount_FullMethodName                  = "/core.Core/deleteOauthAccount"
	Core_BindOauthAccount_FullMethodName                    = "/core.Core/bindOauthAccount"
	Core_UnbindOauthAccount_FullMethodName                  = "/core.Core/unbindOauthAccount"
	Core_GetUserOauthAccounts_FullMethodName                = "/core.Core/getUserOauthAccounts"
	Core_CreateOauthSession_FullMethodName                  = "/core.Core/createOauthSession"
	Core_UpdateOauthSession_FullMethodName                  = "/core.Core/updateOauthSession"
	Core_GetOauthSessionByState_FullMethodName              = "/core.Core/getOauthSessionByState"
	Core_DeleteOauthSession_FullMethodName                  = "/core.Core/deleteOauthSession"
	Core_CreatePosition_FullMethodName                      = "/core.Core/createPosition"
	Core_UpdatePosition_FullMethodName                      = "/core.Core/updatePosition"
	Core_GetPositionList_FullMethodName                     = "/core.Core/getPositionList"
	Core_GetPositionById_FullMethodName                     = "/core.Core/getPositionById"
	Core_DeletePosition_FullMethodName                      = "/core.Core/deletePosition"
	Core_CreateRole_FullMethodName                          = "/core.Core/createRole"
	Core_UpdateRole_FullMethodName                          = "/core.Core/updateRole"
	Core_GetRoleList_FullMethodName                         = "/core.Core/getRoleList"
	Core_GetRoleById_FullMethodName                         = "/core.Core/getRoleById"
	Core_DeleteRole_FullMethodName                          = "/core.Core/deleteRole"
	Core_InitRoleDataPermToRedis_FullMethodName             = "/core.Core/initRoleDataPermToRedis"
	Core_AssignRoleDataScope_FullMethodName                 = "/core.Core/assignRoleDataScope"
	Core_CancelAuth_FullMethodName                          = "/core.Core/cancelAuth"
	Core_AddAuth_FullMethodName                             = "/core.Core/addAuth"
	Core_ChangeRoleStatus_FullMethodName                    = "/core.Core/changeRoleStatus"
	Core_CreateTenant_FullMethodName                        = "/core.Core/createTenant"
	Core_UpdateTenant_FullMethodName                        = "/core.Core/updateTenant"
	Core_GetTenantList_FullMethodName                       = "/core.Core/getTenantList"
	Core_GetTenantById_FullMethodName                       = "/core.Core/getTenantById"
	Core_GetTenantByCode_FullMethodName                     = "/core.Core/getTenantByCode"
	Core_DeleteTenant_FullMethodName                        = "/core.Core/deleteTenant"
	Core_UpdateTenantStatus_FullMethodName                  = "/core.Core/updateTenantStatus"
	Core_InitTenant_FullMethodName                          = "/core.Core/initTenant"
	Core_GetPublicTenantList_FullMethodName                 = "/core.Core/getPublicTenantList"
	Core_CreateToken_FullMethodName                         = "/core.Core/createToken"
	Core_DeleteToken_FullMethodName                         = "/core.Core/deleteToken"
	Core_GetTokenList_FullMethodName                        = "/core.Core/getTokenList"
	Core_GetTokenById_FullMethodName                        = "/core.Core/getTokenById"
	Core_BlockUserAllToken_FullMethodName                   = "/core.Core/blockUserAllToken"
	Core_UpdateToken_FullMethodName                         = "/core.Core/updateToken"
	Core_CreateUser_FullMethodName                          = "/core.Core/createUser"
	Core_UpdateUser_FullMethodName                          = "/core.Core/updateUser"
	Core_GetUserList_FullMethodName                         = "/core.Core/getUserList"
	Core_GetUserById_FullMethodName                         = "/core.Core/getUserById"
	Core_GetUserByUsername_FullMethodName                   = "/core.Core/getUserByUsername"
	Core_DeleteUser_FullMethodName                          = "/core.Core/deleteUser"
	Core_ResetPwd_FullMethodName                            = "/core.Core/resetPwd"
	Core_UnallocatedList_FullMethodName                     = "/core.Core/unallocatedList"
)

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	//  API management
	//  group: api
	CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: api
	UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: api
	GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error)
	//  group: api
	GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error)
	//  group: api
	DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// AuditLog management
	// group: auditlog
	CreateAuditLog(ctx context.Context, in *AuditLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: auditlog
	GetAuditLogList(ctx context.Context, in *AuditLogListReq, opts ...grpc.CallOption) (*AuditLogListResp, error)
	// group: auditlog
	GetAuditLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*AuditLogInfo, error)
	// group: auditlog
	DeleteAuditLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: auditlog
	GetAuditLogStats(ctx context.Context, in *AuditLogStatsReq, opts ...grpc.CallOption) (*AuditLogStatsResp, error)
	//  group: authority
	GetMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleMenuAuthorityResp, error)
	//  group: authority
	CreateOrUpdateMenuAuthority(ctx context.Context, in *RoleMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	//  权限规则管理
	//  group: casbin
	CreateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: casbin
	UpdateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: casbin
	DeleteCasbinRule(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: casbin
	GetCasbinRuleList(ctx context.Context, in *CasbinRuleListReq, opts ...grpc.CallOption) (*CasbinRuleListResp, error)
	//  group: casbin
	GetCasbinRuleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CasbinRuleInfo, error)
	//  批量操作
	//  group: casbin
	BatchCreateCasbinRules(ctx context.Context, in *BatchCreateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: casbin
	BatchUpdateCasbinRules(ctx context.Context, in *BatchUpdateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: casbin
	BatchDeleteCasbinRules(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  权限验证
	//  group: casbin
	CheckPermission(ctx context.Context, in *PermissionCheckReq, opts ...grpc.CallOption) (*PermissionCheckResp, error)
	//  group: casbin
	BatchCheckPermission(ctx context.Context, in *BatchPermissionCheckReq, opts ...grpc.CallOption) (*BatchPermissionCheckResp, error)
	//  权限查询
	//  group: casbin
	GetUserPermissionSummary(ctx context.Context, in *GetUserPermissionSummaryReq, opts ...grpc.CallOption) (*GetUserPermissionSummaryResp, error)
	//  规则验证
	//  group: casbin
	ValidateCasbinRule(ctx context.Context, in *ValidateCasbinRuleReq, opts ...grpc.CallOption) (*ValidateCasbinRuleResp, error)
	//  系统管理
	//  group: casbin
	SyncCasbinRules(ctx context.Context, in *SyncCasbinRulesReq, opts ...grpc.CallOption) (*SyncCasbinRulesResp, error)
	//  group: casbin
	RefreshCasbinCache(ctx context.Context, in *RefreshCasbinCacheReq, opts ...grpc.CallOption) (*RefreshCasbinCacheResp, error)
	//  Configuration management
	//  group: configuration
	CreateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: configuration
	UpdateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: configuration
	GetConfigurationList(ctx context.Context, in *ConfigurationListReq, opts ...grpc.CallOption) (*ConfigurationListResp, error)
	//  group: configuration
	GetConfigurationById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ConfigurationInfo, error)
	//  group: configuration
	DeleteConfiguration(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: configuration
	RefreshConfigurationCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	//  Department management
	//  group: department
	CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: department
	UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: department
	GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error)
	//  group: department
	GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error)
	//  group: department
	DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: department
	InitDeptDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	//  Dictionary management
	//  group: dictionary
	CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: dictionary
	UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: dictionary
	GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error)
	//  group: dictionary
	GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error)
	//  group: dictionary
	DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  DictionaryDetail management
	//  group: dictionarydetail
	CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: dictionarydetail
	UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: dictionarydetail
	GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error)
	//  group: dictionarydetail
	GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error)
	//  group: dictionarydetail
	DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: dictionarydetail
	GetDictionaryDetailByDictionaryName(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*DictionaryDetailListResp, error)
	//  group: menu
	CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: menu
	UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: menu
	DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: menu
	GetMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error)
	//  group: menu
	GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error)
	//  group: menu
	GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error)
	//  OauthProvider management
	//  group: oauthprovider
	CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: oauthprovider
	UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: oauthprovider
	GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
	//  group: oauthprovider
	GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
	//  group: oauthprovider
	DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: oauthprovider
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
	//  group: oauthprovider
	OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error)
	//  OAuth Account Binding management
	//  group: oauthaccount
	CreateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: oauthaccount
	UpdateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: oauthaccount
	GetOauthAccountList(ctx context.Context, in *OauthAccountListReq, opts ...grpc.CallOption) (*OauthAccountListResp, error)
	//  group: oauthaccount
	GetOauthAccountById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthAccountInfo, error)
	//  group: oauthaccount
	DeleteOauthAccount(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: oauthaccount
	BindOauthAccount(ctx context.Context, in *BindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: oauthaccount
	UnbindOauthAccount(ctx context.Context, in *UnbindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: oauthaccount
	GetUserOauthAccounts(ctx context.Context, in *GetUserOauthAccountsReq, opts ...grpc.CallOption) (*GetUserOauthAccountsResp, error)
	//  OAuth Session management
	//  group: oauthsession
	CreateOauthSession(ctx context.Context, in *CreateOauthSessionReq, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: oauthsession
	UpdateOauthSession(ctx context.Context, in *UpdateOauthSessionReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: oauthsession
	GetOauthSessionByState(ctx context.Context, in *GetOauthSessionByStateReq, opts ...grpc.CallOption) (*OauthSessionInfo, error)
	//  group: oauthsession
	DeleteOauthSession(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  Position management
	//  group: position
	CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: position
	UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: position
	GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error)
	//  group: position
	GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error)
	//  group: position
	DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  Role management
	//  group: role
	CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: role
	UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: role
	GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	//  group: role
	GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error)
	//  group: role
	DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: role
	InitRoleDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: role
	AssignRoleDataScope(ctx context.Context, in *RoleDataScopeReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: role
	CancelAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: role
	AddAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: role
	ChangeRoleStatus(ctx context.Context, in *RoleStatusChangeParam, opts ...grpc.CallOption) (*BaseResp, error)
	//  Tenant management
	//  group: tenant
	CreateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	//  group: tenant
	UpdateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: tenant
	GetTenantList(ctx context.Context, in *TenantListReq, opts ...grpc.CallOption) (*TenantListResp, error)
	//  group: tenant
	GetTenantById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TenantInfo, error)
	//  group: tenant
	GetTenantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*TenantInfo, error)
	//  group: tenant
	DeleteTenant(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: tenant
	UpdateTenantStatus(ctx context.Context, in *TenantStatusReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: tenant
	InitTenant(ctx context.Context, in *TenantInitReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: public
	GetPublicTenantList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicTenantListResp, error)
	//  Token management
	//  group: token
	CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	//  group: token
	DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: token
	GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
	//  group: token
	GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
	//  group: token
	BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: token
	UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  User management
	//  group: user
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	//  group: user
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: user
	GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	//  group: user
	GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error)
	//  group: user
	GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error)
	//  group: user
	DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: user
	ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...grpc.CallOption) (*BaseResp, error)
	//  group: user
	UnallocatedList(ctx context.Context, in *RoleUnallocatedListReq, opts ...grpc.CallOption) (*UserListResp, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiListResp)
	err := c.cc.Invoke(ctx, Core_GetApiList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiInfo)
	err := c.cc.Invoke(ctx, Core_GetApiById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateAuditLog(ctx context.Context, in *AuditLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Core_CreateAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetAuditLogList(ctx context.Context, in *AuditLogListReq, opts ...grpc.CallOption) (*AuditLogListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditLogListResp)
	err := c.cc.Invoke(ctx, Core_GetAuditLogList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetAuditLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*AuditLogInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditLogInfo)
	err := c.cc.Invoke(ctx, Core_GetAuditLogById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteAuditLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetAuditLogStats(ctx context.Context, in *AuditLogStatsReq, opts ...grpc.CallOption) (*AuditLogStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditLogStatsResp)
	err := c.cc.Invoke(ctx, Core_GetAuditLogStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleMenuAuthorityResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleMenuAuthorityResp)
	err := c.cc.Invoke(ctx, Core_GetMenuAuthority_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateOrUpdateMenuAuthority(ctx context.Context, in *RoleMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_CreateOrUpdateMenuAuthority_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_InitDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateCasbinRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateCasbinRule(ctx context.Context, in *CasbinRuleInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateCasbinRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteCasbinRule(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteCasbinRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetCasbinRuleList(ctx context.Context, in *CasbinRuleListReq, opts ...grpc.CallOption) (*CasbinRuleListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CasbinRuleListResp)
	err := c.cc.Invoke(ctx, Core_GetCasbinRuleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetCasbinRuleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CasbinRuleInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CasbinRuleInfo)
	err := c.cc.Invoke(ctx, Core_GetCasbinRuleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BatchCreateCasbinRules(ctx context.Context, in *BatchCreateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_BatchCreateCasbinRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BatchUpdateCasbinRules(ctx context.Context, in *BatchUpdateCasbinRulesReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_BatchUpdateCasbinRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BatchDeleteCasbinRules(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_BatchDeleteCasbinRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CheckPermission(ctx context.Context, in *PermissionCheckReq, opts ...grpc.CallOption) (*PermissionCheckResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionCheckResp)
	err := c.cc.Invoke(ctx, Core_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BatchCheckPermission(ctx context.Context, in *BatchPermissionCheckReq, opts ...grpc.CallOption) (*BatchPermissionCheckResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchPermissionCheckResp)
	err := c.cc.Invoke(ctx, Core_BatchCheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserPermissionSummary(ctx context.Context, in *GetUserPermissionSummaryReq, opts ...grpc.CallOption) (*GetUserPermissionSummaryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionSummaryResp)
	err := c.cc.Invoke(ctx, Core_GetUserPermissionSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ValidateCasbinRule(ctx context.Context, in *ValidateCasbinRuleReq, opts ...grpc.CallOption) (*ValidateCasbinRuleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateCasbinRuleResp)
	err := c.cc.Invoke(ctx, Core_ValidateCasbinRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SyncCasbinRules(ctx context.Context, in *SyncCasbinRulesReq, opts ...grpc.CallOption) (*SyncCasbinRulesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncCasbinRulesResp)
	err := c.cc.Invoke(ctx, Core_SyncCasbinRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RefreshCasbinCache(ctx context.Context, in *RefreshCasbinCacheReq, opts ...grpc.CallOption) (*RefreshCasbinCacheResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshCasbinCacheResp)
	err := c.cc.Invoke(ctx, Core_RefreshCasbinCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateConfiguration(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetConfigurationList(ctx context.Context, in *ConfigurationListReq, opts ...grpc.CallOption) (*ConfigurationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurationListResp)
	err := c.cc.Invoke(ctx, Core_GetConfigurationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetConfigurationById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ConfigurationInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurationInfo)
	err := c.cc.Invoke(ctx, Core_GetConfigurationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteConfiguration(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RefreshConfigurationCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_RefreshConfigurationCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentListResp)
	err := c.cc.Invoke(ctx, Core_GetDepartmentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentInfo)
	err := c.cc.Invoke(ctx, Core_GetDepartmentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) InitDeptDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_InitDeptDataPermToRedis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictionaryListResp)
	err := c.cc.Invoke(ctx, Core_GetDictionaryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictionaryInfo)
	err := c.cc.Invoke(ctx, Core_GetDictionaryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateDictionaryDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateDictionaryDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictionaryDetailListResp)
	err := c.cc.Invoke(ctx, Core_GetDictionaryDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictionaryDetailInfo)
	err := c.cc.Invoke(ctx, Core_GetDictionaryDetailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteDictionaryDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetDictionaryDetailByDictionaryName(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*DictionaryDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictionaryDetailListResp)
	err := c.cc.Invoke(ctx, Core_GetDictionaryDetailByDictionaryName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuInfo)
	err := c.cc.Invoke(ctx, Core_GetMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuInfoList)
	err := c.cc.Invoke(ctx, Core_GetMenuListByRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuInfoList)
	err := c.cc.Invoke(ctx, Core_GetMenuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateOauthProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateOauthProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthProviderListResp)
	err := c.cc.Invoke(ctx, Core_GetOauthProviderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthProviderInfo)
	err := c.cc.Invoke(ctx, Core_GetOauthProviderById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteOauthProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthRedirectResp)
	err := c.cc.Invoke(ctx, Core_OauthLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, Core_OauthCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateOauthAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateOauthAccount(ctx context.Context, in *OauthAccountInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateOauthAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetOauthAccountList(ctx context.Context, in *OauthAccountListReq, opts ...grpc.CallOption) (*OauthAccountListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthAccountListResp)
	err := c.cc.Invoke(ctx, Core_GetOauthAccountList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetOauthAccountById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthAccountInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthAccountInfo)
	err := c.cc.Invoke(ctx, Core_GetOauthAccountById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteOauthAccount(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteOauthAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BindOauthAccount(ctx context.Context, in *BindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_BindOauthAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UnbindOauthAccount(ctx context.Context, in *UnbindOauthAccountReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UnbindOauthAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserOauthAccounts(ctx context.Context, in *GetUserOauthAccountsReq, opts ...grpc.CallOption) (*GetUserOauthAccountsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOauthAccountsResp)
	err := c.cc.Invoke(ctx, Core_GetUserOauthAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateOauthSession(ctx context.Context, in *CreateOauthSessionReq, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateOauthSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateOauthSession(ctx context.Context, in *UpdateOauthSessionReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateOauthSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetOauthSessionByState(ctx context.Context, in *GetOauthSessionByStateReq, opts ...grpc.CallOption) (*OauthSessionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthSessionInfo)
	err := c.cc.Invoke(ctx, Core_GetOauthSessionByState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteOauthSession(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteOauthSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionListResp)
	err := c.cc.Invoke(ctx, Core_GetPositionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionInfo)
	err := c.cc.Invoke(ctx, Core_GetPositionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeletePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, Core_GetRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleInfo)
	err := c.cc.Invoke(ctx, Core_GetRoleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) InitRoleDataPermToRedis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_InitRoleDataPermToRedis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) AssignRoleDataScope(ctx context.Context, in *RoleDataScopeReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_AssignRoleDataScope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CancelAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_CancelAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) AddAuth(ctx context.Context, in *RoleAuthReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_AddAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ChangeRoleStatus(ctx context.Context, in *RoleStatusChangeParam, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_ChangeRoleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Core_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateTenant(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetTenantList(ctx context.Context, in *TenantListReq, opts ...grpc.CallOption) (*TenantListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantListResp)
	err := c.cc.Invoke(ctx, Core_GetTenantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetTenantById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TenantInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantInfo)
	err := c.cc.Invoke(ctx, Core_GetTenantById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetTenantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*TenantInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantInfo)
	err := c.cc.Invoke(ctx, Core_GetTenantByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteTenant(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateTenantStatus(ctx context.Context, in *TenantStatusReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateTenantStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) InitTenant(ctx context.Context, in *TenantInitReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_InitTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetPublicTenantList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicTenantListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicTenantListResp)
	err := c.cc.Invoke(ctx, Core_GetPublicTenantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Core_CreateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenListResp)
	err := c.cc.Invoke(ctx, Core_GetTokenList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, Core_GetTokenById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_BlockUserAllToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Core_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, Core_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, Core_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, Core_GetUserByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...grpc.CallOption) (*BaseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_ResetPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UnallocatedList(ctx context.Context, in *RoleUnallocatedListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, Core_UnallocatedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility.
type CoreServer interface {
	//  API management
	//  group: api
	CreateApi(context.Context, *ApiInfo) (*BaseIDResp, error)
	//  group: api
	UpdateApi(context.Context, *ApiInfo) (*BaseResp, error)
	//  group: api
	GetApiList(context.Context, *ApiListReq) (*ApiListResp, error)
	//  group: api
	GetApiById(context.Context, *IDReq) (*ApiInfo, error)
	//  group: api
	DeleteApi(context.Context, *IDsReq) (*BaseResp, error)
	// AuditLog management
	// group: auditlog
	CreateAuditLog(context.Context, *AuditLogInfo) (*BaseUUIDResp, error)
	// group: auditlog
	GetAuditLogList(context.Context, *AuditLogListReq) (*AuditLogListResp, error)
	// group: auditlog
	GetAuditLogById(context.Context, *UUIDReq) (*AuditLogInfo, error)
	// group: auditlog
	DeleteAuditLog(context.Context, *UUIDsReq) (*BaseResp, error)
	// group: auditlog
	GetAuditLogStats(context.Context, *AuditLogStatsReq) (*AuditLogStatsResp, error)
	//  group: authority
	GetMenuAuthority(context.Context, *IDReq) (*RoleMenuAuthorityResp, error)
	//  group: authority
	CreateOrUpdateMenuAuthority(context.Context, *RoleMenuAuthorityReq) (*BaseResp, error)
	//  group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	//  权限规则管理
	//  group: casbin
	CreateCasbinRule(context.Context, *CasbinRuleInfo) (*BaseIDResp, error)
	//  group: casbin
	UpdateCasbinRule(context.Context, *CasbinRuleInfo) (*BaseResp, error)
	//  group: casbin
	DeleteCasbinRule(context.Context, *IDsReq) (*BaseResp, error)
	//  group: casbin
	GetCasbinRuleList(context.Context, *CasbinRuleListReq) (*CasbinRuleListResp, error)
	//  group: casbin
	GetCasbinRuleById(context.Context, *IDReq) (*CasbinRuleInfo, error)
	//  批量操作
	//  group: casbin
	BatchCreateCasbinRules(context.Context, *BatchCreateCasbinRulesReq) (*BaseResp, error)
	//  group: casbin
	BatchUpdateCasbinRules(context.Context, *BatchUpdateCasbinRulesReq) (*BaseResp, error)
	//  group: casbin
	BatchDeleteCasbinRules(context.Context, *IDsReq) (*BaseResp, error)
	//  权限验证
	//  group: casbin
	CheckPermission(context.Context, *PermissionCheckReq) (*PermissionCheckResp, error)
	//  group: casbin
	BatchCheckPermission(context.Context, *BatchPermissionCheckReq) (*BatchPermissionCheckResp, error)
	//  权限查询
	//  group: casbin
	GetUserPermissionSummary(context.Context, *GetUserPermissionSummaryReq) (*GetUserPermissionSummaryResp, error)
	//  规则验证
	//  group: casbin
	ValidateCasbinRule(context.Context, *ValidateCasbinRuleReq) (*ValidateCasbinRuleResp, error)
	//  系统管理
	//  group: casbin
	SyncCasbinRules(context.Context, *SyncCasbinRulesReq) (*SyncCasbinRulesResp, error)
	//  group: casbin
	RefreshCasbinCache(context.Context, *RefreshCasbinCacheReq) (*RefreshCasbinCacheResp, error)
	//  Configuration management
	//  group: configuration
	CreateConfiguration(context.Context, *ConfigurationInfo) (*BaseIDResp, error)
	//  group: configuration
	UpdateConfiguration(context.Context, *ConfigurationInfo) (*BaseResp, error)
	//  group: configuration
	GetConfigurationList(context.Context, *ConfigurationListReq) (*ConfigurationListResp, error)
	//  group: configuration
	GetConfigurationById(context.Context, *IDReq) (*ConfigurationInfo, error)
	//  group: configuration
	DeleteConfiguration(context.Context, *IDsReq) (*BaseResp, error)
	//  group: configuration
	RefreshConfigurationCache(context.Context, *Empty) (*BaseResp, error)
	//  Department management
	//  group: department
	CreateDepartment(context.Context, *DepartmentInfo) (*BaseIDResp, error)
	//  group: department
	UpdateDepartment(context.Context, *DepartmentInfo) (*BaseResp, error)
	//  group: department
	GetDepartmentList(context.Context, *DepartmentListReq) (*DepartmentListResp, error)
	//  group: department
	GetDepartmentById(context.Context, *IDReq) (*DepartmentInfo, error)
	//  group: department
	DeleteDepartment(context.Context, *IDsReq) (*BaseResp, error)
	//  group: department
	InitDeptDataPermToRedis(context.Context, *Empty) (*BaseResp, error)
	//  Dictionary management
	//  group: dictionary
	CreateDictionary(context.Context, *DictionaryInfo) (*BaseIDResp, error)
	//  group: dictionary
	UpdateDictionary(context.Context, *DictionaryInfo) (*BaseResp, error)
	//  group: dictionary
	GetDictionaryList(context.Context, *DictionaryListReq) (*DictionaryListResp, error)
	//  group: dictionary
	GetDictionaryById(context.Context, *IDReq) (*DictionaryInfo, error)
	//  group: dictionary
	DeleteDictionary(context.Context, *IDsReq) (*BaseResp, error)
	//  DictionaryDetail management
	//  group: dictionarydetail
	CreateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseIDResp, error)
	//  group: dictionarydetail
	UpdateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseResp, error)
	//  group: dictionarydetail
	GetDictionaryDetailList(context.Context, *DictionaryDetailListReq) (*DictionaryDetailListResp, error)
	//  group: dictionarydetail
	GetDictionaryDetailById(context.Context, *IDReq) (*DictionaryDetailInfo, error)
	//  group: dictionarydetail
	DeleteDictionaryDetail(context.Context, *IDsReq) (*BaseResp, error)
	//  group: dictionarydetail
	GetDictionaryDetailByDictionaryName(context.Context, *BaseMsg) (*DictionaryDetailListResp, error)
	//  group: menu
	CreateMenu(context.Context, *MenuInfo) (*BaseIDResp, error)
	//  group: menu
	UpdateMenu(context.Context, *MenuInfo) (*BaseResp, error)
	//  group: menu
	DeleteMenu(context.Context, *IDReq) (*BaseResp, error)
	//  group: menu
	GetMenu(context.Context, *IDReq) (*MenuInfo, error)
	//  group: menu
	GetMenuListByRole(context.Context, *BaseMsg) (*MenuInfoList, error)
	//  group: menu
	GetMenuList(context.Context, *PageInfoReq) (*MenuInfoList, error)
	//  OauthProvider management
	//  group: oauthprovider
	CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error)
	//  group: oauthprovider
	UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error)
	//  group: oauthprovider
	GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error)
	//  group: oauthprovider
	GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error)
	//  group: oauthprovider
	DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error)
	//  group: oauthprovider
	OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error)
	//  group: oauthprovider
	OauthCallback(context.Context, *CallbackReq) (*UserInfo, error)
	//  OAuth Account Binding management
	//  group: oauthaccount
	CreateOauthAccount(context.Context, *OauthAccountInfo) (*BaseIDResp, error)
	//  group: oauthaccount
	UpdateOauthAccount(context.Context, *OauthAccountInfo) (*BaseResp, error)
	//  group: oauthaccount
	GetOauthAccountList(context.Context, *OauthAccountListReq) (*OauthAccountListResp, error)
	//  group: oauthaccount
	GetOauthAccountById(context.Context, *IDReq) (*OauthAccountInfo, error)
	//  group: oauthaccount
	DeleteOauthAccount(context.Context, *IDsReq) (*BaseResp, error)
	//  group: oauthaccount
	BindOauthAccount(context.Context, *BindOauthAccountReq) (*BaseResp, error)
	//  group: oauthaccount
	UnbindOauthAccount(context.Context, *UnbindOauthAccountReq) (*BaseResp, error)
	//  group: oauthaccount
	GetUserOauthAccounts(context.Context, *GetUserOauthAccountsReq) (*GetUserOauthAccountsResp, error)
	//  OAuth Session management
	//  group: oauthsession
	CreateOauthSession(context.Context, *CreateOauthSessionReq) (*BaseIDResp, error)
	//  group: oauthsession
	UpdateOauthSession(context.Context, *UpdateOauthSessionReq) (*BaseResp, error)
	//  group: oauthsession
	GetOauthSessionByState(context.Context, *GetOauthSessionByStateReq) (*OauthSessionInfo, error)
	//  group: oauthsession
	DeleteOauthSession(context.Context, *IDReq) (*BaseResp, error)
	//  Position management
	//  group: position
	CreatePosition(context.Context, *PositionInfo) (*BaseIDResp, error)
	//  group: position
	UpdatePosition(context.Context, *PositionInfo) (*BaseResp, error)
	//  group: position
	GetPositionList(context.Context, *PositionListReq) (*PositionListResp, error)
	//  group: position
	GetPositionById(context.Context, *IDReq) (*PositionInfo, error)
	//  group: position
	DeletePosition(context.Context, *IDsReq) (*BaseResp, error)
	//  Role management
	//  group: role
	CreateRole(context.Context, *RoleInfo) (*BaseIDResp, error)
	//  group: role
	UpdateRole(context.Context, *RoleInfo) (*BaseResp, error)
	//  group: role
	GetRoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	//  group: role
	GetRoleById(context.Context, *IDReq) (*RoleInfo, error)
	//  group: role
	DeleteRole(context.Context, *IDsReq) (*BaseResp, error)
	//  group: role
	InitRoleDataPermToRedis(context.Context, *Empty) (*BaseResp, error)
	//  group: role
	AssignRoleDataScope(context.Context, *RoleDataScopeReq) (*BaseResp, error)
	//  group: role
	CancelAuth(context.Context, *RoleAuthReq) (*BaseResp, error)
	//  group: role
	AddAuth(context.Context, *RoleAuthReq) (*BaseResp, error)
	//  group: role
	ChangeRoleStatus(context.Context, *RoleStatusChangeParam) (*BaseResp, error)
	//  Tenant management
	//  group: tenant
	CreateTenant(context.Context, *TenantInfo) (*BaseIDResp, error)
	//  group: tenant
	UpdateTenant(context.Context, *TenantInfo) (*BaseResp, error)
	//  group: tenant
	GetTenantList(context.Context, *TenantListReq) (*TenantListResp, error)
	//  group: tenant
	GetTenantById(context.Context, *IDReq) (*TenantInfo, error)
	//  group: tenant
	GetTenantByCode(context.Context, *TenantCodeReq) (*TenantInfo, error)
	//  group: tenant
	DeleteTenant(context.Context, *IDsReq) (*BaseResp, error)
	//  group: tenant
	UpdateTenantStatus(context.Context, *TenantStatusReq) (*BaseResp, error)
	//  group: tenant
	InitTenant(context.Context, *TenantInitReq) (*BaseResp, error)
	//  group: public
	GetPublicTenantList(context.Context, *Empty) (*PublicTenantListResp, error)
	//  Token management
	//  group: token
	CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error)
	//  group: token
	DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error)
	//  group: token
	GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error)
	//  group: token
	GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error)
	//  group: token
	BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error)
	//  group: token
	UpdateToken(context.Context, *TokenInfo) (*BaseResp, error)
	//  User management
	//  group: user
	CreateUser(context.Context, *UserInfo) (*BaseUUIDResp, error)
	//  group: user
	UpdateUser(context.Context, *UserInfo) (*BaseResp, error)
	//  group: user
	GetUserList(context.Context, *UserListReq) (*UserListResp, error)
	//  group: user
	GetUserById(context.Context, *UUIDReq) (*UserInfo, error)
	//  group: user
	GetUserByUsername(context.Context, *UsernameReq) (*UserInfo, error)
	//  group: user
	DeleteUser(context.Context, *UUIDsReq) (*BaseResp, error)
	//  group: user
	ResetPwd(context.Context, *ResetPwdReq) (*BaseResp, error)
	//  group: user
	UnallocatedList(context.Context, *RoleUnallocatedListReq) (*UserListResp, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoreServer struct{}

func (UnimplementedCoreServer) CreateApi(context.Context, *ApiInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedCoreServer) UpdateApi(context.Context, *ApiInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedCoreServer) GetApiList(context.Context, *ApiListReq) (*ApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiList not implemented")
}
func (UnimplementedCoreServer) GetApiById(context.Context, *IDReq) (*ApiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiById not implemented")
}
func (UnimplementedCoreServer) DeleteApi(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedCoreServer) CreateAuditLog(context.Context, *AuditLogInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuditLog not implemented")
}
func (UnimplementedCoreServer) GetAuditLogList(context.Context, *AuditLogListReq) (*AuditLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogList not implemented")
}
func (UnimplementedCoreServer) GetAuditLogById(context.Context, *UUIDReq) (*AuditLogInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogById not implemented")
}
func (UnimplementedCoreServer) DeleteAuditLog(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuditLog not implemented")
}
func (UnimplementedCoreServer) GetAuditLogStats(context.Context, *AuditLogStatsReq) (*AuditLogStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogStats not implemented")
}
func (UnimplementedCoreServer) GetMenuAuthority(context.Context, *IDReq) (*RoleMenuAuthorityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAuthority not implemented")
}
func (UnimplementedCoreServer) CreateOrUpdateMenuAuthority(context.Context, *RoleMenuAuthorityReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateMenuAuthority not implemented")
}
func (UnimplementedCoreServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedCoreServer) CreateCasbinRule(context.Context, *CasbinRuleInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCasbinRule not implemented")
}
func (UnimplementedCoreServer) UpdateCasbinRule(context.Context, *CasbinRuleInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCasbinRule not implemented")
}
func (UnimplementedCoreServer) DeleteCasbinRule(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCasbinRule not implemented")
}
func (UnimplementedCoreServer) GetCasbinRuleList(context.Context, *CasbinRuleListReq) (*CasbinRuleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasbinRuleList not implemented")
}
func (UnimplementedCoreServer) GetCasbinRuleById(context.Context, *IDReq) (*CasbinRuleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasbinRuleById not implemented")
}
func (UnimplementedCoreServer) BatchCreateCasbinRules(context.Context, *BatchCreateCasbinRulesReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateCasbinRules not implemented")
}
func (UnimplementedCoreServer) BatchUpdateCasbinRules(context.Context, *BatchUpdateCasbinRulesReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateCasbinRules not implemented")
}
func (UnimplementedCoreServer) BatchDeleteCasbinRules(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteCasbinRules not implemented")
}
func (UnimplementedCoreServer) CheckPermission(context.Context, *PermissionCheckReq) (*PermissionCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedCoreServer) BatchCheckPermission(context.Context, *BatchPermissionCheckReq) (*BatchPermissionCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckPermission not implemented")
}
func (UnimplementedCoreServer) GetUserPermissionSummary(context.Context, *GetUserPermissionSummaryReq) (*GetUserPermissionSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionSummary not implemented")
}
func (UnimplementedCoreServer) ValidateCasbinRule(context.Context, *ValidateCasbinRuleReq) (*ValidateCasbinRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCasbinRule not implemented")
}
func (UnimplementedCoreServer) SyncCasbinRules(context.Context, *SyncCasbinRulesReq) (*SyncCasbinRulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCasbinRules not implemented")
}
func (UnimplementedCoreServer) RefreshCasbinCache(context.Context, *RefreshCasbinCacheReq) (*RefreshCasbinCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshCasbinCache not implemented")
}
func (UnimplementedCoreServer) CreateConfiguration(context.Context, *ConfigurationInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfiguration not implemented")
}
func (UnimplementedCoreServer) UpdateConfiguration(context.Context, *ConfigurationInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedCoreServer) GetConfigurationList(context.Context, *ConfigurationListReq) (*ConfigurationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationList not implemented")
}
func (UnimplementedCoreServer) GetConfigurationById(context.Context, *IDReq) (*ConfigurationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationById not implemented")
}
func (UnimplementedCoreServer) DeleteConfiguration(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfiguration not implemented")
}
func (UnimplementedCoreServer) RefreshConfigurationCache(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshConfigurationCache not implemented")
}
func (UnimplementedCoreServer) CreateDepartment(context.Context, *DepartmentInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedCoreServer) UpdateDepartment(context.Context, *DepartmentInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedCoreServer) GetDepartmentList(context.Context, *DepartmentListReq) (*DepartmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentList not implemented")
}
func (UnimplementedCoreServer) GetDepartmentById(context.Context, *IDReq) (*DepartmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (UnimplementedCoreServer) DeleteDepartment(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedCoreServer) InitDeptDataPermToRedis(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDeptDataPermToRedis not implemented")
}
func (UnimplementedCoreServer) CreateDictionary(context.Context, *DictionaryInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionary not implemented")
}
func (UnimplementedCoreServer) UpdateDictionary(context.Context, *DictionaryInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionary not implemented")
}
func (UnimplementedCoreServer) GetDictionaryList(context.Context, *DictionaryListReq) (*DictionaryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryList not implemented")
}
func (UnimplementedCoreServer) GetDictionaryById(context.Context, *IDReq) (*DictionaryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryById not implemented")
}
func (UnimplementedCoreServer) DeleteDictionary(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionary not implemented")
}
func (UnimplementedCoreServer) CreateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionaryDetail not implemented")
}
func (UnimplementedCoreServer) UpdateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionaryDetail not implemented")
}
func (UnimplementedCoreServer) GetDictionaryDetailList(context.Context, *DictionaryDetailListReq) (*DictionaryDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailList not implemented")
}
func (UnimplementedCoreServer) GetDictionaryDetailById(context.Context, *IDReq) (*DictionaryDetailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailById not implemented")
}
func (UnimplementedCoreServer) DeleteDictionaryDetail(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionaryDetail not implemented")
}
func (UnimplementedCoreServer) GetDictionaryDetailByDictionaryName(context.Context, *BaseMsg) (*DictionaryDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailByDictionaryName not implemented")
}
func (UnimplementedCoreServer) CreateMenu(context.Context, *MenuInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedCoreServer) UpdateMenu(context.Context, *MenuInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedCoreServer) DeleteMenu(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedCoreServer) GetMenu(context.Context, *IDReq) (*MenuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedCoreServer) GetMenuListByRole(context.Context, *BaseMsg) (*MenuInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuListByRole not implemented")
}
func (UnimplementedCoreServer) GetMenuList(context.Context, *PageInfoReq) (*MenuInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuList not implemented")
}
func (UnimplementedCoreServer) CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthProvider not implemented")
}
func (UnimplementedCoreServer) UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOauthProvider not implemented")
}
func (UnimplementedCoreServer) GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderList not implemented")
}
func (UnimplementedCoreServer) GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderById not implemented")
}
func (UnimplementedCoreServer) DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOauthProvider not implemented")
}
func (UnimplementedCoreServer) OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedCoreServer) OauthCallback(context.Context, *CallbackReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthCallback not implemented")
}
func (UnimplementedCoreServer) CreateOauthAccount(context.Context, *OauthAccountInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthAccount not implemented")
}
func (UnimplementedCoreServer) UpdateOauthAccount(context.Context, *OauthAccountInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOauthAccount not implemented")
}
func (UnimplementedCoreServer) GetOauthAccountList(context.Context, *OauthAccountListReq) (*OauthAccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthAccountList not implemented")
}
func (UnimplementedCoreServer) GetOauthAccountById(context.Context, *IDReq) (*OauthAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthAccountById not implemented")
}
func (UnimplementedCoreServer) DeleteOauthAccount(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOauthAccount not implemented")
}
func (UnimplementedCoreServer) BindOauthAccount(context.Context, *BindOauthAccountReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOauthAccount not implemented")
}
func (UnimplementedCoreServer) UnbindOauthAccount(context.Context, *UnbindOauthAccountReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindOauthAccount not implemented")
}
func (UnimplementedCoreServer) GetUserOauthAccounts(context.Context, *GetUserOauthAccountsReq) (*GetUserOauthAccountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOauthAccounts not implemented")
}
func (UnimplementedCoreServer) CreateOauthSession(context.Context, *CreateOauthSessionReq) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthSession not implemented")
}
func (UnimplementedCoreServer) UpdateOauthSession(context.Context, *UpdateOauthSessionReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOauthSession not implemented")
}
func (UnimplementedCoreServer) GetOauthSessionByState(context.Context, *GetOauthSessionByStateReq) (*OauthSessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthSessionByState not implemented")
}
func (UnimplementedCoreServer) DeleteOauthSession(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOauthSession not implemented")
}
func (UnimplementedCoreServer) CreatePosition(context.Context, *PositionInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosition not implemented")
}
func (UnimplementedCoreServer) UpdatePosition(context.Context, *PositionInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedCoreServer) GetPositionList(context.Context, *PositionListReq) (*PositionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionList not implemented")
}
func (UnimplementedCoreServer) GetPositionById(context.Context, *IDReq) (*PositionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionById not implemented")
}
func (UnimplementedCoreServer) DeletePosition(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosition not implemented")
}
func (UnimplementedCoreServer) CreateRole(context.Context, *RoleInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedCoreServer) UpdateRole(context.Context, *RoleInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedCoreServer) GetRoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedCoreServer) GetRoleById(context.Context, *IDReq) (*RoleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (UnimplementedCoreServer) DeleteRole(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedCoreServer) InitRoleDataPermToRedis(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitRoleDataPermToRedis not implemented")
}
func (UnimplementedCoreServer) AssignRoleDataScope(context.Context, *RoleDataScopeReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleDataScope not implemented")
}
func (UnimplementedCoreServer) CancelAuth(context.Context, *RoleAuthReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAuth not implemented")
}
func (UnimplementedCoreServer) AddAuth(context.Context, *RoleAuthReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuth not implemented")
}
func (UnimplementedCoreServer) ChangeRoleStatus(context.Context, *RoleStatusChangeParam) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoleStatus not implemented")
}
func (UnimplementedCoreServer) CreateTenant(context.Context, *TenantInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedCoreServer) UpdateTenant(context.Context, *TenantInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedCoreServer) GetTenantList(context.Context, *TenantListReq) (*TenantListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantList not implemented")
}
func (UnimplementedCoreServer) GetTenantById(context.Context, *IDReq) (*TenantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantById not implemented")
}
func (UnimplementedCoreServer) GetTenantByCode(context.Context, *TenantCodeReq) (*TenantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantByCode not implemented")
}
func (UnimplementedCoreServer) DeleteTenant(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedCoreServer) UpdateTenantStatus(context.Context, *TenantStatusReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantStatus not implemented")
}
func (UnimplementedCoreServer) InitTenant(context.Context, *TenantInitReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitTenant not implemented")
}
func (UnimplementedCoreServer) GetPublicTenantList(context.Context, *Empty) (*PublicTenantListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicTenantList not implemented")
}
func (UnimplementedCoreServer) CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedCoreServer) DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedCoreServer) GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (UnimplementedCoreServer) GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenById not implemented")
}
func (UnimplementedCoreServer) BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUserAllToken not implemented")
}
func (UnimplementedCoreServer) UpdateToken(context.Context, *TokenInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedCoreServer) CreateUser(context.Context, *UserInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCoreServer) UpdateUser(context.Context, *UserInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCoreServer) GetUserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedCoreServer) GetUserById(context.Context, *UUIDReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedCoreServer) GetUserByUsername(context.Context, *UsernameReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedCoreServer) DeleteUser(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCoreServer) ResetPwd(context.Context, *ResetPwdReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (UnimplementedCoreServer) UnallocatedList(context.Context, *RoleUnallocatedListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnallocatedList not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}
func (UnimplementedCoreServer) testEmbeddedByValue()              {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	// If the following call pancis, it indicates UnimplementedCoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateApi(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateApi(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetApiList(ctx, req.(*ApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetApiById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetApiById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetApiById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetApiById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteApi(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLogInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateAuditLog(ctx, req.(*AuditLogInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetAuditLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetAuditLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetAuditLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetAuditLogList(ctx, req.(*AuditLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetAuditLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetAuditLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetAuditLogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetAuditLogById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteAuditLog(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetAuditLogStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLogStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetAuditLogStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetAuditLogStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetAuditLogStats(ctx, req.(*AuditLogStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetMenuAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetMenuAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetMenuAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetMenuAuthority(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateOrUpdateMenuAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuAuthorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateOrUpdateMenuAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateOrUpdateMenuAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateOrUpdateMenuAuthority(ctx, req.(*RoleMenuAuthorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateCasbinRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateCasbinRule(ctx, req.(*CasbinRuleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateCasbinRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateCasbinRule(ctx, req.(*CasbinRuleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteCasbinRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteCasbinRule(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetCasbinRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetCasbinRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetCasbinRuleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetCasbinRuleList(ctx, req.(*CasbinRuleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetCasbinRuleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetCasbinRuleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetCasbinRuleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetCasbinRuleById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BatchCreateCasbinRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateCasbinRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BatchCreateCasbinRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BatchCreateCasbinRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BatchCreateCasbinRules(ctx, req.(*BatchCreateCasbinRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BatchUpdateCasbinRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateCasbinRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BatchUpdateCasbinRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BatchUpdateCasbinRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BatchUpdateCasbinRules(ctx, req.(*BatchUpdateCasbinRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BatchDeleteCasbinRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BatchDeleteCasbinRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BatchDeleteCasbinRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BatchDeleteCasbinRules(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CheckPermission(ctx, req.(*PermissionCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BatchCheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchPermissionCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BatchCheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BatchCheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BatchCheckPermission(ctx, req.(*BatchPermissionCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserPermissionSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserPermissionSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserPermissionSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserPermissionSummary(ctx, req.(*GetUserPermissionSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ValidateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCasbinRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ValidateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ValidateCasbinRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ValidateCasbinRule(ctx, req.(*ValidateCasbinRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SyncCasbinRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCasbinRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SyncCasbinRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SyncCasbinRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SyncCasbinRules(ctx, req.(*SyncCasbinRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RefreshCasbinCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshCasbinCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RefreshCasbinCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RefreshCasbinCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RefreshCasbinCache(ctx, req.(*RefreshCasbinCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateConfiguration(ctx, req.(*ConfigurationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateConfiguration(ctx, req.(*ConfigurationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetConfigurationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetConfigurationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetConfigurationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetConfigurationList(ctx, req.(*ConfigurationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetConfigurationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetConfigurationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetConfigurationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetConfigurationById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteConfiguration(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RefreshConfigurationCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RefreshConfigurationCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RefreshConfigurationCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RefreshConfigurationCache(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateDepartment(ctx, req.(*DepartmentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateDepartment(ctx, req.(*DepartmentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDepartmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDepartmentList(ctx, req.(*DepartmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDepartmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDepartmentById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteDepartment(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_InitDeptDataPermToRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).InitDeptDataPermToRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_InitDeptDataPermToRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).InitDeptDataPermToRedis(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateDictionary(ctx, req.(*DictionaryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateDictionary(ctx, req.(*DictionaryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryList(ctx, req.(*DictionaryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteDictionary(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateDictionaryDetail(ctx, req.(*DictionaryDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateDictionaryDetail(ctx, req.(*DictionaryDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryDetailList(ctx, req.(*DictionaryDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryDetailById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteDictionaryDetail(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetDictionaryDetailByDictionaryName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetDictionaryDetailByDictionaryName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetDictionaryDetailByDictionaryName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetDictionaryDetailByDictionaryName(ctx, req.(*BaseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateMenu(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateMenu(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteMenu(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetMenu(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetMenuListByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetMenuListByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetMenuListByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetMenuListByRole(ctx, req.(*BaseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetMenuList(ctx, req.(*PageInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetOauthProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetOauthProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetOauthProviderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetOauthProviderList(ctx, req.(*OauthProviderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetOauthProviderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetOauthProviderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetOauthProviderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetOauthProviderById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteOauthProvider(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_OauthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).OauthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_OauthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).OauthCallback(ctx, req.(*CallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateOauthAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateOauthAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateOauthAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateOauthAccount(ctx, req.(*OauthAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateOauthAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateOauthAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateOauthAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateOauthAccount(ctx, req.(*OauthAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetOauthAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthAccountListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetOauthAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetOauthAccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetOauthAccountList(ctx, req.(*OauthAccountListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetOauthAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetOauthAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetOauthAccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetOauthAccountById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteOauthAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteOauthAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteOauthAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteOauthAccount(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BindOauthAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindOauthAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BindOauthAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BindOauthAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BindOauthAccount(ctx, req.(*BindOauthAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UnbindOauthAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindOauthAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UnbindOauthAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UnbindOauthAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UnbindOauthAccount(ctx, req.(*UnbindOauthAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserOauthAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOauthAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserOauthAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserOauthAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserOauthAccounts(ctx, req.(*GetUserOauthAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateOauthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOauthSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateOauthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateOauthSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateOauthSession(ctx, req.(*CreateOauthSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateOauthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOauthSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateOauthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateOauthSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateOauthSession(ctx, req.(*UpdateOauthSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetOauthSessionByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOauthSessionByStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetOauthSessionByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetOauthSessionByState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetOauthSessionByState(ctx, req.(*GetOauthSessionByStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteOauthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteOauthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteOauthSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteOauthSession(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreatePosition(ctx, req.(*PositionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdatePosition(ctx, req.(*PositionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPositionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPositionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPositionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPositionList(ctx, req.(*PositionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPositionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPositionById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeletePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeletePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeletePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeletePosition(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateRole(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateRole(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetRoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetRoleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetRoleById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteRole(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_InitRoleDataPermToRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).InitRoleDataPermToRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_InitRoleDataPermToRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).InitRoleDataPermToRedis(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_AssignRoleDataScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDataScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AssignRoleDataScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AssignRoleDataScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AssignRoleDataScope(ctx, req.(*RoleDataScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CancelAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CancelAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CancelAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CancelAuth(ctx, req.(*RoleAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_AddAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AddAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AddAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AddAuth(ctx, req.(*RoleAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ChangeRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleStatusChangeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ChangeRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ChangeRoleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ChangeRoleStatus(ctx, req.(*RoleStatusChangeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateTenant(ctx, req.(*TenantInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateTenant(ctx, req.(*TenantInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetTenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTenantList(ctx, req.(*TenantListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetTenantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTenantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetTenantById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTenantById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetTenantByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTenantByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetTenantByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTenantByCode(ctx, req.(*TenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteTenant(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateTenantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateTenantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateTenantStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateTenantStatus(ctx, req.(*TenantStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_InitTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantInitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).InitTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_InitTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).InitTenant(ctx, req.(*TenantInitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetPublicTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetPublicTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetPublicTenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetPublicTenantList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteToken(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetTokenList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTokenList(ctx, req.(*TokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetTokenById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTokenById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BlockUserAllToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BlockUserAllToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BlockUserAllToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BlockUserAllToken(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetUserByUsername(ctx, req.(*UsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteUser(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ResetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ResetPwd(ctx, req.(*ResetPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UnallocatedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUnallocatedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UnallocatedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UnallocatedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UnallocatedList(ctx, req.(*RoleUnallocatedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createApi",
			Handler:    _Core_CreateApi_Handler,
		},
		{
			MethodName: "updateApi",
			Handler:    _Core_UpdateApi_Handler,
		},
		{
			MethodName: "getApiList",
			Handler:    _Core_GetApiList_Handler,
		},
		{
			MethodName: "getApiById",
			Handler:    _Core_GetApiById_Handler,
		},
		{
			MethodName: "deleteApi",
			Handler:    _Core_DeleteApi_Handler,
		},
		{
			MethodName: "createAuditLog",
			Handler:    _Core_CreateAuditLog_Handler,
		},
		{
			MethodName: "getAuditLogList",
			Handler:    _Core_GetAuditLogList_Handler,
		},
		{
			MethodName: "getAuditLogById",
			Handler:    _Core_GetAuditLogById_Handler,
		},
		{
			MethodName: "deleteAuditLog",
			Handler:    _Core_DeleteAuditLog_Handler,
		},
		{
			MethodName: "getAuditLogStats",
			Handler:    _Core_GetAuditLogStats_Handler,
		},
		{
			MethodName: "getMenuAuthority",
			Handler:    _Core_GetMenuAuthority_Handler,
		},
		{
			MethodName: "createOrUpdateMenuAuthority",
			Handler:    _Core_CreateOrUpdateMenuAuthority_Handler,
		},
		{
			MethodName: "initDatabase",
			Handler:    _Core_InitDatabase_Handler,
		},
		{
			MethodName: "createCasbinRule",
			Handler:    _Core_CreateCasbinRule_Handler,
		},
		{
			MethodName: "updateCasbinRule",
			Handler:    _Core_UpdateCasbinRule_Handler,
		},
		{
			MethodName: "deleteCasbinRule",
			Handler:    _Core_DeleteCasbinRule_Handler,
		},
		{
			MethodName: "getCasbinRuleList",
			Handler:    _Core_GetCasbinRuleList_Handler,
		},
		{
			MethodName: "getCasbinRuleById",
			Handler:    _Core_GetCasbinRuleById_Handler,
		},
		{
			MethodName: "batchCreateCasbinRules",
			Handler:    _Core_BatchCreateCasbinRules_Handler,
		},
		{
			MethodName: "batchUpdateCasbinRules",
			Handler:    _Core_BatchUpdateCasbinRules_Handler,
		},
		{
			MethodName: "batchDeleteCasbinRules",
			Handler:    _Core_BatchDeleteCasbinRules_Handler,
		},
		{
			MethodName: "checkPermission",
			Handler:    _Core_CheckPermission_Handler,
		},
		{
			MethodName: "batchCheckPermission",
			Handler:    _Core_BatchCheckPermission_Handler,
		},
		{
			MethodName: "getUserPermissionSummary",
			Handler:    _Core_GetUserPermissionSummary_Handler,
		},
		{
			MethodName: "validateCasbinRule",
			Handler:    _Core_ValidateCasbinRule_Handler,
		},
		{
			MethodName: "syncCasbinRules",
			Handler:    _Core_SyncCasbinRules_Handler,
		},
		{
			MethodName: "refreshCasbinCache",
			Handler:    _Core_RefreshCasbinCache_Handler,
		},
		{
			MethodName: "createConfiguration",
			Handler:    _Core_CreateConfiguration_Handler,
		},
		{
			MethodName: "updateConfiguration",
			Handler:    _Core_UpdateConfiguration_Handler,
		},
		{
			MethodName: "getConfigurationList",
			Handler:    _Core_GetConfigurationList_Handler,
		},
		{
			MethodName: "getConfigurationById",
			Handler:    _Core_GetConfigurationById_Handler,
		},
		{
			MethodName: "deleteConfiguration",
			Handler:    _Core_DeleteConfiguration_Handler,
		},
		{
			MethodName: "refreshConfigurationCache",
			Handler:    _Core_RefreshConfigurationCache_Handler,
		},
		{
			MethodName: "createDepartment",
			Handler:    _Core_CreateDepartment_Handler,
		},
		{
			MethodName: "updateDepartment",
			Handler:    _Core_UpdateDepartment_Handler,
		},
		{
			MethodName: "getDepartmentList",
			Handler:    _Core_GetDepartmentList_Handler,
		},
		{
			MethodName: "getDepartmentById",
			Handler:    _Core_GetDepartmentById_Handler,
		},
		{
			MethodName: "deleteDepartment",
			Handler:    _Core_DeleteDepartment_Handler,
		},
		{
			MethodName: "initDeptDataPermToRedis",
			Handler:    _Core_InitDeptDataPermToRedis_Handler,
		},
		{
			MethodName: "createDictionary",
			Handler:    _Core_CreateDictionary_Handler,
		},
		{
			MethodName: "updateDictionary",
			Handler:    _Core_UpdateDictionary_Handler,
		},
		{
			MethodName: "getDictionaryList",
			Handler:    _Core_GetDictionaryList_Handler,
		},
		{
			MethodName: "getDictionaryById",
			Handler:    _Core_GetDictionaryById_Handler,
		},
		{
			MethodName: "deleteDictionary",
			Handler:    _Core_DeleteDictionary_Handler,
		},
		{
			MethodName: "createDictionaryDetail",
			Handler:    _Core_CreateDictionaryDetail_Handler,
		},
		{
			MethodName: "updateDictionaryDetail",
			Handler:    _Core_UpdateDictionaryDetail_Handler,
		},
		{
			MethodName: "getDictionaryDetailList",
			Handler:    _Core_GetDictionaryDetailList_Handler,
		},
		{
			MethodName: "getDictionaryDetailById",
			Handler:    _Core_GetDictionaryDetailById_Handler,
		},
		{
			MethodName: "deleteDictionaryDetail",
			Handler:    _Core_DeleteDictionaryDetail_Handler,
		},
		{
			MethodName: "getDictionaryDetailByDictionaryName",
			Handler:    _Core_GetDictionaryDetailByDictionaryName_Handler,
		},
		{
			MethodName: "createMenu",
			Handler:    _Core_CreateMenu_Handler,
		},
		{
			MethodName: "updateMenu",
			Handler:    _Core_UpdateMenu_Handler,
		},
		{
			MethodName: "deleteMenu",
			Handler:    _Core_DeleteMenu_Handler,
		},
		{
			MethodName: "getMenu",
			Handler:    _Core_GetMenu_Handler,
		},
		{
			MethodName: "getMenuListByRole",
			Handler:    _Core_GetMenuListByRole_Handler,
		},
		{
			MethodName: "getMenuList",
			Handler:    _Core_GetMenuList_Handler,
		},
		{
			MethodName: "createOauthProvider",
			Handler:    _Core_CreateOauthProvider_Handler,
		},
		{
			MethodName: "updateOauthProvider",
			Handler:    _Core_UpdateOauthProvider_Handler,
		},
		{
			MethodName: "getOauthProviderList",
			Handler:    _Core_GetOauthProviderList_Handler,
		},
		{
			MethodName: "getOauthProviderById",
			Handler:    _Core_GetOauthProviderById_Handler,
		},
		{
			MethodName: "deleteOauthProvider",
			Handler:    _Core_DeleteOauthProvider_Handler,
		},
		{
			MethodName: "oauthLogin",
			Handler:    _Core_OauthLogin_Handler,
		},
		{
			MethodName: "oauthCallback",
			Handler:    _Core_OauthCallback_Handler,
		},
		{
			MethodName: "createOauthAccount",
			Handler:    _Core_CreateOauthAccount_Handler,
		},
		{
			MethodName: "updateOauthAccount",
			Handler:    _Core_UpdateOauthAccount_Handler,
		},
		{
			MethodName: "getOauthAccountList",
			Handler:    _Core_GetOauthAccountList_Handler,
		},
		{
			MethodName: "getOauthAccountById",
			Handler:    _Core_GetOauthAccountById_Handler,
		},
		{
			MethodName: "deleteOauthAccount",
			Handler:    _Core_DeleteOauthAccount_Handler,
		},
		{
			MethodName: "bindOauthAccount",
			Handler:    _Core_BindOauthAccount_Handler,
		},
		{
			MethodName: "unbindOauthAccount",
			Handler:    _Core_UnbindOauthAccount_Handler,
		},
		{
			MethodName: "getUserOauthAccounts",
			Handler:    _Core_GetUserOauthAccounts_Handler,
		},
		{
			MethodName: "createOauthSession",
			Handler:    _Core_CreateOauthSession_Handler,
		},
		{
			MethodName: "updateOauthSession",
			Handler:    _Core_UpdateOauthSession_Handler,
		},
		{
			MethodName: "getOauthSessionByState",
			Handler:    _Core_GetOauthSessionByState_Handler,
		},
		{
			MethodName: "deleteOauthSession",
			Handler:    _Core_DeleteOauthSession_Handler,
		},
		{
			MethodName: "createPosition",
			Handler:    _Core_CreatePosition_Handler,
		},
		{
			MethodName: "updatePosition",
			Handler:    _Core_UpdatePosition_Handler,
		},
		{
			MethodName: "getPositionList",
			Handler:    _Core_GetPositionList_Handler,
		},
		{
			MethodName: "getPositionById",
			Handler:    _Core_GetPositionById_Handler,
		},
		{
			MethodName: "deletePosition",
			Handler:    _Core_DeletePosition_Handler,
		},
		{
			MethodName: "createRole",
			Handler:    _Core_CreateRole_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _Core_UpdateRole_Handler,
		},
		{
			MethodName: "getRoleList",
			Handler:    _Core_GetRoleList_Handler,
		},
		{
			MethodName: "getRoleById",
			Handler:    _Core_GetRoleById_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _Core_DeleteRole_Handler,
		},
		{
			MethodName: "initRoleDataPermToRedis",
			Handler:    _Core_InitRoleDataPermToRedis_Handler,
		},
		{
			MethodName: "assignRoleDataScope",
			Handler:    _Core_AssignRoleDataScope_Handler,
		},
		{
			MethodName: "cancelAuth",
			Handler:    _Core_CancelAuth_Handler,
		},
		{
			MethodName: "addAuth",
			Handler:    _Core_AddAuth_Handler,
		},
		{
			MethodName: "changeRoleStatus",
			Handler:    _Core_ChangeRoleStatus_Handler,
		},
		{
			MethodName: "createTenant",
			Handler:    _Core_CreateTenant_Handler,
		},
		{
			MethodName: "updateTenant",
			Handler:    _Core_UpdateTenant_Handler,
		},
		{
			MethodName: "getTenantList",
			Handler:    _Core_GetTenantList_Handler,
		},
		{
			MethodName: "getTenantById",
			Handler:    _Core_GetTenantById_Handler,
		},
		{
			MethodName: "getTenantByCode",
			Handler:    _Core_GetTenantByCode_Handler,
		},
		{
			MethodName: "deleteTenant",
			Handler:    _Core_DeleteTenant_Handler,
		},
		{
			MethodName: "updateTenantStatus",
			Handler:    _Core_UpdateTenantStatus_Handler,
		},
		{
			MethodName: "initTenant",
			Handler:    _Core_InitTenant_Handler,
		},
		{
			MethodName: "getPublicTenantList",
			Handler:    _Core_GetPublicTenantList_Handler,
		},
		{
			MethodName: "createToken",
			Handler:    _Core_CreateToken_Handler,
		},
		{
			MethodName: "deleteToken",
			Handler:    _Core_DeleteToken_Handler,
		},
		{
			MethodName: "getTokenList",
			Handler:    _Core_GetTokenList_Handler,
		},
		{
			MethodName: "getTokenById",
			Handler:    _Core_GetTokenById_Handler,
		},
		{
			MethodName: "blockUserAllToken",
			Handler:    _Core_BlockUserAllToken_Handler,
		},
		{
			MethodName: "updateToken",
			Handler:    _Core_UpdateToken_Handler,
		},
		{
			MethodName: "createUser",
			Handler:    _Core_CreateUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _Core_UpdateUser_Handler,
		},
		{
			MethodName: "getUserList",
			Handler:    _Core_GetUserList_Handler,
		},
		{
			MethodName: "getUserById",
			Handler:    _Core_GetUserById_Handler,
		},
		{
			MethodName: "getUserByUsername",
			Handler:    _Core_GetUserByUsername_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _Core_DeleteUser_Handler,
		},
		{
			MethodName: "resetPwd",
			Handler:    _Core_ResetPwd_Handler,
		},
		{
			MethodName: "unallocatedList",
			Handler:    _Core_UnallocatedList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
